TITLE: Configuring Nuxt UI Module in Nuxt
DESCRIPTION: This TypeScript snippet adds the `@nuxt/ui` module to your Nuxt project's configuration file (`nuxt.config.ts`). This is a required step to integrate Nuxt UI, enabling its features and components within your Nuxt application.
SOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_4

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  modules: ['@nuxt/ui']
})
```

----------------------------------------

TITLE: Wrapping Application with UApp Component (Vue)
DESCRIPTION: This snippet demonstrates the basic usage of the `UApp` component, which should be placed at the root of your application. It wraps the `NuxtPage` component, ensuring that all global configurations, such as those provided by Reka UI's `ConfigProvider`, `ToastProvider`, and `TooltipProvider`, are available throughout your app. This setup helps manage global behaviors, prevent layout shifts, and enable programmatic UI elements.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/0.app.md#_snippet_0

LANGUAGE: vue
CODE:
```
<template>
  <UApp>
    <NuxtPage />
  </UApp>
</template>
```

----------------------------------------

TITLE: Installing Nuxt UI Package
DESCRIPTION: This snippet demonstrates how to install the `@nuxt/ui` package using various package managers. It's the first step to integrate Nuxt UI into your Vue project.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_0

LANGUAGE: bash
CODE:
```
pnpm add @nuxt/ui
```

LANGUAGE: bash
CODE:
```
yarn add @nuxt/ui
```

LANGUAGE: bash
CODE:
```
npm install @nuxt/ui
```

LANGUAGE: bash
CODE:
```
bun add @nuxt/ui
```

----------------------------------------

TITLE: Configuring InputMenu Items with String Array - Vue
DESCRIPTION: This snippet demonstrates how to populate the `InputMenu` with a simple array of strings for the `items` prop. The `modelValue` is set to 'Backlog' to show an initial selected item. This configuration is suitable for basic lists where each item is a simple string, number, or boolean.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<InputMenu :model-value="'Backlog'" :items="['Backlog', 'Todo', 'In Progress', 'Done']" />
```

----------------------------------------

TITLE: Setting Button Label with `label` Prop - Vue
DESCRIPTION: Illustrates setting the button's text label using the `label` prop, offering an alternative to the default slot for concise text content.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UButton label="Button" />
```

----------------------------------------

TITLE: Changing Button Size - Vue
DESCRIPTION: Illustrates how to adjust the size of the UButton component using the `size` prop, setting it to 'xl' for an extra-large appearance.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button.md#_snippet_4

LANGUAGE: Vue
CODE:
```
<UButton size="xl">Button</UButton>
```

----------------------------------------

TITLE: Wrapping App with UApp Component - Vue
DESCRIPTION: Wrap the main application content in your `app.vue` file with the `<UApp>` component. This component is required in v3 to provide necessary context and styling wrappers for Nuxt UI components.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_4

LANGUAGE: vue
CODE:
```
<template>
  <UApp>
    <NuxtPage />
  </UApp>
</template>
```

----------------------------------------

TITLE: Installing Nuxt UI Package
DESCRIPTION: This snippet demonstrates how to install the Nuxt UI package using various package managers. It's the first step to integrate Nuxt UI into your project. Users should choose the command corresponding to their preferred package manager.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#_snippet_0

LANGUAGE: bash
CODE:
```
pnpm add @nuxt/ui
```

LANGUAGE: bash
CODE:
```
yarn add @nuxt/ui
```

LANGUAGE: bash
CODE:
```
npm install @nuxt/ui
```

LANGUAGE: bash
CODE:
```
bun add @nuxt/ui
```

----------------------------------------

TITLE: Adding Nuxt UI Module to Nuxt Config
DESCRIPTION: This snippet shows how to register the `@nuxt/ui` module in your `nuxt.config.ts` file. Adding it to the `modules` array enables Nuxt UI's features and components within your Nuxt application.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#_snippet_1

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  modules: ['@nuxt/ui']
})
```

----------------------------------------

TITLE: Controlling InputNumber Value with v-model
DESCRIPTION: Demonstrates how to use the v-model directive to bind and control the numerical value of the InputNumber component. The modelValue prop is used externally, implying state management in the parent component.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-number.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UInputNumber v-model="modelValue" />
```

----------------------------------------

TITLE: Installing Nuxt UI with npm
DESCRIPTION: This command installs the Nuxt UI package using the npm package manager. It adds `@nuxt/ui` as a dependency to your project, making its components and utilities available for use.
SOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install @nuxt/ui
```

----------------------------------------

TITLE: Wrapping App with UApp Component (Vue Template)
DESCRIPTION: Illustrates the new approach of wrapping the main application content (`<NuxtPage />`) with the `<UApp>` component instead of using the deprecated global `<UModals>`, `<USlideovers>`, and `<UNotifications>` components. Required dependencies: Nuxt UI's `UApp` component. Expected input: The main page content (`<NuxtPage />`).
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_7

LANGUAGE: Vue Template
CODE:
```
<template>
  <UApp>
    <NuxtPage />
  </UApp>
</template>
```

----------------------------------------

TITLE: Controlling Checkbox State with v-model (Vue)
DESCRIPTION: Demonstrates how to use the `v-model` directive to bind the checked state of the Checkbox component to a reactive data property. This allows for two-way data binding, enabling dynamic control and updates of the checkbox's state.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UCheckbox v-model="modelValue" />
```

----------------------------------------

TITLE: Importing Tailwind CSS and Nuxt UI
DESCRIPTION: These snippets illustrate how to import Tailwind CSS and Nuxt UI styles into your application. The CSS snippet imports the necessary stylesheets, while the TypeScript snippet configures Nuxt to use this main CSS file, ensuring styles are applied globally.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#_snippet_2

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui";
```

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  modules: ['@nuxt/ui'],
  css: ['~/assets/css/main.css']
})
```

----------------------------------------

TITLE: Setting Total Pages in Nuxt UI Pagination (Vue)
DESCRIPTION: This snippet demonstrates how to use the `total` prop to specify the total number of items in the list, which the Pagination component uses to calculate the total number of pages. The `page` prop controls the currently active page.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UPagination :page="5" :total="100" />
```

----------------------------------------

TITLE: Controlling Switch State with v-model (Vue)
DESCRIPTION: This snippet demonstrates how to use the `v-model` directive to establish a two-way binding with the Switch component, allowing you to control and react to its checked state. A `ref` variable `value` is used to manage the state, requiring `ref` to be imported from 'vue'.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup>
import { ref } from 'vue'

const value = ref(false)
</script>

<template>
  <U-Switch v-model="value" />
</template>
```

----------------------------------------

TITLE: Importing Nuxt UI and Tailwind CSS in Nuxt
DESCRIPTION: This CSS snippet imports the necessary stylesheets for Tailwind CSS and Nuxt UI into your main CSS file (e.g., `assets/css/main.css`). These imports are crucial for applying the styling provided by both frameworks to your Nuxt application.
SOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_5

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui";
```

----------------------------------------

TITLE: Creating New Project with Nuxt UI Starter
DESCRIPTION: This command-line snippet shows how to initialize a new Nuxt project using the pre-configured Nuxt UI starter template. Replace `<my-app>` with your desired project directory name to quickly set up a project with Nuxt UI.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#_snippet_5

LANGUAGE: bash
CODE:
```
npx nuxi init -t ui <my-app>
```

----------------------------------------

TITLE: Starting Nuxt Development Server
DESCRIPTION: These command-line snippets guide you on navigating into your newly created project directory and starting the development server. This allows you to run your Nuxt application locally and see your changes in real-time.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#_snippet_6

LANGUAGE: bash
CODE:
```
cd <my-app>
npm run dev
```

----------------------------------------

TITLE: Setting Button Label with Default Slot - Vue
DESCRIPTION: Demonstrates how to set the text label of the UButton component using its default slot. This is a common way to provide content for components.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UButton>Button</UButton>
```

----------------------------------------

TITLE: Controlling ColorPicker Value with v-model (YAML)
DESCRIPTION: Demonstrates how to use the `v-model` directive to bind the ColorPicker's value. The `modelValue` prop is set to an initial hexadecimal color code, allowing for two-way data binding.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#_snippet_0

LANGUAGE: YAML
CODE:
```
props:
  modelValue: '#00C16A'
```

----------------------------------------

TITLE: Using PinInput with v-model in Vue
DESCRIPTION: This snippet demonstrates how to control the value of the UPinInput component using the v-model directive, binding it to a data property in your Vue component.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<template>
  <UPinInput v-model="value" />
</template>

<script setup>
const value = ref([])
</script>
```

----------------------------------------

TITLE: Wrapping Nuxt App with UApp Component
DESCRIPTION: This Vue template snippet demonstrates how to wrap your main application content (`<NuxtPage />`) with the `<UApp>` component. This is crucial for enabling global configurations and ensuring components like Toast, Tooltip, and Programmatic Overlays function correctly.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#_snippet_4

LANGUAGE: vue
CODE:
```
<template>
  <UApp>
    <NuxtPage />
  </UApp>
</template>
```

----------------------------------------

TITLE: Importing Tailwind CSS and Nuxt UI Styles
DESCRIPTION: This CSS snippet shows how to import Tailwind CSS and Nuxt UI's base styles into your main CSS file. This is crucial for applying the default styling and utility classes provided by both frameworks.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_5

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui";
```

----------------------------------------

TITLE: Setting Dynamic HTML Direction with Nuxt UI Pro (Vue)
DESCRIPTION: This snippet shows how to dynamically set the `lang` and `dir` attributes of the `<html>` element based on the current locale using Nuxt's `useHead` composable. It computes the language code and direction from the active locale (obtained via `useI18n` and `@nuxt/ui-pro/locale`) and applies them to the HTML attributes, ensuring proper multi-directional support for Nuxt UI Pro.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#_snippet_12

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
import * as locales from '@nuxt/ui-pro/locale'

const { locale } = useI18n()

const lang = computed(() => locales[locale.value].code)
const dir = computed(() => locales[locale.value].dir)

useHead({
  htmlAttrs: {
    lang,
    dir
  }
})
</script>

<template>
  <UApp :locale="locales[locale]">
    <NuxtPage />
  </UApp>
</template>
```

----------------------------------------

TITLE: Importing Tailwind CSS in Main CSS File - CSS
DESCRIPTION: Create a main CSS file (e.g., `app/assets/css/main.css`) and import Tailwind CSS. This is the initial step in adopting the new CSS-based configuration for Tailwind v4.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_0

LANGUAGE: css
CODE:
```
@import "tailwindcss";
```

----------------------------------------

TITLE: Configuring Navigation Menu Items in Nuxt UI (JavaScript)
DESCRIPTION: This snippet demonstrates the configuration of the `items` prop for a Nuxt UI component, typically used for navigation menus. It showcases how to define a hierarchical list of items, including main categories ('Guide', 'Composables', 'Components') with nested 'children' for sub-items. Each item can specify a `label`, `icon`, `to` path, `description`, `badge` (e.g., '3.8k' for GitHub), `target` for external links, and `disabled` state. The example also includes a `class` prop for styling the component container.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
items: [
  {
    label: 'Guide',
    icon: 'i-lucide-book-open',
    to: '/getting-started',
    children: [
      {
        label: 'Introduction',
        description: 'Fully styled and customizable components for Nuxt.',
        icon: 'i-lucide-house'
      },
      {
        label: 'Installation',
        description: 'Learn how to install and configure Nuxt UI in your application.',
        icon: 'i-lucide-cloud-download'
      },
      {
        label: 'Icons',
        icon: 'i-lucide-smile',
        description: 'You have nothing to do, @nuxt/icon will handle it automatically.'
      },
      {
        label: 'Colors',
        icon: 'i-lucide-swatch-book',
        description: 'Choose a primary and a neutral color from your Tailwind CSS theme.'
      },
      {
        label: 'Theme',
        icon: 'i-lucide-cog',
        description: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'
      }
    ]
  },
  {
    label: 'Composables',
    icon: 'i-lucide-database',
    to: '/composables',
    children: [
      {
        label: 'defineShortcuts',
        icon: 'i-lucide-file-text',
        description: 'Define shortcuts for your application.',
        to: '/composables/define-shortcuts'
      },
      {
        label: 'useOverlay',
        icon: 'i-lucide-file-text',
        description: 'Display a modal/slideover within your application.',
        to: '/composables/use-overlay'
      },
      {
        label: 'useToast',
        icon: 'i-lucide-file-text',
        description: 'Display a toast within your application.',
        to: '/composables/use-toast'
      }
    ]
  },
  {
    label: 'Components',
    icon: 'i-lucide-box',
    to: '/components',
    active: true,
    children: [
      {
        label: 'Link',
        icon: 'i-lucide-file-text',
        description: 'Use NuxtLink with superpowers.',
        to: '/components/link'
      },
      {
        label: 'Modal',
        icon: 'i-lucide-file-text',
        description: 'Display a modal within your application.',
        to: '/components/modal'
      },
      {
        label: 'NavigationMenu',
        icon: 'i-lucide-file-text',
        description: 'Display a list of links.',
        to: '/components/navigation-menu'
      },
      {
        label: 'Pagination',
        icon: 'i-lucide-file-text',
        description: 'Display a list of pages.',
        to: '/components/pagination'
      },
      {
        label: 'Popover',
        icon: 'i-lucide-file-text',
        description: 'Display a non-modal dialog that floats around a trigger element.',
        to: '/components/popover'
      },
      {
        label: 'Progress',
        icon: 'i-lucide-file-text',
        description: 'Show a horizontal bar to indicate task progression.',
        to: '/components/progress'
      }
    ]
  },
  {
    label: 'GitHub',
    icon: 'i-simple-icons-github',
    badge: '3.8k',
    to: 'https://github.com/nuxt/ui',
    target: '_blank'
  },
  {
    label: 'Help',
    icon: 'i-lucide-circle-help',
    disabled: true
  }
],
class: 'w-full justify-center'
```

----------------------------------------

TITLE: Setting Dynamic HTML Direction with Nuxt UI (Vue)
DESCRIPTION: This snippet shows how to dynamically set the `lang` and `dir` attributes of the `<html>` element based on the current locale using Nuxt's `useHead` composable. It computes the language code and direction from the active locale (obtained via `useI18n` and `@nuxt/ui/locale`) and applies them to the HTML attributes, ensuring proper multi-directional support.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#_snippet_11

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
import * as locales from '@nuxt/ui/locale'

const { locale } = useI18n()

const lang = computed(() => locales[locale.value].code)
const dir = computed(() => locales[locale.value].dir)

useHead({
  htmlAttrs: {
    lang,
    dir
  }
})
</script>

<template>
  <UApp :locale="locales[locale]">
    <NuxtPage />
  </UApp>
</template>
```

----------------------------------------

TITLE: Wrapping Vue App with UApp Component
DESCRIPTION: This Vue template snippet demonstrates how to wrap your main application content with the `<UApp>` component. This component is essential for global configurations and the proper functioning of certain Nuxt UI features like Toast and Tooltip.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_8

LANGUAGE: vue
CODE:
```
<template>
  <UApp>
    <RouterView />
  </UApp>
</template>
```

----------------------------------------

TITLE: Configuring Vue I18n in main.ts
DESCRIPTION: This TypeScript snippet demonstrates how to integrate and configure the `vue-i18n` plugin into a Vue application's `main.ts` file, setting up the i18n instance with `createI18n`, defining available locales and messages, and registering it with the Vue app.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import { createApp } from 'vue'
import { createRouter, createWebHistory } from 'vue-router'
import { createI18n } from 'vue-i18n'
import ui from '@nuxt/ui/vue-plugin'
import App from './App.vue'

const app = createApp(App)

const router = createRouter({
  routes: [],
  history: createWebHistory()
})

const i18n = createI18n({
  legacy: false,
  locale: 'en',
  availableLocales: ['en', 'de'],
  messages: {
    en: {
      // ...
    },
    de: {
      // ...
    }
  }
})

app.use(router)
app.use(i18n)
app.use(ui)

app.mount('#app')
```

----------------------------------------

TITLE: Integrating Nuxt UI Vue Plugin in main.ts
DESCRIPTION: This TypeScript snippet demonstrates how to import and use the Nuxt UI Vue plugin in your `main.ts` file. It initializes Nuxt UI for your Vue application, making its components and features available globally.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { createApp } from 'vue'
import { createRouter, createWebHistory } from 'vue-router'
import ui from '@nuxt/ui/vue-plugin'
import App from './App.vue'

const app = createApp(App)

const router = createRouter({
  routes: [],
  history: createWebHistory()
})

app.use(router)
app.use(ui)

app.mount('#app')
```

----------------------------------------

TITLE: Customizing Nuxt UI Colors in main.css - CSS
DESCRIPTION: Demonstrates how to import Tailwind CSS and Nuxt UI styles and customize the base --ui-bg and --ui-text CSS variables for both light and dark modes within the :root and .dark selectors. This allows overriding default theme colors.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_22

LANGUAGE: CSS
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui";

:root {
  --ui-bg: var(--ui-color-neutral-50);
  --ui-text: var(--ui-color-neutral-900);
}

.dark {
  --ui-bg: var(--ui-color-neutral-950);
  --ui-border: var(--ui-color-neutral-900);
}
```

----------------------------------------

TITLE: Setting Dynamic Locale with Vue I18n and Nuxt UI
DESCRIPTION: This snippet illustrates how to dynamically set the application's locale using `useI18n` from `vue-i18n` and applying it to the `UApp` component, importing locales from `@nuxt/ui/locale` based on the current `locale` value.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#_snippet_9

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
import { useI18n } from 'vue-i18n'
import * as locales from '@nuxt/ui/locale'

const { locale } = useI18n()
</script>

<template>
  <UApp :locale="locales[locale]">
    <RouterView />
  </UApp>
</template>
```

----------------------------------------

TITLE: Selecting Date Range (Vue)
DESCRIPTION: Shows how to enable date range selection using the `range` prop. When `range` is `true`, the `v-model` expects an object with `start` and `end` properties, representing the selected date range.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<UCalendar v-model="selectedRange" range />

<script setup>
import { ref } from 'vue';

const selectedRange = ref({
  start: new Date(2022, 1, 3),
  end: new Date(2022, 1, 20)
});
<\/script>
```

----------------------------------------

TITLE: Creating New Project with Nuxt UI Vue Starter
DESCRIPTION: This bash command initializes a new project using the `nuxtlabs/nuxt-ui-vue-starter` template, providing a pre-configured Nuxt UI setup for a quick start.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_9

LANGUAGE: bash
CODE:
```
npx nuxi init -t github:nuxtlabs/nuxt-ui-vue-starter <my-app>
```

----------------------------------------

TITLE: Setting Dynamic Locale with Nuxt UI and I18n (Vue)
DESCRIPTION: This snippet demonstrates how to dynamically set the application's locale using the `useI18n` composable from `@nuxtjs/i18n` and locales from `@nuxt/ui/locale`. It imports all available locales and binds the currently active locale from `useI18n` to the `locale` prop of the `UApp` component, enabling dynamic language switching.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#_snippet_9

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
import * as locales from '@nuxt/ui/locale'

const { locale } = useI18n()
</script>

<template>
  <UApp :locale="locales[locale]">
    <NuxtPage />
  </UApp>
</template>
```

----------------------------------------

TITLE: Implementing Color Mode Toggle in Vue
DESCRIPTION: This Vue component demonstrates how to create a button to toggle between light and dark color modes using the `useColorMode` composable from `@nuxtjs/color-mode`. It uses a computed property `isDark` to manage the color mode preference and conditionally renders a `UButton` with appropriate icons. The `ClientOnly` wrapper ensures the button is only rendered on the client side, preventing hydration mismatches.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/6.color-mode/1.nuxt.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup>
const colorMode = useColorMode()

const isDark = computed({
  get() {
    return colorMode.value === 'dark'
  },
  set(_isDark) {
    colorMode.preference = _isDark ? 'dark' : 'light'
  }
})
</script>

<template>
  <ClientOnly v-if="!colorMode?.forced">
    <UButton
      :icon="isDark ? 'i-lucide-moon' : 'i-lucide-sun'"
      color="neutral"
      variant="ghost"
      @click="isDark = !isDark"
    />

    <template #fallback>
      <div class="size-8" />
    </template>
  </ClientOnly>
</template>
```

----------------------------------------

TITLE: Using Select with Array of Objects for Items - Nuxt UI
DESCRIPTION: Illustrates how to use an array of objects for the `items` prop, where each object defines `label` and `value` properties. The `v-model` binds to the `value` property of the selected object.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<template>
  <USelect
    v-model="modelValue"
    :items="items"
    class="w-48"
  />
</template>

<script setup>
import { ref } from 'vue'

const modelValue = ref('backlog')
const items = [
  { label: 'Backlog', value: 'backlog' },
  { label: 'Todo', value: 'todo' },
  { label: 'In Progress', value: 'in_progress' },
  { label: 'Done', value: 'done' }
]
</script>
```

----------------------------------------

TITLE: Extending Nuxt UI Colors (app.config.ts & nuxt.config.ts)
DESCRIPTION: Explains how to add custom dynamic color aliases in a Nuxt project. This involves defining the alias (e.g., 'tertiary') in `app.config.ts` under `ui.colors` and also listing the custom color name in `nuxt.config.ts` under `ui.theme.colors`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_5

LANGUAGE: ts
CODE:
```
export default defineAppConfig({
  ui: {
    colors: {
      tertiary: 'indigo'
    }
  }
})
```

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  ui: {
    theme: {
      colors: [
        'primary',
        'secondary',
        'tertiary',
        'info',
        'success',
        'warning',
        'error'
      ]
    }
  }
})
```

----------------------------------------

TITLE: Declaring Font in CSS for Nuxt UI
DESCRIPTION: This CSS snippet demonstrates how to declare a custom font, 'Public Sans', for the sans-serif font stack within a Nuxt UI project. It imports Tailwind CSS and Nuxt UI, then uses the `@theme` rule to set the `--font-sans` CSS variable, allowing Nuxt Fonts to automatically load and optimize it.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/5.fonts.md#_snippet_0

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui";

@theme {
  --font-sans: 'Public Sans', sans-serif;
}
```

----------------------------------------

TITLE: Importing Main CSS File in main.ts
DESCRIPTION: This TypeScript snippet demonstrates how to import your main CSS file, containing Tailwind CSS and Nuxt UI imports, into your `main.ts` file. This ensures that your application's styles are loaded correctly.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_6

LANGUAGE: typescript
CODE:
```
import './assets/main.css'

import { createApp } from 'vue'
import { createRouter, createWebHistory } from 'vue-router'
import ui from '@nuxt/ui/vue-plugin'
import App from './App.vue'

const app = createApp(App)

const router = createRouter({
  routes: [],
  history: createWebHistory()
})

app.use(router)
app.use(ui)

app.mount('#app')
```

----------------------------------------

TITLE: Configuring Nuxt UI Runtime Colors (app.config.ts)
DESCRIPTION: Demonstrates how to configure the primary and neutral color aliases at runtime in a Nuxt project using the `app.config.ts` file under the `ui.colors` key. This allows dynamic theme customization without requiring an application rebuild.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_2

LANGUAGE: ts
CODE:
```
export default defineAppConfig({
  ui: {
    colors: {
      primary: 'blue',
      neutral: 'zinc'
    }
  }
})
```

----------------------------------------

TITLE: Configuring Nuxt UI Component Unmount Behavior with `unmountOnHide` (YAML)
DESCRIPTION: This snippet illustrates how to configure a Nuxt UI component to prevent its content from being unmounted when hidden by setting `unmountOnHide` to `false`. It also provides a comprehensive example of defining nested `items` for a navigation menu, including labels, icons, descriptions, and routes.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#_snippet_9

LANGUAGE: yaml
CODE:
```
props:
  unmountOnHide: false
  items:
    - label: Guide
      icon: i-lucide-book-open
      to: /getting-started
      children:
        - label: Introduction
          description: Fully styled and customizable components for Nuxt.
          icon: i-lucide-house
        - label: Installation
          description: Learn how to install and configure Nuxt UI in your application.
          icon: i-lucide-cloud-download
        - label: 'Icons'
          icon: 'i-lucide-smile'
          description: 'You have nothing to do, @nuxt/icon will handle it automatically.'
        - label: 'Colors'
          icon: 'i-lucide-swatch-book'
          description: 'Choose a primary and a neutral color from your Tailwind CSS theme.'
        - label: 'Theme'
          icon: 'i-lucide-cog'
          description: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'
    - label: Composables
      icon: i-lucide-database
      to: /composables
      children:
        - label: defineShortcuts
          icon: i-lucide-file-text
          description: Define shortcuts for your application.
          to: /composables/define-shortcuts
        - label: useOverlay
          icon: i-lucide-file-text
          description: Display a modal/slideover within your application.
          to: /composables/use-overlay
        - label: useToast
          icon: i-lucide-file-text
          description: Display a toast within your application.
          to: /composables/use-toast
    - label: Components
      icon: i-lucide-box
      to: /components
      active: true
      children:
        - label: Link
          icon: i-lucide-file-text
          description: Use NuxtLink with superpowers.
          to: /components/link
        - label: Modal
          icon: i-lucide-file-text
          description: Display a modal within your application.
          to: /components/modal
        - label: NavigationMenu
          icon: i-lucide-file-text
          description: Display a list of links.
          to: /components/navigation-menu
        - label: Pagination
          icon: i-lucide-file-text
          description: Display a list of pages.
          to: /components/pagination
        - label: Popover
          icon: i-lucide-file-text
          description: Display a non-modal dialog that floats around a trigger element.
          to: /components/popover
        - label: Progress
          icon: i-lucide-file-text
          description: Show a horizontal bar to indicate task progression.
          to: /components/progress
  class: 'w-full justify-center'
```

----------------------------------------

TITLE: Awaiting Overlay Results with useOverlay (TypeScript)
DESCRIPTION: Demonstrates how `useOverlay` allows awaiting the result of an opened overlay. The `modal.open()` method returns an instance whose `result` property is a promise that resolves when the overlay closes and emits a `close` event with a value. Required dependencies: Nuxt UI's `useOverlay` composable, the overlay component, and potentially `useToast`. Expected input: Options for `modal.open`, the asynchronous context (`async` function), and the overlay component emitting a `close` event with a value.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
<script setup lang="ts">
import { ModalExampleComponent } from '#components'
import { useOverlay } from '#imports'
import { ref } from 'vue'

const overlay = useOverlay()
const toast = useToast()

const modal = overlay.create(ModalExampleComponent)

async function openModal() {
  const instance = modal.open(ModalExampleComponent, {
    count: count.value
  })

  const result = await instance.result

  if (result) {
    toast.add({ title: 'Success!' })
  }
}
</script>
```

----------------------------------------

TITLE: Define Tailwind Theme Variables with @theme CSS Directive
DESCRIPTION: This CSS snippet demonstrates how to use the `@theme static` directive in `app/assets/css/main.css` to define custom design tokens like fonts, breakpoints, and colors using CSS variables. This is the recommended approach in Tailwind CSS v4 for theme customization, equivalent to `theme.extend` in v3. It makes these variables available as Tailwind utilities and variants.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_0

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui";

@theme static {
  --font-sans: 'Public Sans', sans-serif;

  --breakpoint-3xl: 1920px;

  --color-green-50: #EFFDF5;
  --color-green-100: #D9FBE8;
  --color-green-200: #B3F5D1;
  --color-green-300: #75EDAE;
  --color-green-400: #00DC82;
  --color-green-500: #00C16A;
  --color-green-600: #00A155;
  --color-green-700: #007F45;
  --color-green-800: #016538;
  --color-green-900: #0A5331;
  --color-green-950: #052E16;
}
```

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui-pro";

@theme static {
  --font-sans: 'Public Sans', sans-serif;

  --breakpoint-3xl: 1920px;

  --color-green-50: #EFFDF5;
  --color-green-100: #D9FBE8;
  --color-green-200: #B3F5D1;
  --color-green-300: #75EDAE;
  --color-green-400: #00DC82;
  --color-green-500: #00C16A;
  --color-green-600: #00A155;
  --color-green-700: #007F45;
  --color-green-800: #016538;
  --color-green-900: #0A5331;
  --color-green-950: #052E16;
}
```

----------------------------------------

TITLE: Configure Global Button Theme in Nuxt (app.config.ts)
DESCRIPTION: Demonstrates how to apply global theme overrides for Nuxt UI components within a Nuxt project's `app.config.ts`. Specifically shows changing the font weight of the button's base slot. Requires Nuxt and `@nuxt/ui`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_38

LANGUAGE: ts
CODE:
```
export default defineAppConfig({
  ui: {
    button: {
      slots: {
        base: 'font-bold'
      }
    }
  }
})
```

----------------------------------------

TITLE: Setting Default Nuxt UI Border Radius - CSS
DESCRIPTION: Defines the base CSS variable --ui-radius in the :root selector. This variable serves as the foundation for all other radius values used by Nuxt UI components and Tailwind CSS rounded-* utilities.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_25

LANGUAGE: CSS
CODE:
```
:root {
  --ui-radius: 0.25rem;
}
```

----------------------------------------

TITLE: Controlling Slider Value with v-model
DESCRIPTION: Demonstrates how to use the `v-model` directive to bind the Slider's value to a reactive variable, allowing programmatic control and updates.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#_snippet_0

LANGUAGE: html
CODE:
```
<template>
  <USlider v-model="value" />
</template>

<script setup>
const value = ref(50)
</script>
```

----------------------------------------

TITLE: Controlling Progress Value with v-model - Nuxt UI - Vue.js
DESCRIPTION: This snippet demonstrates how to control the current value of the Progress component using the `v-model` directive. The `modelValue` prop is set to `50`, indicating 50% completion.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#_snippet_0

LANGUAGE: Vue.js
CODE:
```
<UProgress v-model="50" />
```

----------------------------------------

TITLE: Initializing useToast Composable in Vue
DESCRIPTION: This snippet demonstrates the basic initialization of the `useToast` composable in a Vue 3 setup script. It imports and assigns the composable's return value to a `toast` constant, making toast notification functions available for use within the component.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-toast.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
const toast = useToast()
</script>
```

----------------------------------------

TITLE: Displaying an Icon with Nuxt UI's Icon Component (Vue)
DESCRIPTION: Demonstrates how to use the `Icon` component in Nuxt UI to display an icon by providing the `name` and `class` props. The `name` prop specifies the icon identifier from the Iconify collection, and `class` applies styling to the icon.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/2.vue.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<Icon name="i-lucide-lightbulb" class="size-5" />
```

----------------------------------------

TITLE: Customizing Nuxt UI Pro Colors in main.css - CSS
DESCRIPTION: Similar to the Nuxt UI example, this snippet shows how to import @nuxt/ui-pro and customize the base --ui-bg and --ui-text CSS variables for light and dark modes. This is used when building applications with Nuxt UI Pro.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_23

LANGUAGE: CSS
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui-pro";

:root {
  --ui-bg: var(--ui-color-neutral-50);
  --ui-text: var(--ui-color-neutral-900);
}

.dark {
  --ui-bg: var(--ui-color-neutral-950);
  --ui-border: var(--ui-color-neutral-900);
}
```

----------------------------------------

TITLE: Providing Data to Nuxt UI Table
DESCRIPTION: Demonstrates how to provide an array of objects to the `data` prop of the Nuxt UI Table component. The table columns are automatically generated based on the keys of the objects.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "data": [
    {
      "id": "4600",
      "date": "2024-03-11T15:30:00",
      "status": "paid",
      "email": "james.anderson@example.com",
      "amount": 594
    },
    {
      "id": "4599",
      "date": "2024-03-11T10:10:00",
      "status": "failed",
      "email": "mia.white@example.com",
      "amount": 276
    },
    {
      "id": "4598",
      "date": "2024-03-11T08:50:00",
      "status": "refunded",
      "email": "william.brown@example.com",
      "amount": 315
    },
    {
      "id": "4597",
      "date": "2024-03-10T19:45:00",
      "status": "paid",
      "email": "emma.davis@example.com",
      "amount": 529
    },
    {
      "id": "4596",
      "date": "2024-03-10T15:55:00",
      "status": "paid",
      "email": "ethan.harris@example.com",
      "amount": 639
    }
  ],
  "class": "flex-1"
}
```

----------------------------------------

TITLE: Configuring Vue (@nuxt/ui) Runtime Colors (vite.config.ts)
DESCRIPTION: Shows how to configure primary and neutral color aliases at runtime in a Vue project using `@nuxt/ui` by adding the configuration to the `ui.colors` key within the `ui` plugin options in `vite.config.ts`. Requires `@vitejs/plugin-vue` and `@nuxt/ui/vite`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_3

LANGUAGE: ts
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui({
      ui: {
        colors: {
          primary: 'blue',
          neutral: 'zinc'
        }
      }
    })
  ]
})
```

----------------------------------------

TITLE: Setting Dynamic Locale with Vue I18n and Nuxt UI Pro
DESCRIPTION: This snippet illustrates how to dynamically set the application's locale using `useI18n` from `vue-i18n` and applying it to the `UApp` component, importing locales from `@nuxt/ui-pro/locale` based on the current `locale` value.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#_snippet_10

LANGUAGE: vue
CODE:
```
<
```

----------------------------------------

TITLE: Installing Vue I18n with npm
DESCRIPTION: This command installs the `vue-i18n` package version 10 using npm, which is a prerequisite for implementing dynamic internationalization in your Vue application.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm install vue-i18n@10
```

----------------------------------------

TITLE: Basic Usage of Modal Component in Vue
DESCRIPTION: Demonstrates the fundamental structure of the Modal component, using a UButton to open it and a Placeholder component for its content. It utilizes the default slot for the trigger and the #content slot for the modal's primary content.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UButton label="Open" color="neutral" variant="subtle" />

<UModal>
  <template #content>
    <Placeholder class="h-48 m-4" />
  </template>
</UModal>
```

----------------------------------------

TITLE: Opening Overlay Instance with Props (Vue)
DESCRIPTION: Shows how to open an existing overlay instance and pass specific props to the component being rendered, overriding any default props set during creation.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-overlay.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const overlay = useOverlay()

const modal = overlay.create(MyModalContent)

function openModal() {
  modal.open({
    title: 'Welcome'
  })
}
```

----------------------------------------

TITLE: Configure Global Button Theme in Vue/Vite (Nuxt UI)
DESCRIPTION: Shows how to apply global theme overrides for Nuxt UI components within a Vue project using Vite and the `@nuxt/ui/vite` plugin. Specifically demonstrates changing the font weight of the button's base slot in `vite.config.ts`. Requires Vue, Vite, and `@nuxt/ui`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_39

LANGUAGE: ts
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui({
      ui: {
        button: {
          slots: {
            base: 'font-bold'
          }
        }
      }
    })
  ]
})
```

----------------------------------------

TITLE: Defining Container Component Theme Base (Tailwind Variants)
DESCRIPTION: Provides the theme definition for the Container component using Tailwind Variants, demonstrating the use of the `base` property for components without multiple distinct slots.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_35

LANGUAGE: ts
CODE:
```
export default {
  base: 'max-w-(--ui-container) mx-auto px-4 sm:px-6 lg:px-8'
}
```

----------------------------------------

TITLE: Configure Global Button Theme in Vue/Vite (Nuxt UI Pro)
DESCRIPTION: Illustrates how to apply global theme overrides for Nuxt UI Pro components within a Vue project using Vite and the `@nuxt/ui-pro/vite` plugin. Specifically demonstrates changing the font weight of the button's base slot in `vite.config.ts`. Requires Vue, Vite, and `@nuxt/ui-pro`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_40

LANGUAGE: ts
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import uiPro from '@nuxt/ui-pro/vite'

export default defineConfig({
  plugins: [
    vue(),
    uiPro({
      ui: {
        button: {
          slots: {
            base: 'font-bold'
          }
        }
      }
    })
  ]
})
```

----------------------------------------

TITLE: Linking FormField to Schema Property (Vue)
DESCRIPTION: Shows how to associate a FormField component with a top-level property defined in the form's validation schema using the `name` prop.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form.md#_snippet_0

LANGUAGE: vue
CODE:
```
<FormField name="email">
```

----------------------------------------

TITLE: Passing Props to Overlay Components (TypeScript)
DESCRIPTION: Explains how to pass props to the component rendered within an overlay created by `useOverlay`. Props are now passed inside a `props` object within the options provided to `overlay.create()`. Required dependencies: Nuxt UI's `useOverlay` composable, the overlay component, and reactive state if props are dynamic. Expected input: An options object for `overlay.create`, containing a nested `props` object with key-value pairs for the component.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_13

LANGUAGE: TypeScript
CODE:
```
<script setup lang="ts">
import { ModalExampleComponent } from '#components'
import { useOverlay } from '#imports'
import { ref } from 'vue'

const overlay = useOverlay()

const count = ref(0)

const modal = overlay.create(ModalExampleComponent, {
  props: {
    count: count.value
  }
})
</script>
```

----------------------------------------

TITLE: Default Fuse.js Options for CommandPalette Search (TypeScript)
DESCRIPTION: This TypeScript snippet shows the default configuration object for `useFuse` within the CommandPalette component. It defines `fuseOptions` for fuzzy searching, including `ignoreLocation`, `threshold`, and `keys` to search within. It also sets a `resultLimit` for the number of results and `matchAllWhenSearchEmpty` to display all items when the search term is empty, providing fine-grained control over the search behavior.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
{
  fuseOptions: {
    ignoreLocation: true,
    threshold: 0.1,
    keys: ['label', 'suffix']
  },
  resultLimit: 12,
  matchAllWhenSearchEmpty: true
}
```

----------------------------------------

TITLE: Configuring VSCode for Tailwind CSS IntelliSense
DESCRIPTION: This JSON snippet provides recommended VSCode settings to enhance the Tailwind CSS IntelliSense experience. It associates `.css` files with `tailwindcss` language mode, enables quick suggestions for strings, and configures class attributes and regex for Tailwind CSS.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  "files.associations": {
    "*.css": "tailwindcss"
  },
  "editor.quickSuggestions": {
    "strings": "on"
  },
  "tailwindCSS.classAttributes": ["class", "ui"],
  "tailwindCSS.experimental.classRegex": [
    ["ui:\\s*{([^)]*)\\s*}", "(?:'|\"|`)([^']*)(?:'|\"|`)"]
  ]
}
```

----------------------------------------

TITLE: Customizing CommandPalette Placeholder Text (YAML)
DESCRIPTION: Shows how to change the default placeholder text of the CommandPalette input field using the `placeholder` prop. This example sets the placeholder to 'Search an app...' and provides a simple list of application items.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#_snippet_2

LANGUAGE: yaml
CODE:
```
autofocus: false
placeholder: 'Search an app...'
groups:
  - id: 'apps'
    items:
      - label: 'Calendar'
        icon: 'i-lucide-calendar'
      - label: 'Music'
        icon: 'i-lucide-music'
      - label: 'Maps'
        icon: 'i-lucide-map'
class: 'flex-1'
```

----------------------------------------

TITLE: Controlling Selected Date with v-model (Vue)
DESCRIPTION: Demonstrates how to use the `v-model` directive to bind the selected date of the `UCalendar` component. The `modelValue` prop is used to set and control the currently selected date, allowing for reactive updates.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UCalendar v-model="selectedDate" />

<script setup>
import { ref } from 'vue';

const selectedDate = ref(new Date(2022, 1, 3));
<\/script>
```

----------------------------------------

TITLE: Adding Icon to Button - Vue
DESCRIPTION: Shows how to integrate an icon into the UButton using the `icon` prop, along with setting its size, color, and variant for a complete visual style.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button.md#_snippet_5

LANGUAGE: Vue
CODE:
```
<UButton icon="i-lucide-rocket" size="md" color="primary" variant="solid">Button</UButton>
```

----------------------------------------

TITLE: Configuring Nuxt I18n Module (TypeScript)
DESCRIPTION: This configuration snippet for `nuxt.config.ts` integrates the `@nuxtjs/i18n` module into a Nuxt application. It defines an array of supported locales with their codes and names, enabling the application to handle multiple languages dynamically.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#_snippet_8

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  modules: [
    '@nuxt/ui',
    '@nuxtjs/i18n'
  ],
  css: ['~/assets/css/main.css'],
  i18n: {
    locales: [{
      code: 'de',
      name: 'Deutsch'
    }, {
      code: 'en',
      name: 'English'
    }, {
      code: 'fr',
      name: 'Français'
    }]
  }
})
```

----------------------------------------

TITLE: Overriding Primary Color for Black & White Theme in Nuxt UI
DESCRIPTION: This CSS snippet, located in `app/assets/css/main.css`, imports Tailwind CSS and Nuxt UI. It overrides the `--ui-primary` CSS variable to set the primary color to black in light mode and white in dark mode, creating a simple black and white theme.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_14

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui";

:root {
  --ui-primary: black;
}

.dark {
  --ui-primary: white;
}
```

----------------------------------------

TITLE: Creating Overlays with useOverlay Composable (TypeScript)
DESCRIPTION: Introduces the new `useOverlay` composable, which replaces `useModal` and `useSlideover`. It demonstrates how to create a specific overlay instance (`modal` in this case) using `overlay.create()` with the component name. Required dependencies: Nuxt UI's `useOverlay` composable and the component to be rendered in the overlay. Expected input: The component to be rendered as the overlay.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_12

LANGUAGE: TypeScript
CODE:
```
<script setup lang="ts">
import { ModalExampleComponent } from '#components'
import { useOverlay } from '#imports'

const overlay = useOverlay()

const modal = overlay.create(ModalExampleComponent)
</script>
```

----------------------------------------

TITLE: Renaming Toast Timeout Prop to Duration (TypeScript)
DESCRIPTION: Shows the change in the `useToast` composable, where the `timeout` option in the `add` method has been renamed to `duration` for clarity and consistency. Required dependencies: Nuxt UI's `useToast` composable. Expected input: An options object for `toast.add`, including a `duration` property (number in ms, or 0 for persistent).
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
<script setup lang="ts">
const toast = useToast()

toast.add({ title: 'Invitation sent', duration: 0 })
</script>
```

----------------------------------------

TITLE: Basic Usage of Nuxt UI Slideover (Vue/HTML)
DESCRIPTION: This snippet demonstrates the fundamental usage of the `USlideover` component. It shows how to place a `UButton` in the default slot to trigger the slideover and how to define the main content using the `#content` slot, which appears when the slideover is open.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<USlideover>
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" />
  </template>
  <template #content>
    <Placeholder class="h-full m-4" />
  </template>
</USlideover>
```

----------------------------------------

TITLE: Accessing UForm Instance with useTemplateRef in Vue
DESCRIPTION: This snippet demonstrates how to use the `useTemplateRef` composition API helper to get a typed reference to a `<UForm>` component instance. This allows you to programmatically access the component's exposed methods (like `submit`, `validate`, `clear`, `getErrors`, `setErrors`) and reactive properties (like `errors`, `disabled`, `dirty`, `dirtyFields`, `touchedFields`, `blurredFields`). It requires the `useTemplateRef` helper to be imported.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
const form = useTemplateRef('form')
</script>

<template>
  <UForm ref="form" />
</template>
```

----------------------------------------

TITLE: Setting Static Locale with Nuxt UI
DESCRIPTION: This snippet demonstrates how to set a static locale for your application using the `locale` prop of the `UApp` component, importing a predefined locale like `fr` from `@nuxt/ui/locale`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
import { fr } from '@nuxt/ui/locale'
</script>

<template>
  <UApp :locale="fr">
    <RouterView />
  </UApp>
</template>
```

----------------------------------------

TITLE: Setting Static Locale with Nuxt UI Pro (Vue)
DESCRIPTION: This snippet demonstrates how to set a static locale for your Nuxt application using the `UApp` component and a pre-defined locale object from `@nuxt/ui-pro/locale`. It imports the `fr` (French) locale and binds it to the `locale` prop of `UApp` to apply global internationalization settings for Nuxt UI Pro.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#_snippet_1

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
import { fr } from '@nuxt/ui-pro/locale'
</script>

<template>
  <UApp :locale="fr">
    <NuxtPage />
  </UApp>
</template>
```

----------------------------------------

TITLE: Configure UTable Sticky Header with Data (YAML)
DESCRIPTION: This YAML configuration demonstrates how to make the UTable component's header sticky using the `sticky` prop and provides sample data to populate the table. It also includes configuration for collapsing the example and applying custom classes.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#_snippet_2

LANGUAGE: yaml
CODE:
```
---
collapse: true
class: '!p-0'
ignore:
  - data
  - class
external:
  - data
props:
  sticky: true
  data:
    - id: '4600'
      date: '2024-03-11T15:30:00'
      status: 'paid'
      email: 'james.anderson@example.com'
      amount: 594
    - id: '4599'
      date: '2024-03-11T10:10:00'
      status: 'failed'
      email: 'mia.white@example.com'
      amount: 276
    - id: '4598'
      date: '2024-03-11T08:50:00'
      status: 'refunded'
      email: 'william.brown@example.com'
      amount: 315
    - id: '4597'
      date: '2024-03-10T19:45:00'
      status: 'paid'
      email: 'emma.davis@example.com'
      amount: 529
    - id: '4596'
      date: '2024-03-10T15:55:00'
      status: 'paid'
      email: 'ethan.harris@example.com'
      amount: 639
    - id: '4595'
      date: '2024-03-10T15:55:00'
      status: 'paid'
      email: 'ethan.harris@example.com'
      amount: 639
    - id: '4594'
      date: '2024-03-10T15:55:00'
      status: 'paid'
      email: 'ethan.harris@example.com'
      amount: 639
class: 'flex-1 max-h-[312px]'
---
```

----------------------------------------

TITLE: Setting InputNumber Placeholder Text
DESCRIPTION: Demonstrates using the placeholder prop to display hint text inside the InputNumber when it is empty.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-number.md#_snippet_5

LANGUAGE: Vue
CODE:
```
<UInputNumber placeholder="Enter a number" />
```

----------------------------------------

TITLE: Customizing Value Key for Select Items - Nuxt UI
DESCRIPTION: Demonstrates how to use the `value-key` prop to specify a different property (e.g., `id` instead of `value`) from the item objects to be used for the `v-model` binding.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#_snippet_4

LANGUAGE: Vue
CODE:
```
<template>
  <USelect
    v-model="modelValue"
    value-key="id"
    :items="items"
    class="w-48"
  />
</template>

<script setup>
import { ref } from 'vue'

const modelValue = ref('backlog')
const items = [
  { label: 'Backlog', id: 'backlog' },
  { label: 'Todo', id: 'todo' },
  { label: 'In Progress', id: 'in_progress' },
  { label: 'Done', id: 'done' }
]
</script>
```

----------------------------------------

TITLE: Installing Nuxt I18n Module (pnpm)
DESCRIPTION: This command installs the `@nuxtjs/i18n` package using pnpm, which is required to enable dynamic language switching and advanced internationalization features in a Nuxt application. It adds the module to the project's dependencies.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#_snippet_4

LANGUAGE: bash
CODE:
```
pnpm add @nuxtjs/i18n
```

----------------------------------------

TITLE: Enabling Fullscreen Modal in Vue
DESCRIPTION: Illustrates how to make the Modal occupy the entire screen by setting the `fullscreen` prop to `true`. This is ideal for displaying large amounts of content or for dedicated workflows. The modal opens with a button and displays content in the body slot.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_7

LANGUAGE: Vue
CODE:
```
<UButton label="Open" color="neutral" variant="subtle" />

<UModal :fullscreen="true" title="Modal fullscreen">
  <template #body>
    <Placeholder class="h-full" />
  </template>
</UModal>
```

----------------------------------------

TITLE: Linking FormField to Nested Schema Property (Vue)
DESCRIPTION: Illustrates how to link a FormField component to a nested property within the validation schema using dot notation in the `name` prop.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form.md#_snippet_2

LANGUAGE: vue
CODE:
```
<FormField name="user.email">
```

----------------------------------------

TITLE: Toggling Color Mode with VueUse in Nuxt UI (Vue)
DESCRIPTION: This snippet demonstrates how to create a button in a Vue component to switch between light and dark color modes using the `useColorMode` composable from VueUse. It shows how to dynamically change the button's icon and update the `mode` reactive variable on click, leveraging Nuxt UI's automatic integration with VueUse.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/6.color-mode/2.vue.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script setup>
import { useColorMode } from '@vueuse/core'

const mode = useColorMode()
</script>

<template>
  <UButton
    :icon="mode === 'dark' ? 'i-lucide-moon' : 'i-lucide-sun'"
    color="neutral"
    variant="ghost"
    @click="mode = mode === 'dark' ? 'light' : 'dark'"
  />
</template>
```

----------------------------------------

TITLE: Defining Nuxt UI Theme Colors
DESCRIPTION: This snippet demonstrates using the `theme.colors` option within `vite.config.ts` to define dynamic color aliases for generating component themes. It shows how to specify a subset of colors like `primary` and `error`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui({
      theme: {
        colors: ['primary', 'error']
      }
    })
  ]
})
```

----------------------------------------

TITLE: Define Nuxt UI Color CSS Variables (Light/Dark)
DESCRIPTION: Defines CSS variables for Nuxt UI color aliases, mapping them to specific shades (500 for light, 400 for dark) to represent the default color in each mode.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_8

LANGUAGE: css
CODE:
```
:root {
  --ui-primary: var(--ui-color-primary-500);
  --ui-secondary: var(--ui-color-secondary-500);
  --ui-success: var(--ui-color-success-500);
  --ui-info: var(--ui-color-info-500);
  --ui-warning: var(--ui-color-warning-500);
  --ui-error: var(--ui-color-error-500);
}
```

LANGUAGE: css
CODE:
```
.dark {
  --ui-primary: var(--ui-color-primary-400);
  --ui-secondary: var(--ui-color-secondary-400);
  --ui-success: var(--ui-color-success-400);
  --ui-info: var(--ui-color-info-400);
  --ui-warning: var(--ui-color-warning-400);
  --ui-error: var(--ui-color-error-400);
}
```

----------------------------------------

TITLE: Installing Vue I18n with yarn
DESCRIPTION: This command installs the `vue-i18n` package version 10 using yarn, which is a prerequisite for implementing dynamic internationalization in your Vue application.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn add vue-i18n@10
```

----------------------------------------

TITLE: Comprehensive useOverlay Example (Vue)
DESCRIPTION: Provides a complete example showcasing the creation of multiple overlay instances (modals and slideovers), opening them with and without prop overrides, and demonstrating how to await a result from one overlay (`modalB`) and pass it as props to another (`slideoverA`).
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-overlay.md#_snippet_3

LANGUAGE: typescript
CODE:
```
const overlay = useOverlay()

// Create with default props
const modalA = overlay.create(ModalA, { title: 'Welcome' })
const modalB = overlay.create(ModalB)

const slideoverA = overlay.create(SlideoverA)

const openModalA = () => {
  // Open  Modal A, but override the title prop
  modalA.open({ title: 'Hello' })
}

const openModalB = async () => {
  // Open modalB, and wait for its result
  const modalBInstance = modalB.open()

  const input = await modalBInstance.result

  // Pass the result from modalB to the slideover, and open it.
  slideoverA.open({ input })
}
```

----------------------------------------

TITLE: Controlling Textarea Value with v-model (Vue)
DESCRIPTION: Demonstrates how to bind the Textarea component's value using the `v-model` directive. The `modelValue` prop is used to control the input's content.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UTextarea v-model="" />
```

----------------------------------------

TITLE: Applying Subtle Variant to Nuxt UI Card
DESCRIPTION: This snippet demonstrates how to use the `variant` prop to change the visual style of the Nuxt UI Card component to 'subtle'. It also shows how to define content for the header, default slot, and footer using placeholder components within the component-code block, illustrating the structure for slot content.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/card.md#_snippet_0

LANGUAGE: HTML
CODE:
```
#header
:placeholder{class="h-8"}

#default
:placeholder{class="h-32"}

#footer
:placeholder{class="h-8"}
```

----------------------------------------

TITLE: Updating an Existing Toast Notification in Vue
DESCRIPTION: This snippet illustrates how to update an already displayed toast notification using the `update` method. It requires the unique `id` of the toast to be updated and a partial `Toast` object containing the properties to modify. This allows for dynamic changes to toast content or appearance.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-toast.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
const toast = useToast()

function updateToast(id: string | number) {
  toast.update(id, {
    title: 'Updated Toast',
    description: 'This toast has been updated.'
  })
}
</script>
```

----------------------------------------

TITLE: Indicating Required Field Nuxt FormField Vue Template
DESCRIPTION: Shows how to mark a `FormField` as required using the `required` prop. This typically adds a visual indicator, like an asterisk, next to the label. It wraps a `UInput` element.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#_snippet_1

LANGUAGE: Vue Template
CODE:
```
<UInput placeholder="Enter your email" />
```

----------------------------------------

TITLE: Disabling Dismissal for Nuxt UI Slideover (Vue/Nuxt.js)
DESCRIPTION: This snippet demonstrates how to configure a Nuxt UI Slideover component to prevent it from being dismissed by clicking outside or pressing the escape key. It sets the `dismissible` prop to `false` and defines content for the default and body slots, including a button to open the slideover and a placeholder for its main content.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_8

LANGUAGE: Vue
CODE:
```
<USlideover :dismissible="false" title="Slideover non-dismissible">
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" />
  </template>
  <template #body>
    <Placeholder class="h-full" />
  </template>
</USlideover>
```

----------------------------------------

TITLE: Installing Nuxt UI with pnpm
DESCRIPTION: This command installs the Nuxt UI package using the pnpm package manager. It adds `@nuxt/ui` as a dependency to your project, making its components and utilities available for use.
SOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pnpm add @nuxt/ui
```

----------------------------------------

TITLE: Installing Nuxt UI with yarn
DESCRIPTION: This command installs the Nuxt UI package using the yarn package manager. It adds `@nuxt/ui` as a dependency to your project, making its components and utilities available for use.
SOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn add @nuxt/ui
```

----------------------------------------

TITLE: Configuring Nuxt UI NavigationMenu with Popover and Items (YAML)
DESCRIPTION: This snippet demonstrates how to configure a `NavigationMenu` component in Nuxt UI, specifically enabling popovers for vertical, collapsed menus and defining a complex structure of navigation items. It shows how to apply popover settings globally and override them per item, such as setting `mode: 'click'` for the 'Composables' section. The `items` array defines nested navigation links with labels, icons, descriptions, and routing information, including external links and tooltips.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#_snippet_11

LANGUAGE: YAML
CODE:
```
collapse: true
ignore:
  - items
  - orientation
  - class
external:
  - items
externalTypes:
  - NavigationMenuItem[][]
items:
  popover:
    - true
    - false
props:
  popover: true
  collapsed: true
  orientation: 'vertical'
  items:
    - - label: Links
        type: 'label'
      - label: Guide
        icon: i-lucide-book-open
        children:
          - label: Introduction
            description: Fully styled and customizable components for Nuxt.
            icon: i-lucide-house
          - label: Installation
            description: Learn how to install and configure Nuxt UI in your application.
            icon: i-lucide-cloud-download
          - label: 'Icons'
            icon: 'i-lucide-smile'
            description: 'You have nothing to do, @nuxt/icon will handle it automatically.'
          - label: 'Colors'
            icon: 'i-lucide-swatch-book'
            description: 'Choose a primary and a neutral color from your Tailwind CSS theme.'
          - label: 'Theme'
            icon: 'i-lucide-cog'
            description: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'
      - label: Composables
        icon: i-lucide-database
        popover:
          mode: 'click'
        children:
          - label: defineShortcuts
            icon: i-lucide-file-text
            description: Define shortcuts for your application.
            to: /composables/define-shortcuts
          - label: useOverlay
            icon: i-lucide-file-text
            description: Display a modal/slideover within your application.
            to: /composables/use-overlay
          - label: useToast
            icon: i-lucide-file-text
            description: Display a toast within your application.
            to: /composables/use-toast
      - label: Components
        icon: i-lucide-box
        to: /components
        active: true
        children:
          - label: Link
            icon: i-lucide-file-text
            description: Use NuxtLink with superpowers.
            to: /components/link
          - label: Modal
            icon: i-lucide-file-text
            description: Display a modal within your application.
            to: /components/modal
          - label: NavigationMenu
            icon: i-lucide-file-text
            description: Display a list of links.
            to: /components/navigation-menu
          - label: Pagination
            icon: i-lucide-file-text
            description: Display a list of pages.
            to: /components/pagination
          - label: Popover
            icon: i-lucide-file-text
            description: Display a non-modal dialog that floats around a trigger element.
            to: /components/popover
          - label: Progress
            icon: i-lucide-file-text
            description: Show a horizontal bar to indicate task progression.
            to: /components/progress
    - - label: GitHub
        icon: i-simple-icons-github
        badge: 3.8k
        to: https://github.com/nuxt/ui
        target: _blank
        tooltip:
          text: 'Open on GitHub'
          kbds:
            - 3.8k
      - label: Help
        icon: i-lucide-circle-help
        disabled: true
```

----------------------------------------

TITLE: Using CheckboxGroup with String Items (Vue)
DESCRIPTION: Demonstrates how to use the CheckboxGroup component with an array of strings for the `items` prop and bind its value using `v-model`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup>
const modelValue = ref(['System'])
const items = ['System', 'Light', 'Dark']
</script>

<template>
  <UCheckboxGroup v-model="modelValue" :items="items" />
</template>
```

----------------------------------------

TITLE: Basic Nuxt UI Drawer Usage
DESCRIPTION: This snippet demonstrates the fundamental structure of the Nuxt UI Drawer component. It shows how to use the default slot to place a trigger button and the #content slot to define the main content displayed when the drawer is open.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/drawer.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<template>
  <UDrawer>
    <template #default>
      <UButton label="Open" color="neutral" variant="subtle" trailing-icon="i-lucide-chevron-up" />
    </template>
    <template #content>
      <Placeholder class="h-48 m-4" />
    </template>
  </UDrawer>
</template>
```

----------------------------------------

TITLE: Using Select with Array of Strings for Items - Nuxt UI
DESCRIPTION: Demonstrates how to populate the `USelect` component with a simple array of strings for its `items` prop. The `v-model` directive controls the currently selected value.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<template>
  <USelect
    v-model="modelValue"
    :items="items"
    class="w-48"
  />
</template>

<script setup>
import { ref } from 'vue'

const modelValue = ref('Backlog')
const items = ['Backlog', 'Todo', 'In Progress', 'Done']
</script>
```

----------------------------------------

TITLE: Accessing UTable Instance with useTemplateRef (Vue)
DESCRIPTION: Demonstrates how to access the typed component instance of the UTable component using the useTemplateRef composition API helper in Vue 3 setup script. This allows interaction with the component's exposed properties and methods.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#_snippet_3

LANGUAGE: vue
CODE:
```
<script setup lang="ts">\nconst table = useTemplateRef('table')\n<\/script>\n\n<template>\n  <UTable ref="table" \/>\n<\/template>
```

----------------------------------------

TITLE: Setting Dynamic Locale with Nuxt UI Pro and I18n (Vue)
DESCRIPTION: This snippet demonstrates how to dynamically set the application's locale using the `useI18n` composable from `@nuxtjs/i18n` and locales from `@nuxt/ui-pro/locale`. It imports all available locales and binds the currently active locale from `useI18n` to the `locale` prop of the `UApp` component, enabling dynamic language switching for Nuxt UI Pro.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#_snippet_10

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
import * as locales from '@nuxt/ui-pro/locale'

const { locale } = useI18n()
</script>

<template>
  <UApp :locale="locales[locale]">
    <NuxtPage />
  </UApp>
</template>
```

----------------------------------------

TITLE: Specify Tailwind Source Files with @source CSS Directive
DESCRIPTION: This CSS snippet shows how to use the `@source` directive in `app/assets/css/main.css` to add directories like `../../../content` or `../../content` to Tailwind's content detection path. This ensures that Tailwind finds and includes utility classes used in files not automatically scanned, such as markdown files in a `@nuxt/content` setup.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_1

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui";

@source "../../../content";
/* Use this if you're not using compatibilityVersion: 4: https://nuxt.com/docs/getting-started/upgrade#opting-in-to-nuxt-4 */
@source "../../content";
```

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui-pro";

@source "../../../content";
/* Use this if you're not using compatibilityVersion: 4: https://nuxt.com/docs/getting-started/upgrade#opting-in-to-nuxt-4 */
@source "../../content";
```

----------------------------------------

TITLE: Configuring Nuxt UI Component Prefix
DESCRIPTION: This snippet demonstrates how to customize the prefix for Nuxt UI components within your `nuxt.config.ts`. By default, components are prefixed with `U`, but this option allows you to change it, for example, to `Nuxt`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#_snippet_7

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  modules: ['@nuxt/ui'],
  css: ['~/assets/css/main.css'],
  ui: {
    prefix: 'Nuxt'
  }
})
```

----------------------------------------

TITLE: Structuring SelectMenu Items with Labels and Separators (Nuxt UI)
DESCRIPTION: This snippet illustrates how to structure items within the Nuxt UI SelectMenu using `type: 'label'` for section headings and `type: 'separator'` for visual dividers. This enhances readability and organization of long lists of options.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
{
  modelValue: 'Apple',
  items: [
    { type: 'label', label: 'Fruits' },
    'Apple',
    'Banana',
    'Blueberry',
    'Grapes',
    'Pineapple',
    { type: 'separator' },
    { type: 'label', label: 'Vegetables' },
    'Aubergine',
    'Broccoli',
    'Carrot',
    'Courgette',
    'Leek'
  ],
  class: 'w-48'
}
```

----------------------------------------

TITLE: Configuring Drawer Wrapper in Nuxt
DESCRIPTION: Shows how to configure the `data-vaul-drawer-wrapper` directive globally in `nuxt.config.ts` by adding it to `app.rootAttrs`. This ensures the directive is applied to the root HTML element, enabling proper Drawer functionality.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/drawer.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
export default defineNuxtConfig({
  app: {
    rootAttrs: {
      'data-vaul-drawer-wrapper': '',
      'class': 'bg-default'
    }
  }
})
```

----------------------------------------

TITLE: Defining Nested Zod Schema (TypeScript)
DESCRIPTION: Demonstrates defining a nested object structure within a Zod validation schema, where `user` is an object containing an `email` string.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form.md#_snippet_1

LANGUAGE: ts
CODE:
```
{ user: z.object({ email: z.string() }) }
```

----------------------------------------

TITLE: Displaying Error Message Nuxt FormField Vue Template
DESCRIPTION: Demonstrates setting an error message explicitly using the `error` prop. This message is displayed below the form control, often styling the input field red. It wraps a full-width `UInput`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#_snippet_5

LANGUAGE: Vue Template
CODE:
```
<UInput placeholder="Enter your email" class="w-full" />
```

----------------------------------------

TITLE: Configuring Nuxt UI Vite Plugin in vite.config.ts
DESCRIPTION: This TypeScript snippet shows how to integrate the Nuxt UI Vite plugin into your `vite.config.ts` file. It enables Nuxt UI's build-time functionalities within your Vue project.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui()
  ]
})
```

----------------------------------------

TITLE: Configuring Nuxt UI Vite Plugin for Vue
DESCRIPTION: This TypeScript snippet configures the Nuxt UI Vite plugin in your `vite.config.ts` file for a Vue project. It imports `ui` from `@nuxt/ui/vite` and adds it to the Vite plugins array, enabling Nuxt UI's build-time optimizations and features for Vue applications.
SOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_6

LANGUAGE: ts
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui()
  ]
})
```

----------------------------------------

TITLE: Using Tabs with Items and Content (Vue)
DESCRIPTION: Demonstrates how to configure the UTabs component by providing an array of items, each with a label, icon, and content. Also sets a CSS class for styling.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tabs.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UTabs
  :items="[
    { label: 'Account', icon: 'i-lucide-user', content: 'This is the account content.' },
    { label: 'Password', icon: 'i-lucide-lock', content: 'This is the password content.' }
  ]"
  class="w-full"
/>
```

----------------------------------------

TITLE: Using RadioGroup with Array of Objects
DESCRIPTION: Shows how to configure the `RadioGroup` using an array of objects for the `items` prop. Each object includes `label`, `description`, and `value` properties. The `modelValue` is set to 'system'.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_1

LANGUAGE: yaml
CODE:
```
modelValue: 'system'
items:
  - label: 'System'
    description: 'This is the first option.'
    value: 'system'
  - label: 'Light'
    description: 'This is the second option.'
    value: 'light'
  - label: 'Dark'
    description: 'This is the third option.'
    value: 'dark'
```

----------------------------------------

TITLE: Customizing Close Icon and Groups in CommandPalette (Nuxt.js/Vue.js)
DESCRIPTION: This snippet demonstrates how to customize the `close-icon` prop of the CommandPalette component to change its appearance and how to define custom `groups` and `items` for the palette. It sets `autofocus` to false and enables the `close` button, providing a structured way to populate the command palette with predefined actions or categories.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
{
  autofocus: false,
  close: true,
  closeIcon: 'i-lucide-arrow-right',
  groups: [
    {
      id: 'apps',
      items: [
        { label: 'Calendar', icon: 'i-lucide-calendar' },
        { label: 'Music', icon: 'i-lucide-music' },
        { label: 'Maps', icon: 'i-lucide-map' }
      ]
    }
  ],
  class: 'flex-1'
}
```

----------------------------------------

TITLE: Configuring Nuxt UI Options in Vite
DESCRIPTION: This snippet demonstrates how to use the `ui` option within `vite.config.ts` to provide global configuration for Nuxt UI. It shows an example of customizing the `primary` and `neutral` colors for the UI components.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_12

LANGUAGE: TypeScript
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui({
      ui: {
        colors: {
          primary: 'green',
          neutral: 'slate'
        }
      }
    })
  ]
})
```

----------------------------------------

TITLE: Extending Vue (@nuxt/ui-pro) Colors (vite.config.ts)
DESCRIPTION: Illustrates how to add custom dynamic color aliases in a Vue project using `@nuxt/ui-pro`. The custom alias (e.g., 'tertiary') is defined in `vite.config.ts` under `ui.colors` within the `uiPro` plugin options, and the color name is also listed under `theme.colors` in the same plugin options.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_7

LANGUAGE: ts
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import uiPro from '@nuxt/ui-pro/vite'

export default defineConfig({
  plugins: [
    vue(),
    uiPro({
      ui: {
        colors: {
          tertiary: 'indigo'
        }
      },
      theme: {
        colors: [
          'primary',
          'secondary',
          'tertiary',
          'info',
          'success',
          'warning',
          'error'
        ]
      }
    })
  ]
})
```

----------------------------------------

TITLE: Defining Basic Shortcut - Vue/TypeScript
DESCRIPTION: This snippet demonstrates the basic usage of `defineShortcuts` to define a single keyboard shortcut. It maps the `meta_k` key combination to a handler function that toggles the value of a reactive reference (`open.value`). `meta` is automatically converted to `ctrl` on non-macOS platforms.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/define-shortcuts.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
const open = ref(false)

defineShortcuts({
  meta_k: () => {
    open.value = !open.value
  }
})
</script>
```

----------------------------------------

TITLE: Removing a Specific Toast Notification in Vue
DESCRIPTION: This example demonstrates how to remove a specific toast notification from the display using the `remove` method. It takes the unique `id` of the toast as a parameter, allowing for targeted removal of individual notifications.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-toast.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
const toast = useToast()

function removeToast(id: string | number) {
  toast.remove(id)
}
</script>
```

----------------------------------------

TITLE: Adding a Toast Notification in Vue
DESCRIPTION: This example shows how to add a new toast notification using the `add` method of the `useToast` composable. It accepts a partial `Toast` object, allowing customization of properties like title, description, and color. The method returns the complete `Toast` object that was added.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-toast.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
const toast = useToast()

function showToast() {
  toast.add({
    title: 'Success',
    description: 'Your action was completed successfully.',
    color: 'success'
  })
}
</script>
```

----------------------------------------

TITLE: Setting Label Nuxt FormField Vue Template
DESCRIPTION: Demonstrates how to use the `FormField` component to wrap a `UInput` and set its label using the `label` prop. The label text "Email" is associated with the input field.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#_snippet_0

LANGUAGE: Vue Template
CODE:
```
<UInput placeholder="Enter your email" />
```

----------------------------------------

TITLE: Displaying an Icon with UIcon Component in Vue
DESCRIPTION: This snippet demonstrates how to display an icon using the `UIcon` component in a Vue template. The `name` prop specifies the icon to display (e.g., from Iconify), and the `class` prop applies styling such as size.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/1.nuxt.md#_snippet_0

LANGUAGE: vue
CODE:
```
<UIcon name="i-lucide-lightbulb" class="size-5" />
```

----------------------------------------

TITLE: Disabling Accordion or Specific Items in Nuxt UI
DESCRIPTION: Shows how to disable the entire Accordion component using the `disabled` prop, or disable individual items by adding the `disabled: true` property to the item object within the `items` array.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/accordion.md#_snippet_4

LANGUAGE: json
CODE:
```
{
  "class": "px-4",
  "disabled": true,
  "items": [
    {
      "label": "Icons",
      "icon": "i-lucide-smile",
      "content": "You have nothing to do, @nuxt/icon will handle it automatically."
    },
    {
      "label": "Colors",
      "icon": "i-lucide-swatch-book",
      "content": "Choose a primary and a neutral color from your Tailwind CSS theme.",
      "disabled": true
    },
    {
      "label": "Components",
      "icon": "i-lucide-box",
      "content": "You can customize components by using the `class` / `ui` props or in your app.config.ts."
    }
  ]
}
```

----------------------------------------

TITLE: Apply Nuxt UI Color Classes in Vue Template
DESCRIPTION: Demonstrates how to use the generated Tailwind CSS classes (e.g., `text-primary`) to apply Nuxt UI color aliases to text elements within a Vue template.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_9

LANGUAGE: vue
CODE:
```
<template>
  <span class="text-primary">Primary</span>
  <span class="text-secondary">Secondary</span>
  <span class="text-success">Success</span>
  <span class="text-info">Info</span>
  <span class="text-warning">Warning</span>
  <span class="text-error">Error</span>
</template>
```

----------------------------------------

TITLE: Enabling Multiple Selections in Select - Nuxt UI
DESCRIPTION: Explains how to enable multiple item selections using the `multiple` prop. The `v-model` should be bound to an array to store the selected values.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#_snippet_5

LANGUAGE: Vue
CODE:
```
<template>
  <USelect
    v-model="modelValue"
    :items="items"
    :multiple="true"
    class="w-48"
  />
</template>

<script setup>
import { ref } from 'vue'

const modelValue = ref(['Backlog', 'Todo'])
const items = ['Backlog', 'Todo', 'In Progress', 'Done']
</script>
```

----------------------------------------

TITLE: Configuring VSCode Settings for Tailwind CSS IntelliSense
DESCRIPTION: This JSON snippet provides recommended VSCode settings to enhance Tailwind CSS IntelliSense support when working with Nuxt UI. It improves auto-completion and linting for Tailwind classes.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_7

LANGUAGE: json
CODE:
```
{
  "files.associations": {
    "*.css": "tailwindcss"
  },
  "editor.quickSuggestions": {
    "strings": "on"
  },
  "tailwindCSS.classAttributes": ["class", "ui"],
  "tailwindCSS.experimental.classRegex": [
    ["ui:\\s*{([^)]*)\\s*}", "(?:'|\"|`)([^']*)(?:'|\"|`)"]
  ]
}
```

----------------------------------------

TITLE: Configuring Nuxt to Use Main CSS File - TypeScript
DESCRIPTION: Update your `nuxt.config.ts` file to include the newly created `main.css` file in the `css` array. This ensures Nuxt processes the CSS file during the build process.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_1

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  css: ['~/assets/css/main.css']
})
```

----------------------------------------

TITLE: Binding InputMenu Value by Key - Vue
DESCRIPTION: This snippet demonstrates using the `value-key` prop to bind the `InputMenu`'s `v-model` to a specific property (`id`) of the item objects, rather than the entire object. The `modelValue` is 'todo', corresponding to the `id` of one of the items. This is useful when the displayed label differs from the actual value to be stored or processed.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#_snippet_5

LANGUAGE: Vue
CODE:
```
<InputMenu :model-value="'todo'" value-key="id" :items="[{ label: 'Backlog', id: 'backlog' }, { label: 'Todo', id: 'todo' }, { label: 'In Progress', id: 'in_progress' }, { label: 'Done', id: 'done' }]" />
```

----------------------------------------

TITLE: Defining Shortcuts with Input Focus - Vue/TypeScript
DESCRIPTION: This snippet demonstrates how to use the `usingInput` option within the shortcut configuration object. It shows defining a shortcut (`enter`) that only triggers when the input named `queryInput` is focused, and another (`escape`) that triggers whenever *any* input is focused.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/define-shortcuts.md#_snippet_2

LANGUAGE: vue
CODE:
```
<template>
  <UInput v-model="query" name="queryInput" />
</template>

<script setup lang="ts">
const query = ref('')

defineShortcuts({
  enter: {
    usingInput: 'queryInput',
    handler: () => performSearch()
  },
  escape: {
    usingInput: true,
    handler: () => clearSearch()
  }
})
</script>
```

----------------------------------------

TITLE: Changing Button Variant - Vue
DESCRIPTION: Demonstrates how to change the visual style of the UButton using the `variant` prop, applying an 'outline' style with a 'neutral' color.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<UButton color="neutral" variant="outline">Button</UButton>
```

----------------------------------------

TITLE: Setting an Icon on a Nuxt UI Button Component (Vue)
DESCRIPTION: Illustrates how to add an icon to a Nuxt UI `Button` component using the `icon` prop. The `icon` prop takes an Iconify identifier, and other props like `variant` and slots define the button's appearance and content.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/2.vue.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<Button icon="i-lucide-sun" variant="subtle">Button</Button>
```

----------------------------------------

TITLE: Configuring Custom Icon Collections in Nuxt
DESCRIPTION: This TypeScript snippet demonstrates how to configure a custom local icon collection in your `nuxt.config.ts` file. It adds an entry to `icon.customCollections`, specifying a `prefix` for the icons and the `dir` where your SVG files are located.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/1.nuxt.md#_snippet_4

LANGUAGE: typescript
CODE:
```
export default defineNuxtConfig({
  modules: ['@nuxt/ui'],
  css: ['~/assets/css/main.css'],
  icon: {
    customCollections: [{
      prefix: 'custom',
      dir: './assets/icons'
    }]
  }
})
```

----------------------------------------

TITLE: Enabling Autoresize for Textarea (Vue)
DESCRIPTION: Shows how to enable automatic height adjustment for the Textarea component using the `autoresize` prop. The Textarea will expand vertically to fit its content.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<UTextarea :model-value="'This is a long text that will autoresize the height of the Textarea.'" autoresize />
```

----------------------------------------

TITLE: Configuring Vue (@nuxt/ui-pro) Runtime Colors (vite.config.ts)
DESCRIPTION: Illustrates how to configure primary and neutral color aliases at runtime in a Vue project using `@nuxt/ui-pro` by adding the configuration to the `ui.colors` key within the `uiPro` plugin options in `vite.config.ts`. Requires `@vitejs/plugin-vue` and `@nuxt/ui-pro/vite`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_4

LANGUAGE: ts
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import uiPro from '@nuxt/ui-pro/vite'

export default defineConfig({
  plugins: [
    vue(),
    uiPro({
      ui: {
        colors: {
          primary: 'blue',
          neutral: 'zinc'
        }
      }
    })
  ]
})
```

----------------------------------------

TITLE: Creating and Opening a Modal with useOverlay (Vue)
DESCRIPTION: Demonstrates the basic usage of the `useOverlay` composable to create a modal instance and then programmatically open it using the instance's `open` method.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-overlay.md#_snippet_0

LANGUAGE: typescript
CODE:
```
const overlay = useOverlay()

const modal = overlay.create(MyModal)

async function openModal() {
  modal.open()
}
```

----------------------------------------

TITLE: Extending Vue (@nuxt/ui) Colors (vite.config.ts)
DESCRIPTION: Shows how to add custom dynamic color aliases in a Vue project using `@nuxt/ui`. The custom alias (e.g., 'tertiary') is defined in `vite.config.ts` under `ui.colors` within the `ui` plugin options, and the color name is also listed under `theme.colors` in the same plugin options.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_6

LANGUAGE: ts
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui({
      ui: {
        colors: {
          tertiary: 'indigo'
        }
      },
      theme: {
        colors: [
          'primary',
          'secondary',
          'tertiary',
          'info',
          'success',
          'warning',
          'error'
        ]
      }
    })
  ]
})
```

----------------------------------------

TITLE: Using Icons in Nuxt UI Button Component
DESCRIPTION: This example shows how to integrate an icon directly into a Nuxt UI `UButton` component using its `icon` prop. The `variant` prop sets the button's visual style, and the default slot provides the button's text label.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/1.nuxt.md#_snippet_1

LANGUAGE: vue
CODE:
```
<UButton icon="i-lucide-sun" variant="subtle">Button</UButton>
```

----------------------------------------

TITLE: Overriding Link Component Styles
DESCRIPTION: Shows how to disable default styling with the `raw` prop and apply custom `activeClass` and `inactiveClass` for granular control over the link's appearance. This allows developers to integrate the component seamlessly with their custom CSS frameworks.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/link.md#_snippet_2

LANGUAGE: YAML
CODE:
```
props:
  raw: true
  to: /components/link
  activeClass: 'font-bold'
  inactiveClass: 'text-muted'
slots:
  default: Link
```

----------------------------------------

TITLE: Using CheckboxGroup with Custom Value Key (Vue)
DESCRIPTION: Illustrates how to use the `value-key` prop to specify a different property (e.g., 'id') on item objects to be used for the component's value.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<script setup>
const modelValue = ref(['light'])
const items = [
  { label: 'System', description: 'This is the first option.', id: 'system' },
  { label: 'Light', description: 'This is the second option.', id: 'light' },
  { label: 'Dark', description: 'This is the third option.', id: 'dark' }
]
</script>

<template>
  <UCheckboxGroup v-model="modelValue" value-key="id" :items="items" />
</template>
```

----------------------------------------

TITLE: Importing Nuxt UI Pro Styles in Main CSS File - CSS
DESCRIPTION: If using Nuxt UI Pro, add this import statement in your `main.css` file to include the core Nuxt UI Pro styles instead of `@nuxt/ui`. This applies the base styles for the UI Pro components.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_3

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui-pro";
```

----------------------------------------

TITLE: Creating Indeterminate Progress Bar - Nuxt UI - Vue.js
DESCRIPTION: This snippet shows how to make the Progress component indeterminate, indicating an ongoing task without a specific completion percentage. This is achieved by setting `modelValue` to `null`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#_snippet_4

LANGUAGE: Vue.js
CODE:
```
<UProgress :model-value="null" />
```

----------------------------------------

TITLE: Adding a Label to Checkbox (Vue)
DESCRIPTION: Explains how to associate a text label with the Checkbox component using the `label` prop. This provides descriptive text next to the checkbox for user clarity.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_4

LANGUAGE: Vue
CODE:
```
<UCheckbox label="Check me" />
```

----------------------------------------

TITLE: Controlling Content Unmounting in Nuxt UI Collapsible
DESCRIPTION: Illustrates the use of the `unmount-on-hide` prop set to `false` to prevent the collapsible content from being removed from the DOM when collapsed. This ensures the content remains rendered, only its visibility is toggled.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/collapsible.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UCollapsible :unmount-on-hide="false" class="flex flex-col gap-2 w-48">
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" trailing-icon="i-lucide-chevron-down" block />
  </template>
  <template #content>
    <Placeholder class="h-48" />
  </template>
</UCollapsible>
```

----------------------------------------

TITLE: Disabling Nuxt UI Pagination Controls (Vue)
DESCRIPTION: This snippet shows how to use the `disabled` prop to completely disable all interaction with the pagination controls, preventing users from changing pages.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#_snippet_10

LANGUAGE: Vue
CODE:
```
<UPagination :page="5" :total="100" :disabled="true" />
```

----------------------------------------

TITLE: Using Default and #content Slots for Overlays (Vue Template)
DESCRIPTION: Describes the new slot structure for components like `UModal`, where the default slot is used for the trigger element and the main content goes into the `#content` slot. This method eliminates the need for `v-model:open` for simple trigger/content setups. Required dependencies: A Nuxt UI overlay component (e.g., `UModal`) and a trigger element (e.g., `UButton`). Expected input: A trigger element in the default slot and content within the `#content` slot template.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_9

LANGUAGE: Vue Template
CODE:
```
<template>
  <UModal>
    <UButton label="Open" />

    <template #content>
      <div class="p-4">
        <Placeholder class="h-48" />
      </div>
    </template>
  </UModal>
</template>
```

----------------------------------------

TITLE: Disabling the Tooltip with `disabled` Prop (HTML/Vue)
DESCRIPTION: Shows how to disable the Tooltip component, preventing it from appearing on hover, by setting the `disabled` prop to `true`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tooltip.md#_snippet_5

LANGUAGE: HTML
CODE:
```
<UTooltip :disabled="true" text="Open on GitHub">
  <UButton label="Open" color="neutral" variant="subtle" />
</UTooltip>
```

----------------------------------------

TITLE: Disabling InputNumber
DESCRIPTION: Demonstrates how to disable the InputNumber component using the disabled prop, preventing user interaction and input.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-number.md#_snippet_9

LANGUAGE: Vue
CODE:
```
<UInputNumber v-model="modelValue" :disabled="true" />
```

----------------------------------------

TITLE: Disabling CommandPalette Interaction (YAML)
DESCRIPTION: Demonstrates how to disable the CommandPalette component, preventing user interaction, by setting the `disabled` prop to `true`. This renders the component unresponsive to input.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#_snippet_6

LANGUAGE: yaml
CODE:
```
autofocus: false
disabled: true
groups:
  - id: 'apps'
    items:
      - label: 'Calendar'
        icon: 'i-lucide-calendar'
      - label: 'Music'
        icon: 'i-lucide-music'
      - label: 'Maps'
        icon: 'i-lucide-map'
class: 'flex-1'
```

----------------------------------------

TITLE: Controlling Visibility with v-model:open (Vue Template)
DESCRIPTION: Shows how to control the visibility of overlay components like `UModal` using the `v-model:open` directive or the `default-open` prop, replacing the older `v-model` or manual control methods. Required dependencies: A Nuxt UI overlay component (e.g., `UModal`). Expected input: A boolean reactive variable.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_8

LANGUAGE: Vue Template
CODE:
```
<template>
  <UModal v-model:open="open" />
</template>
```

----------------------------------------

TITLE: Starting Development Server for Nuxt UI Vue Project
DESCRIPTION: These bash commands navigate into the newly created project directory and start the development server, allowing you to run and test your Nuxt UI Vue application.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_10

LANGUAGE: bash
CODE:
```
cd <my-app>
npm run dev
```

----------------------------------------

TITLE: Installing Vue I18n with bun
DESCRIPTION: This command installs the `vue-i18n` package version 10 using bun, which is a prerequisite for implementing dynamic internationalization in your Vue application.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#_snippet_7

LANGUAGE: bash
CODE:
```
bun add vue-i18n@10
```

----------------------------------------

TITLE: Basic Usage with Items - Nuxt UI Tree - Vue HTML
DESCRIPTION: Demonstrates the basic usage of the UTree component by providing a hierarchical structure of items using the `items` prop. Includes a class for width.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tree.md#_snippet_0

LANGUAGE: vue-html
CODE:
```
<UTree :items="items" class="w-60" />
```

----------------------------------------

TITLE: Installing Iconify Dataset Locally
DESCRIPTION: These commands illustrate how to install specific Iconify icon collections locally using different package managers (pnpm, yarn, npm). Installing collections locally improves performance and reliability by serving icons from your server or serverless functions, benefiting both SSR and client-side rendering.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/1.nuxt.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm i @iconify-json/{collection_name}
```

LANGUAGE: bash
CODE:
```
yarn add @iconify-json/{collection_name}
```

LANGUAGE: bash
CODE:
```
npm install @iconify-json/{collection_name}
```

----------------------------------------

TITLE: Defining Custom Locale with Nuxt UI Pro
DESCRIPTION: This snippet shows how to create a custom locale using `defineLocale` from `@nuxt/ui/composables/defineLocale.js`, specifying its name, code, direction, and messages, then applying it to the `UApp` component.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#_snippet_3

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
import type { Messages } from '@nuxt/ui-pro'
import { defineLocale } from '@nuxt/ui/composables/defineLocale.js'

const locale = defineLocale<Messages>({
  name: 'My custom locale',
  code: 'en',
  dir: 'ltr',
  messages: {
    // implement pairs
  }
})
</script>

<template>
  <UApp :locale="locale">
    <RouterView />
  </UApp>
</template>
```

----------------------------------------

TITLE: Customizing Nuxt UI Base Radius in main.css - CSS
DESCRIPTION: Shows how to override the default --ui-radius CSS variable in your main.css file when using Nuxt UI. Setting this variable changes the base value from which all other radius utility classes (rounded-*) are derived.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_28

LANGUAGE: CSS
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui";

:root {
  --ui-radius: 0.5rem;
}
```

----------------------------------------

TITLE: Customizing Popover Content Position and Alignment (Vue/HTML)
DESCRIPTION: Shows how to use the `content` prop to customize the rendering of the Popover's content. This example sets the content to `align: center` and `side: bottom` with an `offset: 8`, controlling its precise positioning relative to the trigger element.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/popover.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<UPopover :content="{ align: 'center', side: 'bottom', sideOffset: 8 }">
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" />
  </template>
  <template #content>
    <Placeholder class="size-48 m-4 inline-flex" />
  </template>
</UPopover>
```

----------------------------------------

TITLE: Masking PinInput Value in Vue
DESCRIPTION: This snippet shows how to enable input masking for the UPinInput component using the `mask` prop, making the input appear like a password field. It also includes a default value for demonstration.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#_snippet_3

LANGUAGE: vue-html
CODE:
```
<template>
  <UPinInput mask :default-value="['1', '2', '3', '4', '5']" />
</template>
```

----------------------------------------

TITLE: Configuring NavigationMenu Content Orientation in Nuxt UI (YAML)
DESCRIPTION: This snippet demonstrates how to configure the `NavigationMenu` component in Nuxt UI to display its content with a vertical orientation. It uses the `contentOrientation` prop set to 'vertical' and defines a complex `items` array for navigation links, including nested children with descriptions and icons. Note that `contentOrientation` only applies when the main `orientation` prop (not shown here but implied by the warning) is 'horizontal'.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#_snippet_8

LANGUAGE: YAML
CODE:
```
collapse: true
ignore:
  - items
  - arrow
  - class
external:
  - items
externalTypes:
  - NavigationMenuItem[]
props:
  arrow: true
  contentOrientation: 'vertical'
  items:
    - label: Guide
      icon: i-lucide-book-open
      to: /getting-started
      children:
        - label: Introduction
          description: Fully styled and customizable components for Nuxt.
          icon: i-lucide-house
        - label: Installation
          description: Learn how to install and configure Nuxt UI in your application.
          icon: i-lucide-cloud-download
        - label: 'Icons'
          icon: 'i-lucide-smile'
          description: 'You have nothing to do, @nuxt/icon will handle it automatically.'
    - label: Composables
      icon: i-lucide-database
      to: /composables
      children:
        - label: defineShortcuts
          icon: i-lucide-file-text
          description: Define shortcuts for your application.
          to: /composables/define-shortcuts
        - label: useOverlay
          icon: i-lucide-file-text
          description: Display a modal/slideover within your application.
          to: /composables/use-overlay
        - label: useToast
          icon: i-lucide-file-text
          description: Display a toast within your application.
          to: /composables/use-toast
    - label: Components
      icon: i-lucide-box
      to: /components
      active: true
      children:
        - label: Link
          icon: i-lucide-file-text
          description: Use NuxtLink with superpowers.
          to: /components/link
        - label: Modal
          icon: i-lucide-file-text
          description: Display a modal within your application.
          to: /components/modal
        - label: NavigationMenu
          icon: i-lucide-file-text
          description: Display a list of links.
          to: /components/navigation-menu
        - label: Pagination
          icon: i-lucide-file-text
          description: Display a list of pages.
          to: /components/pagination
  class: 'w-full justify-center'
```

----------------------------------------

TITLE: Using useFormField Composable in Vue Script Setup
DESCRIPTION: This snippet demonstrates how to use the `useFormField` composable within a Vue 3 `<script setup>` block. It destructures `inputId`, `emitFormBlur`, `emitFormInput`, and `emitFormChange` from the composable, which are essential for integrating custom inputs with the Nuxt UI Form component by providing necessary IDs and event emitters.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-form-field.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
<script setup lang="ts">\nconst { inputId, emitFormBlur, emitFormInput, emitFormChange } = useFormField()\n</script>
```

----------------------------------------

TITLE: Enabling/Disabling Nuxt Fonts Module
DESCRIPTION: This snippet shows how to control the inclusion of the `@nuxt/fonts` module via the `fonts` option in `nuxt.config.ts`. Setting it to `false` disables the module, which is `true` by default.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#_snippet_8

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  modules: ['@nuxt/ui'],
  css: ['~/assets/css/main.css'],
  ui: {
    fonts: false
  }
})
```

----------------------------------------

TITLE: Adding Description Nuxt FormField Vue Template
DESCRIPTION: Illustrates adding supplementary text below the label using the `description` prop. This provides additional context or information related to the form control, wrapping a `UInput` with a full-width class.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#_snippet_2

LANGUAGE: Vue Template
CODE:
```
<UInput placeholder="Enter your email" class="w-full" />
```

----------------------------------------

TITLE: Disabling the Switch (Vue)
DESCRIPTION: This snippet shows how to disable user interaction with the Switch component using the `disabled` prop. When disabled, the switch cannot be toggled and appears visually inactive.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#_snippet_10

LANGUAGE: Vue
CODE:
```
<template>
  <U-Switch label="Check me" disabled />
</template>
```

----------------------------------------

TITLE: Enabling Multiple Selections in InputMenu - Vue
DESCRIPTION: This snippet shows how to enable multiple selections in the `InputMenu` using the `multiple` prop set to `true`. The `modelValue` is an array of selected items, 'Backlog' and 'Todo'. When `multiple` is enabled, selected items are displayed as badges within the input field.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#_snippet_6

LANGUAGE: Vue
CODE:
```
<InputMenu :model-value="['Backlog', 'Todo']" :multiple="true" :items="['Backlog', 'Todo', 'In Progress', 'Done']" />
```

----------------------------------------

TITLE: Customizing Nuxt UI Pro Base Radius in main.css - CSS
DESCRIPTION: Demonstrates how to override the default --ui-radius CSS variable in your main.css file when using Nuxt UI Pro. This customization affects the base value for all radius utility classes (rounded-*) in the Pro version.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_29

LANGUAGE: CSS
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui-pro";

:root {
  --ui-radius: 0.5rem;
}
```

----------------------------------------

TITLE: Configuring InputMenu Items with Object Array - Vue
DESCRIPTION: This snippet demonstrates how to use an array of objects for the `items` prop, where each object has a `label` property. The `modelValue` is set to an object with `label: 'Todo'`, indicating the initially selected item. This approach allows for more complex item structures, including additional properties like icons or avatars.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<InputMenu :model-value="{ label: 'Todo' }" :items="[{ label: 'Backlog' }, { label: 'Todo' }, { label: 'In Progress' }, { label: 'Done' }]" />
```

----------------------------------------

TITLE: Installing Nuxt UI with bun
DESCRIPTION: This command installs the Nuxt UI package using the bun package manager. It adds `@nuxt/ui` as a dependency to your project, making its components and utilities available for use.
SOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
bun add @nuxt/ui
```

----------------------------------------

TITLE: Defining Nuxt UI Theme Colors
DESCRIPTION: This snippet illustrates how to define dynamic color aliases for Nuxt UI components using the `theme.colors` option in `nuxt.config.ts`. This allows you to specify which colors are available for theming, overriding the default set.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#_snippet_10

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  modules: ['@nuxt/ui'],
  css: ['~/assets/css/main.css'],
  ui: {
    theme: {
      colors: ['primary', 'error']
    }
  }
})
```

----------------------------------------

TITLE: Configuring Accordion Items in Nuxt UI
DESCRIPTION: Demonstrates how to configure the items displayed in the Accordion component using the `items` prop. Each item is an object with properties like `label`, `icon`, and `content`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/accordion.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "class": "px-4",
  "items": [
    {
      "label": "Icons",
      "icon": "i-lucide-smile",
      "content": "You have nothing to do, @nuxt/icon will handle it automatically."
    },
    {
      "label": "Colors",
      "icon": "i-lucide-swatch-book",
      "content": "Choose a primary and a neutral color from your Tailwind CSS theme."
    },
    {
      "label": "Components",
      "icon": "i-lucide-box",
      "content": "You can customize components by using the `class` / `ui` props or in your app.config.ts."
    }
  ]
}
```

----------------------------------------

TITLE: Enabling Multiple Selections in CommandPalette (YAML)
DESCRIPTION: Illustrates how to configure the CommandPalette to allow users to select multiple items. The `multiple` prop is set to `true`, and `modelValue` is initialized as an empty array to store selected items.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#_snippet_1

LANGUAGE: yaml
CODE:
```
multiple: true
autofocus: false
modelValue: []
groups:
  - id: 'users'
    label: 'Users'
    items:
      - label: 'Benjamin Canac'
        suffix: 'benjamincanac'
        avatar:
          src: 'https://github.com/benjamincanac.png'
      - label: 'Sylvain Marroufin'
        suffix: 'smarroufin'
        avatar:
          src: 'https://github.com/smarroufin.png'
      - label: 'Sébastien Chopin'
        suffix: 'atinux'
        avatar:
          src: 'https://github.com/atinux.png'
      - label: 'Romain Hamel'
        suffix: 'romhml'
        avatar:
          src: 'https://github.com/romhml.png'
      - label: 'Haytham A. Salama'
        suffix: 'Haythamasalama'
        avatar:
          src: 'https://github.com/Haythamasalama.png'
      - label: 'Daniel Roe'
        suffix: 'danielroe'
        avatar:
          src: 'https://github.com/danielroe.png'
      - label: 'Neil Richter'
        suffix: 'noook'
        avatar:
          src: 'https://github.com/noook.png'
class: 'flex-1'
```

----------------------------------------

TITLE: Enabling Multiple Selection - Nuxt UI Tree - Vue HTML
DESCRIPTION: Shows how to enable multiple item selection in the UTree component by setting the `multiple` prop to `true`. Uses the same item structure as the basic example.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tree.md#_snippet_1

LANGUAGE: vue-html
CODE:
```
<UTree :items="items" multiple class="w-60" />
```

----------------------------------------

TITLE: Adjusting Progress Bar Size - Nuxt UI - Vue.js
DESCRIPTION: This snippet demonstrates how to modify the size of the Progress component using the `size` prop. The size is set to `xl` (extra large).
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#_snippet_8

LANGUAGE: Vue.js
CODE:
```
<UProgress size="xl" />
```

----------------------------------------

TITLE: Disabling Checkbox (Vue)
DESCRIPTION: Illustrates how to disable the Checkbox component, making it unclickable and visually indicating its inactive state. This is achieved by setting the `disabled` prop to `true`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_12

LANGUAGE: Vue
CODE:
```
<UCheckbox :disabled="true" label="Check me" />
```

----------------------------------------

TITLE: Integrating Keyboard Shortcuts with Nuxt UI DropdownMenu Items (Vue)
DESCRIPTION: Provides a Vue script example demonstrating how to define DropdownMenu items with keyboard shortcuts (`kbds`) and use the `extractShortcuts` utility with `defineShortcuts` to automatically trigger item selection functions when the corresponding shortcut is pressed.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/dropdown-menu.md#_snippet_5

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
import type { DropdownMenuItem } from '@nuxt/ui'

const items: DropdownMenuItem[] = [{
  label: 'Invite users',
  icon: 'i-lucide-user-plus',
  children: [{
    label: 'Invite by email',
    icon: 'i-lucide-send-horizontal',
    kbds: ['meta', 'e'],
    onSelect() {
      console.log('Invite by email clicked')
    }
  }, {
    label: 'Invite by link',
    icon: 'i-lucide-link',
    kbds: ['meta', 'i'],
    onSelect() {
      console.log('Invite by link clicked')
    }
  }]
}, {
  label: 'New team',
  icon: 'i-lucide-plus',
  kbds: ['meta', 'n'],
  onSelect() {
    console.log('New team clicked')
  }
}]

defineShortcuts(extractShortcuts(items))
<\/script>
```

----------------------------------------

TITLE: Defining Card Component Theme Slots (Tailwind Variants)
DESCRIPTION: Illustrates the theme definition for the Card component using Tailwind Variants, defining CSS classes for different slots like `root`, `header`, `body`, and `footer`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_33

LANGUAGE: ts
CODE:
```
export default {
  slots: {
    root: 'bg-default ring ring-default divide-y divide-default rounded-lg',
    header: 'p-4 sm:px-6',
    body: 'p-4 sm:p-6',
    footer: 'p-4 sm:px-6'
  }
}
```

----------------------------------------

TITLE: Implementing Card Component Vue Template with Slots
DESCRIPTION: Shows the Vue template structure for the Card component, utilizing named slots (`header`, default, `footer`) and applying classes defined in the theme object.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_34

LANGUAGE: vue
CODE:
```
<template>
  <div :class="ui.root({ class: [props.ui?.root, props.class] })">
    <div :class="ui.header({ class: props.ui?.header })">
      <slot name="header" />
    </div>

    <div :class="ui.body({ class: props.ui?.body })">
      <slot />
    </div>

    <div :class="ui.footer({ class: props.ui?.footer })">
      <slot name="footer" />
    </div>
  </div>
</template>
```

----------------------------------------

TITLE: Initializing Nuxt UI Vue Plugin
DESCRIPTION: This TypeScript snippet demonstrates how to initialize and use the Nuxt UI Vue plugin in your `main.ts` file. It imports `ui` from `@nuxt/ui/vue-plugin` and registers it with the Vue application instance using `app.use(ui)`, making Nuxt UI components globally available.
SOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_7

LANGUAGE: ts
CODE:
```
import { createApp } from 'vue'
import { createRouter, createWebHistory } from 'vue-router'
import ui from '@nuxt/ui/vue-plugin'
import App from './App.vue'

const app = createApp(App)

const router = createRouter({
  routes: [],
  history: createWebHistory()
})

app.use(router)
app.use(ui)

app.mount('#app')
```

----------------------------------------

TITLE: Displaying Icons with Nuxt UI Icon Component (Vue)
DESCRIPTION: This snippet demonstrates how to use the `Icon` component in Nuxt UI to display an icon. The `name` prop specifies the icon to display (e.g., `i-lucide-lightbulb`), and the `class` prop can be used for styling, such as setting the size.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/icon.md#_snippet_0

LANGUAGE: YAML
CODE:
```
props:
  name: 'i-lucide-lightbulb'
  class: 'size-5'
```

----------------------------------------

TITLE: Customizing NavigationMenu Variant in Vue Template
DESCRIPTION: This snippet demonstrates how to use the `variant` prop to change the visual style of the `UINavigationMenu` component. It also sets the `color` and `highlight` props, and defines a structured list of `items` for the navigation menu, including nested arrays for different sections and external links.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#_snippet_5

LANGUAGE: Vue Template
CODE:
```
<template>\n  <UINavigationMenu\n    color="neutral"\n    variant="link"\n    :highlight="false"\n    :items="[\n      [\n        { label: \"Guide\", icon: \"i-lucide-book-open\", to: \"/getting-started\" },\n        { label: \"Composables\", icon: \"i-lucide-database\", to: \"/composables\" },\n        { label: \"Components\", icon: \"i-lucide-box\", to: \"/components\", active: true }\n      ],\n      [\n        { label: \"GitHub\", icon: \"i-simple-icons-github\", badge: \"3.8k\", to: \"https://github.com/nuxt/ui\", target: \"_blank\" }\n      ]\n    ]"\n    class="w-full"\n  />\n</template>
```

----------------------------------------

TITLE: Configuring Select Component Items with Types (YAML)
DESCRIPTION: This snippet demonstrates how to configure the `items` prop of a Nuxt UI Select component using YAML, showcasing the use of `label` and `separator` types to group and visually separate options. It also sets a default `modelValue` and a `class` for styling, providing a structured way to define dropdown options.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#_snippet_0

LANGUAGE: YAML
CODE:
```
modelValue: 'Apple'
items:
  - type: 'label'
    label: 'Fruits'
  - Apple
  - Banana
  - Blueberry
  - Grapes
  - Pineapple
  - type: 'separator'
  - type: 'label'
    label: 'Vegetables'
  - Aubergine
  - Broccoli
  - Carrot
  - Courgette
  - Leek
class: 'w-48'
```

----------------------------------------

TITLE: Setting Avatar Image Source in Nuxt UI (Vue)
DESCRIPTION: Demonstrates how to set the image URL for the Nuxt UI Avatar component using the `src` prop. The component intelligently uses `@nuxt/image` if available, otherwise falls back to a standard `<img>` tag.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UAvatar src="https://github.com/benjamincanac.png" />
```

----------------------------------------

TITLE: Grouping Buttons with ButtonGroup - Vue
DESCRIPTION: This snippet demonstrates the fundamental usage of the `ButtonGroup` component by wrapping two `UButton` components. It shows how to group a standard button and an icon button, providing a cohesive visual and functional unit.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button-group.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UButton color="neutral" variant="subtle" label="Button" />
    <UButton color="neutral" variant="outline" icon="i-lucide-chevron-down" />
```

----------------------------------------

TITLE: Combining Input and Button in ButtonGroup - Vue
DESCRIPTION: This example demonstrates the flexibility of `ButtonGroup` by combining a `UInput` component with a `UButton`. It illustrates a common pattern where an input field is paired with an action button, such as copying content or submitting data.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button-group.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<UInput color="neutral" variant="outline" placeholder="Enter token" />

    <UButton color="neutral" variant="subtle" icon="i-lucide-clipboard" />
```

----------------------------------------

TITLE: Using RadioGroup with Custom Value Key
DESCRIPTION: Illustrates how to use the `value-key` prop to specify a different property (e.g., 'id') on the item objects to be used as the value. The `modelValue` is set to 'light'.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_2

LANGUAGE: yaml
CODE:
```
modelValue: 'light'
valueKey: 'id'
items:
  - label: 'System'
    description: 'This is the first option.'
    id: 'system'
  - label: 'Light'
    description: 'This is the second option.'
    id: 'light'
  - label: 'Dark'
    description: 'This is the third option.'
    id: 'dark'
```

----------------------------------------

TITLE: Changing Popover Interaction Mode (Vue/HTML)
DESCRIPTION: Illustrates how to change the Popover's interaction mode using the `mode` prop. The example sets the mode to 'hover', which causes the popover to appear and disappear on mouse hover instead of click. When in 'hover' mode, the Reka UI HoverCard component is used internally.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/popover.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UPopover mode="hover">
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" />
  </template>
  <template #content>
    <Placeholder class="size-48 m-4 inline-flex" />
  </template>
</UPopover>
```

----------------------------------------

TITLE: Updating tsconfig.app.json for Nuxt UI Type Declarations
DESCRIPTION: This JSON snippet illustrates how to update your `tsconfig.app.json` to include the auto-generated type declaration files (`auto-imports.d.ts`, `components.d.ts`) from Nuxt UI, ensuring proper TypeScript support.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue", "auto-imports.d.ts", "components.d.ts"]
}
```

----------------------------------------

TITLE: Adding #header, #body, #footer Slots in Overlays (Vue Template)
DESCRIPTION: Explains the addition of structured slots (`#header`, `#body`, `#footer`) inside the `#content` slot for components like `UModal` and `USlideover`, providing a consistent layout similar to the `UCard` component. Required dependencies: A Nuxt UI overlay component supporting these slots. Expected input: Content for the header, body, and footer sections via their respective slot templates.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_10

LANGUAGE: Vue Template
CODE:
```
<template>
  <UModal title="Title" description="Description">
    <template #body>
      <Placeholder class="h-48" />
    </template>
  </UModal>
</template>
```

----------------------------------------

TITLE: Renaming Component Item Props (Vue Template)
DESCRIPTION: Demonstrates renaming the `options` and `links` props to `items` for consistency across several Nuxt UI components like `USelect` and `UNavigationMenu`. Required dependencies: Nuxt UI components. Expected input: Array of items for the component.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_5

LANGUAGE: Vue Template
CODE:
```
<template>
  <USelect :items="countries" />

  <UNavigationMenu :items="links" />
</template>
```

----------------------------------------

TITLE: Disabling SelectMenu Component (Nuxt UI)
DESCRIPTION: This example shows how to disable the Nuxt UI SelectMenu component using the `disabled` prop. When set to `true`, the component becomes unresponsive to user interactions, preventing selection or opening.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
{
  disabled: true,
  placeholder: 'Select status',
  items: [
    'Backlog',
    'Todo',
    'In Progress',
    'Done'
  ],
  class: 'w-48'
}
```

----------------------------------------

TITLE: Disabling PinInput in Vue
DESCRIPTION: This snippet demonstrates how to disable the UPinInput component, making it non-interactive, using the `disabled` prop.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#_snippet_10

LANGUAGE: vue-html
CODE:
```
<template>
  <UPinInput disabled placeholder="○" />
</template>
```

----------------------------------------

TITLE: Customizing SelectMenu Loading Icon (Nuxt UI)
DESCRIPTION: This snippet demonstrates how to customize the loading icon of the Nuxt UI SelectMenu component using the `loadingIcon` prop. It sets the `loading` state to true and specifies a custom icon, overriding the default `i-lucide-loader-circle`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
{
  modelValue: 'Backlog',
  loading: true,
  loadingIcon: 'i-lucide-loader',
  items: [
    'Backlog',
    'Todo',
    'In Progress',
    'Done'
  ],
  class: 'w-48'
}
```

----------------------------------------

TITLE: Disabling InputMenu in Vue
DESCRIPTION: This snippet demonstrates how to disable the InputMenu component using the `disabled` prop. It also sets a placeholder and provides a list of predefined items. The component will not be interactive when disabled.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UInputMenu :disabled="true" placeholder="Select status" :items="['Backlog', 'Todo', 'In Progress', 'Done']" />
```

----------------------------------------

TITLE: Customizing Close Button in Nuxt UI Slideover (Vue/HTML)
DESCRIPTION: This snippet shows how to customize the close button of the `USlideover` component using the `close` prop. It allows passing properties like `color`, `variant`, and `class` to style the button, providing flexibility in its appearance. The `UButton` triggers the slideover, and content is in the `#body` slot.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<USlideover title="Slideover with close button" :close="{ color: 'primary', variant: 'outline', class: 'rounded-full' }">
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" />
  </template>
  <template #body>
    <Placeholder class="h-full" />
  </template>
</USlideover>
```

----------------------------------------

TITLE: Disabling the ColorPicker (YAML)
DESCRIPTION: Illustrates how to disable user interaction with the ColorPicker by setting the `disabled` prop to `true`, making it non-interactive. This is useful for read-only states or when input is not desired.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#_snippet_8

LANGUAGE: YAML
CODE:
```
props:
  disabled: true
```

----------------------------------------

TITLE: Using onClick Event Handler in Items (TypeScript)
DESCRIPTION: Shows the change from using a custom `click` field within item objects to using the native Vue `onClick` event handler for handling item clicks in components like `DropdownMenu` or `CommandPalette`. Required dependencies: A component that accepts an array of items with click handlers. Expected input: An array of objects, where each object can have an `onClick` function.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
<script setup lang="ts">
const items = [{
  label: 'Edit',
  onClick: () => {
    console.log('Edit')
  }
}]
</script>
```

----------------------------------------

TITLE: Setting Initial Date with defaultValue (Vue)
DESCRIPTION: Illustrates how to use the `defaultValue` prop to set the initial selected date for the `UCalendar` component. This prop is suitable for uncontrolled components where the state is managed internally by the calendar.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UCalendar :default-value="new Date(2022, 1, 6)" />
```

----------------------------------------

TITLE: Setting Initial InputNumber Value with defaultValue
DESCRIPTION: Shows how to set the initial value of the InputNumber component using the defaultValue prop when you don't need to manage its state externally via v-model.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-number.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UInputNumber :default-value="5" />
```

----------------------------------------

TITLE: Disable Tree Interaction - YAML Config
DESCRIPTION: Shows how to use the `disabled` prop to make the entire Tree component non-interactive. Note that individual items can also be disabled using `item.disabled`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tree.md#_snippet_6

LANGUAGE: yaml
CODE:
```
collapse: true
hide:
  - class
ignore:
  - items
external:
  - items
props:
  disabled: true
  items:
    - label: 'app'
      icon: 'i-lucide-folder'
      defaultExpanded: true
      children:
        - label: 'composables'
          icon: 'i-lucide-folder'
          children:
            - label: 'useAuth.ts'
              icon: 'i-vscode-icons-file-type-typescript'
            - label: 'useUser.ts'
              icon: 'i-vscode-icons-file-type-typescript'
        - label: 'components'
          icon: 'i-lucide-folder'
          children:
            - label: 'Home'
              icon: 'i-lucide-folder'
              children:
                - label: 'Card.vue'
                  icon: 'i-vscode-icons-file-type-vue'
                - label: 'Button.vue'
                  icon: 'i-vscode-icons-file-type-vue'
    - label: 'app.vue'
      icon: 'i-vscode-icons-file-type-vue'
    - label: 'nuxt.config.ts'
      icon: 'i-vscode-icons-file-type-nuxt'
  class: 'w-60'
```

----------------------------------------

TITLE: Adding Placeholder Text to Textarea (Vue)
DESCRIPTION: Illustrates how to add a placeholder text to the Textarea component using the `placeholder` prop, providing a hint to the user about the expected input.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UTextarea placeholder="Type something..." />
```

----------------------------------------

TITLE: Basic Usage of Nuxt UI Collapsible
DESCRIPTION: Demonstrates the fundamental implementation of the UCollapsible component. It uses a UButton as the trigger to toggle the visibility of a Placeholder component, showcasing how to structure the default and content slots.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/collapsible.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UCollapsible class="flex flex-col gap-2 w-48">
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" trailing-icon="i-lucide-chevron-down" block />
  </template>
  <template #content>
    <Placeholder class="h-48" />
  </template>
</UCollapsible>
```

----------------------------------------

TITLE: Installing Nuxt I18n Module (yarn)
DESCRIPTION: This command installs the `@nuxtjs/i18n` package using yarn, which is required to enable dynamic language switching and advanced internationalization features in a Nuxt application. It adds the module to the project's dependencies.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn add @nuxtjs/i18n
```

----------------------------------------

TITLE: Creating a Range Slider with v-model
DESCRIPTION: Shows how to create a range slider by providing an array of values to the `v-model` directive.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#_snippet_4

LANGUAGE: html
CODE:
```
<template>
  <USlider v-model="rangeValue" />
</template>

<script setup>
const rangeValue = ref([25, 75])
</script>
```

----------------------------------------

TITLE: Defining Nuxt UI Color Variables - CSS
DESCRIPTION: Defines a set of CSS variables used by Nuxt UI components for various purposes like rings, dividers, outlines, strokes, and fills, mapping them to core UI border and background variables. These variables control the appearance of components.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_21

LANGUAGE: CSS
CODE:
```
--ring-color-accented: var(--ui-border-accented);
  --ring-color-inverted: var(--ui-border-inverted);
  --ring-color-bg: var(--ui-bg);
  --ring-offset-color-default: var(--ui-border);
  --ring-offset-color-muted: var(--ui-border-muted);
  --ring-offset-color-accented: var(--ui-border-accented);
  --ring-offset-color-inverted: var(--ui-border-inverted);
  --ring-offset-color-bg: var(--ui-bg);
  --divide-color-default: var(--ui-border);
  --divide-color-muted: var(--ui-border-muted);
  --divide-color-accented: var(--ui-border-accented);
  --divide-color-inverted: var(--ui-border-inverted);
  --divide-color-bg: var(--ui-bg);
  --outline-color-default: var(--ui-border);
  --outline-color-inverted: var(--ui-border-inverted);
  --stroke-color-default: var(--ui-border);
  --stroke-color-inverted: var(--ui-border-inverted);
  --fill-color-default: var(--ui-border);
  --fill-color-inverted: var(--ui-border-inverted);
}
```

----------------------------------------

TITLE: Basic Popover Usage (Vue/HTML)
DESCRIPTION: Demonstrates the fundamental usage of the Nuxt UI Popover component. It shows how to define a trigger element using the default slot (e.g., a UButton) and how to provide the popover's content using the #content slot, which will be displayed when the popover is open.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/popover.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UPopover>
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" />
  </template>
  <template #content>
    <Placeholder class="size-48 m-4 inline-flex" />
  </template>
</UPopover>
```

----------------------------------------

TITLE: Importing Nuxt UI and Tailwind CSS in Vue
DESCRIPTION: This CSS snippet imports the necessary stylesheets for Tailwind CSS and Nuxt UI into your main CSS file (e.g., `assets/main.css`). These imports are crucial for applying the styling provided by both frameworks to your Vue application.
SOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_8

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui";
```

----------------------------------------

TITLE: Importing Nuxt UI Styles in Main CSS File - CSS
DESCRIPTION: After importing Tailwind CSS, add another import statement in your `main.css` file to include the core Nuxt UI styles. This applies the base styles for the Nuxt UI components.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#_snippet_2

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui";
```

----------------------------------------

TITLE: Enabling Multiple Date Selection (Vue)
DESCRIPTION: Demonstrates how to enable multiple date selection using the `multiple` prop. When `multiple` is set to `true`, the `v-model` expects an array of dates, allowing users to select several dates simultaneously.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UCalendar v-model="selectedDates" multiple />

<script setup>
import { ref } from 'vue';

const selectedDates = ref([
  new Date(2022, 1, 4),
  new Date(2022, 1, 6),
  new Date(2022, 1, 8)
]);
<\/script>
```

----------------------------------------

TITLE: Overriding Badge Styles with `class` Prop in Nuxt UI
DESCRIPTION: Shows how to apply custom CSS classes (`font-bold rounded-full`) to override the base styles of the Nuxt UI Badge component using the `class` prop, while retaining its label.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#_snippet_8

LANGUAGE: Vue
CODE:
```
<UBadge class="font-bold rounded-full">Badge</UBadge>
```

----------------------------------------

TITLE: Using Breadcrumb with Items Prop (Vue)
DESCRIPTION: Demonstrates how to populate the breadcrumb component using the `items` prop. The prop accepts an array of objects, where each object represents a breadcrumb item and can include properties like `label`, `icon`, and `to` for navigation.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/breadcrumb.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<UBreadcrumb :items="[{ label: 'Home', icon: 'i-lucide-house' }, { label: 'Components', icon: 'i-lucide-box', to: '/components' }, { label: 'Breadcrumb', icon: 'i-lucide-link', to: '/components/breadcrumb' }]" />
```

----------------------------------------

TITLE: Setting Modal Title with `title` Prop in Vue
DESCRIPTION: Illustrates how to set a custom title for the Modal's header using the `title` prop. The modal opens with a button and displays content within its body slot, providing a clear heading for the dialog.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UButton label="Open" color="neutral" variant="subtle" />

<UModal title="Modal with title">
  <template #body>
    <Placeholder class="h-48" />
  </template>
</UModal>
```

----------------------------------------

TITLE: Disabling Nuxt UI DropdownMenu (HTML)
DESCRIPTION: Illustrates the trigger button for a Nuxt UI DropdownMenu configured with the `disabled` prop set to true. The `disabled` prop is applied to the DropdownMenu component (not shown) to prevent it from opening.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/dropdown-menu.md#_snippet_4

LANGUAGE: HTML
CODE:
```
<UButton label="Open" icon="i-lucide-menu" color="neutral" variant="outline" />
```

----------------------------------------

TITLE: Displaying Loading State in CommandPalette (YAML)
DESCRIPTION: Illustrates how to activate the loading indicator on the CommandPalette by setting the `loading` prop to `true`. This is useful for indicating ongoing data fetching or processing.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#_snippet_4

LANGUAGE: yaml
CODE:
```
autofocus: false
loading: true
groups:
  - id: 'apps'
    items:
      - label: 'Calendar'
        icon: 'i-lucide-calendar'
      - label: 'Music'
        icon: 'i-lucide-music'
      - label: 'Maps'
        icon: 'i-lucide-map'
class: 'flex-1'
```

----------------------------------------

TITLE: Setting Title for Nuxt UI Slideover (Vue/HTML)
DESCRIPTION: This snippet illustrates how to add a title to the `USlideover` component's header using the `title` prop. The `UButton` in the default slot opens the slideover, and the main content is provided via the `#body` slot, which is commonly used for the slideover's main content area.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<USlideover title="Slideover with title">
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" />
  </template>
  <template #body>
    <Placeholder class="h-full" />
  </template>
</USlideover>
```

----------------------------------------

TITLE: Setting Drawer Title in Nuxt UI
DESCRIPTION: This snippet illustrates how to add a title to the Nuxt UI Drawer's header using the `title` prop. It includes a UButton as the trigger and a placeholder within the #body slot, demonstrating the drawer's title functionality.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/drawer.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<template>
  <UDrawer title="Drawer with title">
    <template #default>
      <UButton label="Open" color="neutral" variant="subtle" trailing-icon="i-lucide-chevron-up" />
    </template>
    <template #body>
      <Placeholder class="h-48" />
    </template>
  </UDrawer>
</template>
```

----------------------------------------

TITLE: Ignoring Nuxt UI Type Declaration Files in .gitignore
DESCRIPTION: This snippet shows how to add the auto-generated Nuxt UI type declaration files (`auto-imports.d.ts`, `components.d.ts`) to your `.gitignore` file to prevent them from being committed to version control.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_3

LANGUAGE: gitignore
CODE:
```
# Auto-generated type declarations
auto-imports.d.ts
components.d.ts
```

----------------------------------------

TITLE: Configuring VSCode for ESLint Auto-Fix on Save
DESCRIPTION: Provides a VSCode settings snippet to enable ESLint auto-fixing on save. This configuration ensures that code formatting and linting errors are automatically corrected when a file is saved, improving code consistency.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#_snippet_13

LANGUAGE: json
CODE:
```
{
  "editor.codeActionsOnSave": {
    "source.fixAll": false,
    "source.fixAll.eslint": true
  }
}
```

----------------------------------------

TITLE: Generate Tailwind CSS Theme with Nuxt UI Colors (SCSS)
DESCRIPTION: Shows the underlying SCSS structure used by Nuxt UI to generate the Tailwind CSS `@theme` configuration, mapping color aliases and their various shades to corresponding CSS variables.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_10

LANGUAGE: scss
CODE:
```
@theme default {
  --color-primary: var(--ui-primary);
  --color-primary-50: var(--ui-color-primary-50);
  --color-primary-100: var(--ui-color-primary-100);
  --color-primary-200: var(--ui-color-primary-200);
  --color-primary-300: var(--ui-color-primary-300);
  --color-primary-400: var(--ui-color-primary-400);
  --color-primary-500: var(--ui-color-primary-500);
  --color-primary-600: var(--ui-color-primary-600);
  --color-primary-700: var(--ui-color-primary-700);
  --color-primary-800: var(--ui-color-primary-800);
  --color-primary-900: var(--ui-color-primary-900);
  --color-primary-950: var(--ui-color-primary-950);
  --color-secondary: var(--ui-secondary);
  --color-secondary-50: var(--ui-color-secondary-50);
  --color-secondary-100: var(--ui-color-secondary-100);
  --color-secondary-200: var(--ui-color-secondary-200);
  --color-secondary-300: var(--ui-color-secondary-300);
  --color-secondary-400: var(--ui-color-secondary-400);
  --color-secondary-500: var(--ui-color-secondary-500);
  --color-secondary-600: var(--ui-color-secondary-600);
  --color-secondary-700: var(--ui-color-secondary-700);
  --color-secondary-800: var(--ui-color-secondary-800);
  --color-secondary-900: var(--ui-color-secondary-900);
  --color-secondary-950: var(--ui-color-secondary-950);
  --color-success: var(--ui-success);
  --color-success-50: var(--ui-color-success-50);
  --color-success-100: var(--ui-color-success-100);
  --color-success-200: var(--ui-color-success-200);
  --color-success-300: var(--ui-color-success-300);
  --color-success-400: var(--ui-color-success-400);
  --color-success-500: var(--ui-color-success-500);
  --color-success-600: var(--ui-color-success-600);
  --color-success-700: var(--ui-color-success-700);
  --color-success-800: var(--ui-color-success-800);
  --color-success-900: var(--ui-color-success-900);
  --color-success-950: var(--ui-color-success-950);
  --color-info: var(--ui-info);
  --color-info-50: var(--ui-color-info-50);
  --color-info-100: var(--ui-color-info-100);
  --color-info-200: var(--ui-color-info-200);
  --color-info-300: var(--ui-color-info-300);
  --color-info-400: var(--ui-color-info-400);
  --color-info-500: var(--ui-color-info-500);
  --color-info-600: var(--ui-color-info-600);
  --color-info-700: var(--ui-color-info-700);
  --color-info-800: var(--ui-color-info-800);
  --color-info-900: var(--ui-color-info-900);
  --color-info-950: var(--ui-color-info-950);
  --color-warning: var(--ui-warning);
  --color-warning-50: var(--ui-color-warning-50);
  --color-warning-100: var(--ui-color-warning-100);
  --color-warning-200: var(--ui-color-warning-200);
  --color-warning-300: var(--ui-color-warning-300);
  --color-warning-400: var(--ui-color-warning-400);
  --color-warning-500: var(--ui-color-warning-500);
  --color-warning-600: var(--ui-color-warning-600);
  --color-warning-700: var(--ui-color-warning-700);
}
```

----------------------------------------

TITLE: Using RadioGroup with Array of Strings
DESCRIPTION: Demonstrates how to use the `RadioGroup` component by providing a simple array of strings as the `items` prop. The `v-model` or `modelValue` is set to 'System'.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_0

LANGUAGE: yaml
CODE:
```
modelValue: 'System'
items:
  - 'System'
  - 'Light'
  - 'Dark'
```

----------------------------------------

TITLE: Setting Static Locale with Nuxt UI Pro
DESCRIPTION: This snippet demonstrates how to set a static locale for your application using the `locale` prop of the `UApp` component, importing a predefined locale like `fr` from `@nuxt/ui-pro/locale`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#_snippet_1

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
import { fr } from '@nuxt/ui-pro/locale'
</script>

<template>
  <UApp :locale="fr">
    <RouterView />
  </UApp>
</template>
```

----------------------------------------

TITLE: Extracting ContextMenu Shortcuts with defineShortcuts Vue/TS
DESCRIPTION: Defines a list of ContextMenu items, including those with keyboard shortcuts (`kbds`), and uses the `extractShortcuts` utility with the `defineShortcuts` composable to automatically bind the shortcuts to the item's `onSelect` function.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/context-menu.md#_snippet_3

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
const items = [
  [{
    label: 'Show Sidebar',
    kbds: ['meta', 'S'],
    onSelect() {
      console.log('Show Sidebar clicked')
    }
  }, {
    label: 'Show Toolbar',
    kbds: ['shift', 'meta', 'D'],
    onSelect() {
      console.log('Show Toolbar clicked')
    }
  }, {
    label: 'Collapse Pinned Tabs',
    disabled: true
  }], [{
    label: 'Refresh the Page'
  }, {
    label: 'Clear Cookies and Refresh'
  }, {
    label: 'Clear Cache and Refresh'
  }, {
    type: 'separator' as const
  }, {
    label: 'Developer',
    children: [[{
      label: 'View Source',
      kbds: ['option', 'meta', 'U'],
      onSelect() {
        console.log('View Source clicked')
      }
    }, {
      label: 'Developer Tools',
      kbds: ['option', 'meta', 'I'],
      onSelect() {
        console.log('Developer Tools clicked')
      }
    }], [{
      label: 'Inspect Elements',
      kbds: ['option', 'meta', 'C'],
      onSelect() {
        console.log('Inspect Elements clicked')
      }
    }], [{
      label: 'JavaScript Console',
      kbds: ['option', 'meta', 'J'],
      onSelect() {
        console.log('JavaScript Console clicked')
      }
    }]]
  }]
]

defineShortcuts(extractShortcuts(items))
</script>
```

----------------------------------------

TITLE: Positioning Trailing Icon in Textarea (Vue)
DESCRIPTION: Illustrates how to place an icon at the trailing (right) end of the Textarea component using the `trailingIcon` prop. This is useful for input fields like email addresses.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_9

LANGUAGE: Vue
CODE:
```
<UTextarea trailingIcon="i-lucide-at-sign" placeholder="Enter your email" size="md" :rows="1" />
```

----------------------------------------

TITLE: Disabling Nuxt Fonts Module in Nuxt.js Configuration
DESCRIPTION: This TypeScript snippet for `nuxt.config.ts` demonstrates how to disable the `@nuxt/fonts` module, which is automatically registered by Nuxt UI. Setting `ui.fonts` to `false` prevents Nuxt UI from integrating with Nuxt Fonts, allowing for manual font management if desired.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/5.fonts.md#_snippet_2

LANGUAGE: typescript
CODE:
```
export default defineNuxtConfig({
  ui: {
    fonts: false
  }
})
```

----------------------------------------

TITLE: Adding an Icon to Textarea (Vue)
DESCRIPTION: Demonstrates how to embed an icon within the Textarea component using the `icon` prop. This example adds a search icon, sets the size to 'md', and uses the 'outline' variant.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_8

LANGUAGE: Vue
CODE:
```
<UTextarea icon="i-lucide-search" size="md" variant="outline" placeholder="Search..." :rows="1" />
```

----------------------------------------

TITLE: Setting Placeholder Text for Select - Nuxt UI
DESCRIPTION: Illustrates how to add a placeholder text to the `USelect` component using the `placeholder` prop, which is displayed when no item is selected.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#_snippet_6

LANGUAGE: Vue
CODE:
```
<template>
  <USelect
    placeholder="Select status"
    :items="items"
    class="w-48"
  />
</template>

<script setup>
const items = ['Backlog', 'Todo', 'In Progress', 'Done']
</script>
```

----------------------------------------

TITLE: Disabled
DESCRIPTION: Use the `disabled` prop to disable the CheckboxGroup.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_9

LANGUAGE: yaml
CODE:
```
prettier: true
ignore:
  - defaultValue
  - items
external:
  - items
externalTypes:
  - CheckboxGroupItem[]
props:
  disabled: true
  defaultValue:
    - 'System'
  items:
    - 'System'
    - 'Light'
    - 'Dark'
```

----------------------------------------

TITLE: Configuring Link Component Tag
DESCRIPTION: Demonstrates how to configure the `Link` component to render as a `<button>` when no `to` prop is provided, using the `as` prop. This allows the component to function as a button while maintaining its link-like API.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/link.md#_snippet_0

LANGUAGE: YAML
CODE:
```
props:
  to: ''
  as: 'button'
slots:
  default: Link
```

----------------------------------------

TITLE: Updating Overlay Instance Props with patch (Vue)
DESCRIPTION: Illustrates creating an overlay instance with initial props, opening it, and subsequently updating the props of the currently open overlay component using the instance's `patch` method.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-overlay.md#_snippet_2

LANGUAGE: typescript
CODE:
```
const overlay = useOverlay()

const modal = overlay.create(MyModal, {
  title: 'Welcome'
})

function openModal() {
  modal.open()
}

function updateModalTitle() {
  modal.patch({ title: 'Updated Title' })
}
```

----------------------------------------

TITLE: Grouping InputMenu Items with Nested Arrays - Vue
DESCRIPTION: This snippet illustrates how to group `InputMenu` items by providing an array of arrays to the `items` prop. Each inner array represents a distinct group of items, which will be visually separated in the menu. The `modelValue` is set to 'Apple' as the initial selection.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#_snippet_4

LANGUAGE: Vue
CODE:
```
<InputMenu :model-value="'Apple'" :items="[['Apple', 'Banana', 'Blueberry', 'Grapes', 'Pineapple'], ['Aubergine', 'Broccoli', 'Carrot', 'Courgette', 'Leek']]" />
```

----------------------------------------

TITLE: Configuring Items Per Page in Nuxt UI Pagination (Vue)
DESCRIPTION: This snippet shows how to set the `items-per-page` prop to control how many items are displayed on each page. The default value is `10`. This prop directly influences the total number of pages calculated by the component.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UPagination :page="5" :items-per-page="20" :total="100" />
```

----------------------------------------

TITLE: Setting InputMenu Placeholder Text - Vue
DESCRIPTION: This snippet illustrates how to set a placeholder text for the `InputMenu` using the `placeholder` prop. The text 'Select status' will be displayed when the input is empty and not focused. This provides a helpful hint to the user about the expected input.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#_snippet_8

LANGUAGE: Vue
CODE:
```
<InputMenu placeholder="Select status" :items="['Backlog', 'Todo', 'In Progress', 'Done']" />
```

----------------------------------------

TITLE: Customizing Container Width in main.css (Nuxt UI Pro)
DESCRIPTION: Shows how to customize the `--ui-container` CSS variable in `app/assets/css/main.css` for Nuxt UI Pro, similar to the standard Nuxt UI customization.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_32

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui-pro";

@theme {
  --container-8xl: 90rem;
}

:root {
  --ui-container: var(--container-8xl);
}
```

----------------------------------------

TITLE: Using CheckboxGroup with Object Items (Vue)
DESCRIPTION: Shows how to provide items as an array of objects, including `label`, `description`, and `value` properties, and bind the selected values using `v-model`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<script setup>
const modelValue = ref(['system'])
const items = [
  { label: 'System', description: 'This is the first option.', value: 'system' },
  { label: 'Light', description: 'This is the second option.', value: 'light' },
  { label: 'Dark', description: 'This is the third option.', value: 'dark' }
]
</script>

<template>
  <UCheckboxGroup v-model="modelValue" :items="items" />
</template>
```

----------------------------------------

TITLE: Setting UStepper Color (Vue)
DESCRIPTION: Shows how to change the color of the `UStepper` component using the `color` prop. This example sets the color to 'neutral' while also providing the required `items` and a `class` for styling.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/stepper.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UStepper color="neutral" :items="[{ title: 'Address', description: 'Add your address here', icon: 'i-lucide-house' }, { title: 'Shipping', description: 'Set your preferred shipping method', icon: 'i-lucide-truck' }, { title: 'Checkout', description: 'Confirm your order' }]" class="w-full" />
```

----------------------------------------

TITLE: Setting ButtonGroup Size - Vue
DESCRIPTION: This example illustrates the use of the `size` prop on the `ButtonGroup` component. By setting `size="xl"`, all nested `UButton` components automatically inherit the specified size, ensuring consistent styling across the group.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button-group.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UButton color="neutral" variant="subtle" label="Button" />
    <UButton color="neutral" variant="outline" icon="i-lucide-chevron-down" />
```

----------------------------------------

TITLE: Customizing Progress Bar Color - Nuxt UI - Vue.js
DESCRIPTION: This example shows how to change the visual color of the Progress bar using the `color` prop. The color is set to `neutral`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#_snippet_7

LANGUAGE: Vue.js
CODE:
```
<UProgress color="neutral" />
```

----------------------------------------

TITLE: Changing Button Color - Vue
DESCRIPTION: Shows how to apply a specific color theme to the UButton component using the `color` prop, in this case, setting it to 'neutral'.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UButton color="neutral">Button</UButton>
```

----------------------------------------

TITLE: Displaying Fallback Text in Nuxt UI Avatar (Vue)
DESCRIPTION: Demonstrates how to use the `text` prop to display custom fallback text inside the Nuxt UI Avatar component. This is useful for displaying short labels or indicators when an image is not present.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<UAvatar text="+1" size="md" />
```

----------------------------------------

TITLE: Setting Alert Title in Nuxt UI
DESCRIPTION: This snippet demonstrates how to set the title of the UAlert component using the `title` prop. The title provides a concise heading for the alert message.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/alert.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UAlert title="Heads up!" />
```

----------------------------------------

TITLE: Setting Static Locale with Nuxt UI (Vue)
DESCRIPTION: This snippet demonstrates how to set a static locale for your Nuxt application using the `UApp` component and a pre-defined locale object from `@nuxt/ui/locale`. It imports the `fr` (French) locale and binds it to the `locale` prop of `UApp` to apply global internationalization settings.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
import { fr } from '@nuxt/ui/locale'
</script>

<template>
  <UApp :locale="fr">
    <NuxtPage />
  </UApp>
</template>
```

----------------------------------------

TITLE: Adding Help Message Nuxt FormField Vue Template
DESCRIPTION: Shows how to add a detailed help message below the form control using the `help` prop. This provides guidance or constraints for the input value, wrapping a full-width `UInput`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#_snippet_4

LANGUAGE: Vue Template
CODE:
```
<UInput placeholder="Enter your email" class="w-full" />
```

----------------------------------------

TITLE: Setting Slide-in Side for Nuxt UI Slideover (Vue/HTML)
DESCRIPTION: This snippet illustrates how to control the slide-in direction of the `USlideover` component using the `side` prop. By default, it slides in from the `right`, but this example changes it to `left`, demonstrating flexibility in positioning. The `UButton` opens the slideover, and content is in the `#body` slot.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_5

LANGUAGE: Vue
CODE:
```
<USlideover side="left" title="Slideover with side">
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" />
  </template>
  <template #body>
    <Placeholder class="h-full min-h-48" />
  </template>
</USlideover>
```

----------------------------------------

TITLE: Adding a Label to the Switch (Vue)
DESCRIPTION: This snippet illustrates how to add a descriptive label to the Switch component using the `label` prop. The label text 'Check me' will be displayed next to the switch.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<template>
  <U-Switch label="Check me" />
</template>
```

----------------------------------------

TITLE: Adding Icon to Badge in Nuxt UI
DESCRIPTION: Shows how to include an icon (`i-lucide-rocket`) within the Nuxt UI Badge component using the `icon` prop, along with 'md' size, 'primary' color, and 'solid' variant.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#_snippet_5

LANGUAGE: Vue
CODE:
```
<UBadge icon="i-lucide-rocket" size="md" color="primary" variant="solid">Badge</UBadge>
```

----------------------------------------

TITLE: Setting Numeric Maximum Value for Progress - Nuxt UI - Vue.js
DESCRIPTION: This example shows how to define a numeric maximum value for the Progress component using the `max` prop. The progress is set to `3` out of a maximum of `4`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#_snippet_1

LANGUAGE: Vue.js
CODE:
```
<UProgress :model-value="3" :max="4" />
```

----------------------------------------

TITLE: Controlling Nuxt UI Drawer Direction
DESCRIPTION: This snippet shows how to change the slide-in direction of the Nuxt UI Drawer using the `direction` prop. It sets the drawer to open from the 'right', with a UButton trigger and content in the #content slot.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/drawer.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<template>
  <UDrawer direction="right">
    <template #default>
      <UButton label="Open" color="neutral" variant="subtle" trailing-icon="i-lucide-chevron-up" />
    </template>
    <template #content>
      <Placeholder class="min-w-96 min-h-96 size-full m-4" />
    </template>
  </UDrawer>
</template>
```

----------------------------------------

TITLE: Basic Usage of Nuxt UI Chip (Vue/HTML)
DESCRIPTION: Demonstrates the fundamental usage of the Nuxt UI Chip component by wrapping a `UButton`. This snippet shows how to display a simple indicator on a button, using default Chip properties.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/chip.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UChip>
  <UButton icon="i-lucide-mail" color="neutral" variant="subtle" />
</UChip>
```

----------------------------------------

TITLE: Defining Custom Locale with Nuxt UI (Vue)
DESCRIPTION: This snippet illustrates how to create a custom locale object using `defineLocale` from `@nuxt/ui`. It defines a locale with a name, code, direction, and an empty `messages` object, which can then be passed to the `locale` prop of the `UApp` component for custom internationalization.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#_snippet_2

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
import type { Messages } from '@nuxt/ui'

const locale = defineLocale<Messages>({
  name: 'My custom locale',
  code: 'en',
  dir: 'ltr',
  messages: {
    // implement pairs
  }
})
</script>

<template>
  <UApp :locale="locale">
    <NuxtPage />
  </UApp>
</template>
```

----------------------------------------

TITLE: Setting Tooltip Text with `text` Prop (HTML/Vue)
DESCRIPTION: Demonstrates how to set the text content of the Tooltip component using the `text` prop. The example shows a `UButton` component within the default slot, which will trigger the tooltip on hover.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tooltip.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<UTooltip text="Open on GitHub">
  <UButton label="Open" color="neutral" variant="subtle" />
</UTooltip>
```

----------------------------------------

TITLE: Using UButton as Default Trigger - DropdownMenu - Vue
DESCRIPTION: Demonstrates placing a UButton component in the default slot of the DropdownMenu, serving as the interactive element that opens the menu.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/dropdown-menu.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UButton icon="i-lucide-menu" color="neutral" variant="outline" />
```

----------------------------------------

TITLE: Access UStepper Instance with useTemplateRef (Vue)
DESCRIPTION: Demonstrates how to obtain a typed reference to the UStepper component instance using the `useTemplateRef` helper in a Vue 3 `<script setup>` block with TypeScript. This allows programmatic access to the component's exposed methods and properties like `next`, `prev`, `hasNext`, and `hasPrev`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/stepper.md#_snippet_5

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
const stepper = useTemplateRef('stepper')
</script>

<template>
  <UStepper ref="stepper" />
</template>
```

----------------------------------------

TITLE: Configuring Nuxt UI Navigation Menu Tooltips (YAML)
DESCRIPTION: This configuration demonstrates how to set up a `NavigationMenu` in Nuxt UI with tooltips enabled. It shows how to define menu items, including nested children, and how to apply tooltips globally or override them on specific items, such as the 'GitHub' link. The menu is set to `vertical` orientation and `collapsed`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#_snippet_10

LANGUAGE: YAML
CODE:
```
---
collapse: true
ignore:
  - items
  - orientation
  - class
external:
  - items
externalTypes:
  - NavigationMenuItem[][]
items:
  tooltip:
    - true
    - false
props:
  tooltip: true
  collapsed: true
  orientation: 'vertical'
  items:
    - - label: Links
        type: 'label'
      - label: Guide
        icon: i-lucide-book-open
        children:
          - label: Introduction
            description: Fully styled and customizable components for Nuxt.
            icon: i-lucide-house
          - label: Installation
            description: Learn how to install and configure Nuxt UI in your application.
            icon: i-lucide-cloud-download
          - label: 'Icons'
            icon: 'i-lucide-smile'
            description: 'You have nothing to do, @nuxt/icon will handle it automatically.'
          - label: 'Colors'
            icon: 'i-lucide-swatch-book'
            description: 'Choose a primary and a neutral color from your Tailwind CSS theme.'
          - label: 'Theme'
            icon: 'i-lucide-cog'
            description: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'
      - label: Composables
        icon: i-lucide-database
        children:
          - label: defineShortcuts
            icon: i-lucide-file-text
            description: Define shortcuts for your application.
            to: /composables/define-shortcuts
          - label: useOverlay
            icon: i-lucide-file-text
            description: Display a modal/slideover within your application.
            to: /composables/use-overlay
          - label: useToast
            icon: i-lucide-file-text
            description: Display a toast within your application.
            to: /composables/use-toast
      - label: Components
        icon: i-lucide-box
        to: /components
        active: true
        children:
          - label: Link
            icon: i-lucide-file-text
            description: Use NuxtLink with superpowers.
            to: /components/link
          - label: Modal
            icon: i-lucide-file-text
            description: Display a modal within your application.
            to: /components/modal
          - label: NavigationMenu
            icon: i-lucide-file-text
            description: Display a list of links.
            to: /components/navigation-menu
          - label: Pagination
            icon: i-lucide-file-text
            description: Display a list of pages.
            to: /components/pagination
          - label: Popover
            icon: i-lucide-file-text
            description: Display a non-modal dialog that floats around a trigger element.
            to: /components/popover
          - label: Progress
            icon: i-lucide-file-text
            description: Show a horizontal bar to indicate task progression.
            to: /components/progress
    - - label: GitHub
        icon: i-simple-icons-github
        badge: 3.8k
        to: https://github.com/nuxt/ui
        target: _blank
        tooltip:
          text: 'Open on GitHub'
          kbds:
            - 3.8k
      - label: Help
        icon: i-lucide-circle-help
        disabled: true
---
```

----------------------------------------

TITLE: Using Custom Local Icons in Vue Template
DESCRIPTION: This Vue template snippet shows how to use an icon from a custom local collection that has been configured in `nuxt.config.ts`. The `UIcon` component's `name` prop uses the defined `prefix` (e.g., 'custom') followed by the icon's filename (e.g., 'add').
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/1.nuxt.md#_snippet_5

LANGUAGE: vue
CODE:
```
<template>
  <UIcon name="i-custom-add" />
</template>
```

----------------------------------------

TITLE: Configuring InputMenu Items with Types (Label, Separator) in Vue
DESCRIPTION: This example shows how to structure items in the InputMenu using the `type` property to include `label` and `separator` elements. This allows for better organization and visual grouping of options within the menu. The `modelValue` is set to 'Apple' as a default selection.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UInputMenu
  model-value="Apple"
  :items="[
    { type: 'label', label: 'Fruits' },
    'Apple',
    'Banana',
    'Blueberry',
    'Grapes',
    'Pineapple',
    { type: 'separator' },
    { type: 'label', label: 'Vegetables' },
    'Aubergine',
    'Broccoli',
    'Carrot',
    'Courgette',
    'Leek'
  ]"
/>
```

----------------------------------------

TITLE: Using UStepper with Items Prop (Vue)
DESCRIPTION: Demonstrates how to use the `UStepper` component by providing an array of item objects to the `items` prop. Each item object defines the title, description, and icon for a step. The `class` prop is used for styling.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/stepper.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UStepper :items="[{ title: 'Address', description: 'Add your address here', icon: 'i-lucide-house' }, { title: 'Shipping', description: 'Set your preferred shipping method', icon: 'i-lucide-truck' }, { title: 'Checkout', description: 'Confirm your order' }]" class="w-full" />
```

----------------------------------------

TITLE: Custom Local Icon Collection Directory Structure
DESCRIPTION: This snippet illustrates the recommended directory structure for organizing custom SVG icon files within your Nuxt project. Placing SVG files under a designated folder like `./assets/icons` allows them to be easily configured as a custom Iconify collection.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/1.nuxt.md#_snippet_3

LANGUAGE: bash
CODE:
```
assets/icons
├── add.svg
└── remove.svg
```

----------------------------------------

TITLE: Installing Nuxt I18n Module (bun)
DESCRIPTION: This command installs the `@nuxtjs/i18n` package using bun, which is required to enable dynamic language switching and advanced internationalization features in a Nuxt application. It adds the module to the project's dependencies.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#_snippet_7

LANGUAGE: bash
CODE:
```
bun add @nuxtjs/i18n
```

----------------------------------------

TITLE: Disabling Calendar Interaction (Vue)
DESCRIPTION: Illustrates how to completely disable user interaction with the calendar component by setting the `disabled` prop to `true`. When disabled, the calendar will not respond to clicks or selections.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#_snippet_6

LANGUAGE: Vue
CODE:
```
<UCalendar disabled />
```

----------------------------------------

TITLE: Disabling Nuxt UI Collapsible
DESCRIPTION: Demonstrates how to use the `disabled` prop to prevent the UCollapsible component from being toggled. When `disabled` is `true`, the trigger button will not open or close the content, making the collapsible element unresponsive.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/collapsible.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UCollapsible :disabled="true" class="flex flex-col gap-2 w-48">
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" trailing-icon="i-lucide-chevron-down" block />
  </template>
  <template #content>
    <Placeholder class="h-48" />
  </template>
</UCollapsible>
```

----------------------------------------

TITLE: Using Select with Grouped Items - Nuxt UI
DESCRIPTION: Shows how to provide grouped options to the `USelect` component by passing an array of arrays to the `items` prop, creating visually separated groups in the dropdown.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<template>
  <USelect
    v-model="modelValue"
    :items="items"
    class="w-48"
  />
</template>

<script setup>
import { ref } from 'vue'

const modelValue = ref('Apple')
const items = [
  ['Apple', 'Banana', 'Blueberry', 'Grapes', 'Pineapple'],
  ['Aubergine', 'Broccoli', 'Carrot', 'Courgette', 'Leek']
]
</script>
```

----------------------------------------

TITLE: Preventing Tabs Content Unmount (Vue)
DESCRIPTION: Illustrates how to keep tab panel content mounted in the DOM even when the tab is not active by setting the unmountOnHide prop to false.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tabs.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UTabs
  :unmount-on-hide="false"
  :items="[
    { label: 'Account', icon: 'i-lucide-user', content: 'This is the account content.' },
    { label: 'Password', icon: 'i-lucide-lock', content: 'This is the password content.' }
  ]"
  class="w-full"
/>
```

----------------------------------------

TITLE: Disabling UStepper Navigation (Vue)
DESCRIPTION: Demonstrates how to disable user navigation between steps in the `UStepper` component using the `disabled` prop. When `disabled` is true, clicking on steps does not change the active step. The `items` prop is also included.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/stepper.md#_snippet_4

LANGUAGE: Vue
CODE:
```
<UStepper :disabled="true" :items="[{ title: 'Address', description: 'Add your address here', icon: 'i-lucide-house' }, { title: 'Shipping', description: 'Set your preferred shipping method', icon: 'i-lucide-truck' }, { title: 'Checkout', description: 'Confirm your order' }]" />
```

----------------------------------------

TITLE: Changing InputNumber Size
DESCRIPTION: Explains how to adjust the physical size of the InputNumber component using the size prop, which can accept values like 'sm', 'md', 'lg', 'xl', etc.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-number.md#_snippet_8

LANGUAGE: Vue
CODE:
```
<UInputNumber v-model="modelValue" size="xl" />
```

----------------------------------------

TITLE: Changing CheckboxGroup Size (Vue)
DESCRIPTION: Illustrates how to adjust the size of the CheckboxGroup using the `size` prop, providing options like 'sm', 'md', 'lg', or 'xl'.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_6

LANGUAGE: Vue
CODE:
```
<script setup>
const defaultValue = ['System']
const items = ['System', 'Light', 'Dark']
</script>

<template>
  <UCheckboxGroup size="xl" variant="list" :default-value="defaultValue" :items="items" />
</template>
```

----------------------------------------

TITLE: Adjusting Nuxt UI Chip Size (Vue/HTML)
DESCRIPTION: Shows how to modify the size of the Nuxt UI Chip using the `size` prop. This example sets the chip's size to '3xl', demonstrating how to control its visual dimensions.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/chip.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UChip size="3xl">
  <UButton icon="i-lucide-mail" color="neutral" variant="subtle" />
</UChip>
```

----------------------------------------

TITLE: Setting Initial ColorPicker Value with defaultValue (YAML)
DESCRIPTION: Illustrates setting an initial color for the ColorPicker using the `defaultValue` prop. This is useful when the component's state doesn't need to be externally controlled, providing a starting value without reactive binding.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#_snippet_1

LANGUAGE: YAML
CODE:
```
props:
  defaultValue: '#00BCD4'
```

----------------------------------------

TITLE: Setting UStepper Orientation (Vue)
DESCRIPTION: Shows how to change the layout orientation of the `UStepper` component using the `orientation` prop. This example sets the orientation to 'vertical' and includes the required `items` and `class` props.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/stepper.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<UStepper orientation="vertical" :items="[{ title: 'Address', description: 'Add your address here', icon: 'i-lucide-house' }, { title: 'Shipping', description: 'Set your preferred shipping method', icon: 'i-lucide-truck' }, { title: 'Checkout', description: 'Confirm your order' }]" class="w-full" />
```

----------------------------------------

TITLE: Basic Usage of AvatarGroup in Vue
DESCRIPTION: Demonstrates the basic usage of the `UAvatarGroup` component by wrapping multiple `UAvatar` components to stack them visually. This snippet shows how to display a group of avatars, which are typically enclosed within a `<UAvatarGroup>` tag.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar-group.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UAvatar src="https://github.com/benjamincanac.png" alt="Benjamin Canac" />
<UAvatar src="https://github.com/romhml.png" alt="Romain Hamel" />
<UAvatar src="https://github.com/noook.png" alt="Neil Richter" />
```

----------------------------------------

TITLE: Disabling Color Mode Plugin in Nuxt UI (TypeScript)
DESCRIPTION: This configuration snippet for `vite.config.ts` shows how to disable the automatic registration of the color mode plugin when using `@nuxt/ui`. By setting `colorMode: false` within the `ui` plugin options, developers can prevent Nuxt UI from managing the color mode, allowing for custom or alternative theme management solutions.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/6.color-mode/2.vue.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui({
      colorMode: false
    })
  ]
})
```

----------------------------------------

TITLE: Configuring Collapsed Vertical NavigationMenu in Nuxt UI (Vue)
DESCRIPTION: Demonstrates how to implement a collapsed `UNavigationMenu` component in Nuxt UI with a vertical orientation. It showcases the use of the `collapsed` prop set to `true`, along with `tooltip` and `popover` props set to `false`. The snippet also provides a comprehensive `items` array structure, including nested children, icons, descriptions, and external links, suitable for a sidebar navigation.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<script setup>
const items = [
  [
    { label: 'Links', type: 'label' },
    {
      label: 'Guide',
      icon: 'i-lucide-book-open',
      children: [
        { label: 'Introduction', description: 'Fully styled and customizable components for Nuxt.', icon: 'i-lucide-house' },
        { label: 'Installation', description: 'Learn how to install and configure Nuxt UI in your application.', icon: 'i-lucide-cloud-download' },
        { label: 'Icons', icon: 'i-lucide-smile', description: 'You have nothing to do, @nuxt/icon will handle it automatically.' },
        { label: 'Colors', icon: 'i-lucide-swatch-book', description: 'Choose a primary and a neutral color from your Tailwind CSS theme.' },
        { label: 'Theme', icon: 'i-lucide-cog', description: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.' }
      ]
    },
    {
      label: 'Composables',
      icon: 'i-lucide-database',
      children: [
        { label: 'defineShortcuts', icon: 'i-lucide-file-text', description: 'Define shortcuts for your application.', to: '/composables/define-shortcuts' },
        { label: 'useOverlay', icon: 'i-lucide-file-text', description: 'Display a modal/slideover within your application.', to: '/composables/use-overlay' },
        { label: 'useToast', icon: 'i-lucide-file-text', description: 'Display a toast within your application.', to: '/composables/use-toast' }
      ]
    },
    {
      label: 'Components',
      icon: 'i-lucide-box',
      to: '/components',
      active: true,
      children: [
        { label: 'Link', icon: 'i-lucide-file-text', description: 'Use NuxtLink with superpowers.', to: '/components/link' },
        { label: 'Modal', icon: 'i-lucide-file-text', description: 'Display a modal within your application.', to: '/components/modal' },
        { label: 'NavigationMenu', icon: 'i-lucide-file-text', description: 'Display a list of links.', to: '/components/navigation-menu' },
        { label: 'Pagination', icon: 'i-lucide-file-text', description: 'Display a list of pages.', to: '/components/pagination' },
        { label: 'Popover', icon: 'i-lucide-file-text', description: 'Display a non-modal dialog that floats around a trigger element.', to: '/components/popover' },
        { label: 'Progress', icon: 'i-lucide-file-text', description: 'Show a horizontal bar to indicate task progression.', to: '/components/progress' }
      ]
    }
  ],
  [
    { label: 'GitHub', icon: 'i-simple-icons-github', badge: '3.8k', to: 'https://github.com/nuxt/ui', target: '_blank' },
    { label: 'Help', icon: 'i-lucide-circle-help', disabled: true }
  ]
];
</script>

<template>
  <UNavigationMenu :collapsed="true" :tooltip="false" :popover="false" orientation="vertical" :items="items" />
</template>
```

----------------------------------------

TITLE: Disabling Color Mode Plugin in Nuxt UI Pro (TypeScript)
DESCRIPTION: This `vite.config.ts` snippet illustrates how to disable the default color mode plugin when working with `@nuxt/ui-pro`. Setting `colorMode: false` within the `uiPro` plugin options provides control over theme management, enabling developers to implement their own color mode logic or integrate with different styling systems.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/6.color-mode/2.vue.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import uiPro from '@nuxt/ui-pro/vite'

export default defineConfig({
  plugins: [
    vue(),
    uiPro({
      colorMode: false
    })
  ]
})
```

----------------------------------------

TITLE: Defining Shortcuts from Menu Items - Vue/TypeScript
DESCRIPTION: This example illustrates using the `extractShortcuts` utility function to automatically generate the shortcut configuration object required by `defineShortcuts`. It processes an array of items (like menu items) that contain `kbds` (keyboard shortcut definition) and `onSelect` (handler function) properties.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/define-shortcuts.md#_snippet_3

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
const items = [{
  label: 'Save',
  icon: 'i-lucide-file-down',
  kbds: ['meta', 'S'],
  onSelect() {
    save()
  }
}, {
  label: 'Copy',
  icon: 'i-lucide-copy',
  kbds: ['meta', 'C'],
  onSelect() {
    copy()
  }
}]

defineShortcuts(extractShortcuts(items))
</script>
```

----------------------------------------

TITLE: Disabling Nuxt UI Color Mode in Nuxt Config
DESCRIPTION: This configuration snippet shows how to disable the `@nuxtjs/color-mode` module, which is automatically registered by Nuxt UI. By setting `ui.colorMode` to `false` in `nuxt.config.ts`, developers can prevent Nuxt UI from managing color mode preferences. This is useful when custom color mode logic is preferred or the feature is not needed.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/6.color-mode/1.nuxt.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export default defineNuxtConfig({
  modules: ['@nuxt/ui'],
  css: ['~/assets/css/main.css'],
  ui: {
    colorMode: false
  }
})
```

----------------------------------------

TITLE: Displaying Edge Pages in Nuxt UI Pagination (Vue)
DESCRIPTION: This snippet demonstrates enabling the `show-edges` prop to always display the ellipsis, first, and last page links, even when they are not directly adjacent to the current page. The default value for this prop is `false`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<UPagination :page="5" :show-edges="true" :sibling-count="1" :total="100" />
```

----------------------------------------

TITLE: Changing ButtonGroup Orientation - Vue
DESCRIPTION: This snippet showcases the `orientation` prop, which controls the layout direction of elements within the `ButtonGroup`. Setting `orientation="vertical"` arranges the `UButton` components in a column, contrasting with the default horizontal layout.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button-group.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UButton color="neutral" variant="subtle" label="Submit" />
    <UButton color="neutral" variant="outline" label="Cancel" />
```

----------------------------------------

TITLE: Configuring Nuxt UI NavigationMenu with Arrow Prop (YAML)
DESCRIPTION: This YAML snippet demonstrates how to configure the `NavigationMenu` component in Nuxt UI, specifically enabling the `arrow` prop to display an animated arrow that follows the active menu item. It also includes a detailed `items` array defining the menu structure with nested children, labels, icons, and descriptions, along with a `class` for styling. The `collapse`, `ignore`, `external`, and `externalTypes` properties are part of the `::component-code` wrapper's configuration for rendering the example.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#_snippet_7

LANGUAGE: yaml
CODE:
```
collapse: true
ignore:
  - items
  - arrow
  - class
external:
  - items
externalTypes:
  - NavigationMenuItem[]
props:
  arrow: true
  items:
    - label: Guide
      icon: i-lucide-book-open
      to: /getting-started
      children:
        - label: Introduction
          description: Fully styled and customizable components for Nuxt.
          icon: i-lucide-house
        - label: Installation
          description: Learn how to install and configure Nuxt UI in your application.
          icon: i-lucide-cloud-download
        - label: 'Icons'
          icon: 'i-lucide-smile'
          description: 'You have nothing to do, @nuxt/icon will handle it automatically.'
        - label: 'Colors'
          icon: 'i-lucide-swatch-book'
          description: 'Choose a primary and a neutral color from your Tailwind CSS theme.'
        - label: 'Theme'
          icon: 'i-lucide-cog'
          description: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'
    - label: Composables
      icon: i-lucide-database
      to: /composables
      children:
        - label: defineShortcuts
          icon: i-lucide-file-text
          description: Define shortcuts for your application.
          to: /composables/define-shortcuts
        - label: useOverlay
          icon: i-lucide-file-text
          description: Display a modal/slideover within your application.
          to: /composables/use-overlay
        - label: useToast
          icon: i-lucide-file-text
          description: Display a toast within your application.
          to: /composables/use-toast
    - label: Components
      icon: i-lucide-box
      to: /components
      active: true
      children:
        - label: Link
          icon: i-lucide-file-text
          description: Use NuxtLink with superpowers.
          to: /components/link
        - label: Modal
          icon: i-lucide-file-text
          description: Display a modal within your application.
          to: /components/modal
        - label: NavigationMenu
          icon: i-lucide-file-text
          description: Display a list of links.
          to: /components/navigation-menu
        - label: Pagination
          icon: i-lucide-file-text
          description: Display a list of pages.
          to: /components/pagination
        - label: Popover
          icon: i-lucide-file-text
          description: Display a non-modal dialog that floats around a trigger element.
          to: /components/popover
        - label: Progress
          icon: i-lucide-file-text
          description: Show a horizontal bar to indicate task progression.
          to: /components/progress
  class: 'w-full justify-center'

```

----------------------------------------

TITLE: Adding an Icon to Nuxt UI Alert
DESCRIPTION: This snippet shows how to include an icon in the UAlert component using the `icon` prop. Icons can visually enhance the alert and convey its purpose quickly.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/alert.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UAlert title="Heads up!" description="
```

----------------------------------------

TITLE: Setting Min and Max Values for InputNumber
DESCRIPTION: Illustrates how to define the minimum and maximum allowed values for the InputNumber using the min and max props. Users will not be able to input values outside this range.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-number.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UInputNumber v-model="modelValue" :min="0" :max="10" />
```

----------------------------------------

TITLE: Disabling Modal Dismissal in Nuxt UI
DESCRIPTION: This snippet demonstrates how to prevent a Nuxt UI Modal from being closed by user interaction (clicking outside or pressing escape) by setting the `dismissible` prop to `false`. It illustrates the basic structure for an undismissible modal, including an open button and a placeholder for the body content.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_8

LANGUAGE: Vue
CODE:
```
:u-button{label="Open" color="neutral" variant="subtle"}

#body
:placeholder{class="h-48"}
```

----------------------------------------

TITLE: Accessing Embla API via useTemplateRef (Vue/TypeScript)
DESCRIPTION: This snippet demonstrates how to use Vue's `useTemplateRef` helper to obtain a reference to the `UCarousel` component instance, allowing access to its exposed properties such as `emblaRef` and `emblaApi` for programmatic control.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/carousel.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup lang="ts">
const carousel = useTemplateRef('carousel')
</script>

<template>
  <UCarousel ref="carousel" />
</template>
```

----------------------------------------

TITLE: Setting Step Value for InputNumber
DESCRIPTION: Explains how to set the increment or decrement step size for the InputNumber using the step prop. This affects how much the value changes when using the increment/decrement buttons.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-number.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<UInputNumber v-model="modelValue" :step="2" />
```

----------------------------------------

TITLE: Disabling the Slider
DESCRIPTION: Shows how to disable user interaction with the Slider using the `disabled` prop.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#_snippet_10

LANGUAGE: html
CODE:
```
<USlider :default-value="50" disabled />
```

----------------------------------------

TITLE: Setting RadioGroup Legend
DESCRIPTION: Demonstrates setting the `legend` prop to provide a descriptive title for the `RadioGroup`. Uses a simple array of strings for `items` and sets a `defaultValue`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_3

LANGUAGE: yaml
CODE:
```
legend: 'Theme'
defaultValue: 'System'
items:
  - 'System'
  - 'Light'
  - 'Dark'
```

----------------------------------------

TITLE: Adding Hint Nuxt FormField Vue Template
DESCRIPTION: Explains how to display a short hint message next to the label using the `hint` prop. This is often used for brief notes like "Optional". The example wraps a basic `UInput`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#_snippet_3

LANGUAGE: Vue Template
CODE:
```
<UInput placeholder="Enter your email" />
```

----------------------------------------

TITLE: Setting Indeterminate Checkbox State (Vue)
DESCRIPTION: Shows how to set the Checkbox to an indeterminate state using the `default-value` prop with the string value 'indeterminate'. This state visually indicates a mixed or partially checked condition.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UCheckbox default-value="indeterminate" />
```

----------------------------------------

TITLE: Using Default Slot with Kbd (YAML)
DESCRIPTION: Demonstrates how to set the value displayed by the Kbd component using the default slot.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/kbd.md#_snippet_0

LANGUAGE: YAML
CODE:
```
slots:
  default: K
```

----------------------------------------

TITLE: Changing CheckboxGroup Variant (Vue)
DESCRIPTION: Shows how to change the visual style of the CheckboxGroup using the `variant` prop, such as 'list', 'card', or 'table'.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_5

LANGUAGE: Vue
CODE:
```
<script setup>
const defaultValue = ['System']
const items = ['System', 'Light', 'Dark']
</script>

<template>
  <UCheckboxGroup color="primary" variant="card" :default-value="defaultValue" :items="items" />
</template>
```

----------------------------------------

TITLE: Changing InputMenu Visual Variant - Vue
DESCRIPTION: This snippet shows how to change the visual variant of the `InputMenu` using the `variant` prop, set to 'subtle'. The `color` is 'neutral' and `highlight` is `false`. This prop allows for different stylistic appearances of the input field, such as 'outline', 'solid', or 'subtle', to match design system requirements.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#_snippet_12

LANGUAGE: Vue
CODE:
```
<InputMenu :model-value="'Backlog'" color="neutral" variant="subtle" :highlight="false" :items="['Backlog', 'Todo', 'In Progress', 'Done']" />
```

----------------------------------------

TITLE: Changing PinInput Type to Number in Vue
DESCRIPTION: This snippet demonstrates changing the input type of the UPinInput component to 'number' using the `type` prop. When set to 'number', the input will only accept numeric characters.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#_snippet_2

LANGUAGE: vue-html
CODE:
```
<template>
  <UPinInput type="number" />
</template>
```

----------------------------------------

TITLE: Using UButton Trigger with Content Props - DropdownMenu - Vue
DESCRIPTION: Shows a UButton in the default slot, illustrating the trigger element when discussing the `content` prop for controlling the dropdown's position and alignment.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/dropdown-menu.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UButton label="Open" icon="i-lucide-menu" color="neutral" variant="outline" />
```

----------------------------------------

TITLE: Defining Multiple Shortcut Types - Vue/TypeScript
DESCRIPTION: This example shows how to define multiple shortcuts using different syntax types supported by `defineShortcuts`. It includes a single key (`?`), a key combination (`meta_k`), and a key sequence (`g-d`), each linked to a distinct handler function.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/define-shortcuts.md#_snippet_1

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
defineShortcuts({
  '?': () => openHelpModal(),
  'meta_k': () => openCommandPalette(),
  'g-d': () => navigateToDashboard()
})
</script>
```

----------------------------------------

TITLE: Setting AvatarGroup Size in Vue
DESCRIPTION: Illustrates how to adjust the size of avatars within an `UAvatarGroup` using the `size` prop. This example sets the size to 'xl', affecting all nested `UAvatar` components when rendered inside the `UAvatarGroup` component.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar-group.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UAvatar src="https://github.com/benjamincanac.png" alt="Benjamin Canac" />
<UAvatar src="https://github.com/romhml.png" alt="Romain Hamel" />
<UAvatar src="https://github.com/noook.png" alt="Neil Richter" />
```

----------------------------------------

TITLE: Displaying Fallback Icon in Nuxt UI Avatar (Vue)
DESCRIPTION: Shows how to display a fallback icon within the Nuxt UI Avatar component when no image is available. The `icon` prop accepts an icon string, which will be rendered using the component's internal icon system.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UAvatar icon="i-lucide-image" size="md" />
```

----------------------------------------

TITLE: Configuring Disabled RadioGroup - JavaScript Props
DESCRIPTION: This snippet demonstrates the configuration for a Nuxt UI RadioGroup component example, specifically setting the 'disabled' prop to true. It also includes the 'defaultValue' and the list of 'items' for the radio group.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
{
  "disabled": true,
  "defaultValue": "System",
  "items": [
    "System",
    "Light",
    "Dark"
  ]
}
```

----------------------------------------

TITLE: Setting UStepper Size (Vue)
DESCRIPTION: Illustrates how to adjust the size of the `UStepper` component using the `size` prop. This example sets the size to 'xl' and includes the necessary `items` and `class` props.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/stepper.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UStepper size="xl" :items="[{ title: 'Address', description: 'Add your address here', icon: 'i-lucide-house' }, { title: 'Shipping', description: 'Set your preferred shipping method', icon: 'i-lucide-truck' }, { title: 'Checkout', description: 'Confirm your order' }]" class="w-full" />
```

----------------------------------------

TITLE: Highlighting Active NavigationMenu Items in Nuxt UI (YAML)
DESCRIPTION: This snippet demonstrates how to use the `highlight` prop to add a border to the active item in a Nuxt UI `NavigationMenu` component. The `highlightColor` prop is used to specify the color of this border, defaulting to the component's `color` prop if not set. It also includes a `class` prop to apply a bottom border for horizontal orientation, which is not default behavior.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#_snippet_3

LANGUAGE: YAML
CODE:
```
highlight: true
highlightColor: 'primary'
orientation: 'horizontal'
items:
  - - label: Guide
        icon: i-lucide-book-open
        children:
          - label: Introduction
            description: Fully styled and customizable components for Nuxt.
            icon: i-lucide-house
          - label: Installation
            description: Learn how to install and configure Nuxt UI in your application.
            icon: i-lucide-cloud-download
          - label: 'Icons'
            icon: 'i-lucide-smile'
            description: 'You have nothing to do, @nuxt/icon will handle it automatically.'
          - label: 'Colors'
            icon: 'i-lucide-swatch-book'
            description: 'Choose a primary and a neutral color from your Tailwind CSS theme.'
          - label: 'Theme'
            icon: 'i-lucide-cog'
            description: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'
    - label: Composables
      icon: i-lucide-database
      children:
        - label: defineShortcuts
          icon: i-lucide-file-text
          description: Define shortcuts for your application.
          to: /composables/define-shortcuts
        - label: useOverlay
          icon: i-lucide-file-text
          description: Display a modal/slideover within your application.
          to: /composables/use-overlay
        - label: useToast
          icon: i-lucide-file-text
          description: Display a toast within your application.
          to: /composables/use-toast
    - label: Components
      icon: i-lucide-box
      to: /components
      active: true
      defaultOpen: true
      children:
        - label: Link
          icon: i-lucide-file-text
          description: Use NuxtLink with superpowers.
          to: /components/link
        - label: Modal
          icon: i-lucide-file-text
          description: Display a modal within your application.
          to: /components/modal
        - label: NavigationMenu
          icon: i-lucide-file-text
          description: Display a list of links.
          to: /components/navigation-menu
        - label: Pagination
          icon: i-lucide-file-text
          description: Display a list of pages.
          to: /components/pagination
        - label: Popover
          icon: i-lucide-file-text
          description: Display a non-modal dialog that floats around a trigger element.
          to: /components/popover
        - label: Progress
          icon: i-lucide-file-text
          description: Show a horizontal bar to indicate task progression.
          to: /components/progress
  - - label: GitHub
      icon: i-simple-icons-github
      badge: 3.8k
      to: https://github.com/nuxt/ui
      target: _blank
    - label: Help
      icon: i-lucide-circle-help
      disabled: true
class: 'data-[orientation=horizontal]:border-b border-default data-[orientation=horizontal]:w-full data-[orientation=vertical]:w-48'
```

----------------------------------------

TITLE: Using Alt Prop for Initials Fallback in Nuxt UI Avatar (Vue)
DESCRIPTION: Explains how the `alt` prop can be used to provide fallback initials for the Nuxt UI Avatar component when neither an icon nor text is explicitly provided. The `alt` prop is also passed directly to the underlying `<img>` element.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar.md#_snippet_4

LANGUAGE: Vue
CODE:
```
<UAvatar alt="Benjamin Canac" size="md" />
```

----------------------------------------

TITLE: Setting Default Value for PinInput in Vue
DESCRIPTION: This snippet shows how to set an initial value for the UPinInput using the `default-value` prop when state control via v-model is not required. The value is provided as an array of strings.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#_snippet_1

LANGUAGE: vue-html
CODE:
```
<template>
  <UPinInput :default-value="['1', '2', '3']" />
</template>
```

----------------------------------------

TITLE: Setting Initial Checkbox State with defaultValue (Vue)
DESCRIPTION: Illustrates how to set the initial checked state of the Checkbox using the `default-value` prop. This is useful when the checkbox state does not need to be controlled reactively via `v-model`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<UCheckbox :default-value="true" />
```

----------------------------------------

TITLE: Displaying Multiple Months (Vue)
DESCRIPTION: Shows how to configure the calendar to display multiple months simultaneously using the `numberOfMonths` prop. Setting this prop to a number greater than one will render that many consecutive months.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#_snippet_7

LANGUAGE: Vue
CODE:
```
<UCalendar :number-of-months="3" />
```

----------------------------------------

TITLE: Defining Custom Locale with Nuxt UI Pro (Vue)
DESCRIPTION: This snippet illustrates how to create a custom locale object using `defineLocale` from `@nuxt/ui-pro`. It defines a locale with a name, code, direction, and an empty `messages` object, which can then be passed to the `locale` prop of the `UApp` component for custom internationalization in Nuxt UI Pro.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#_snippet_3

LANGUAGE: vue
CODE:
```
<script setup lang="ts">
import type { Messages } from '@nuxt/ui-pro'

const locale = defineLocale<Messages>({
  name: 'My custom locale',
  code: 'en',
  dir: 'ltr',
  messages: {
    // implement pairs
  }
})
</script>

<template>
  <UApp :locale="locale">
    <NuxtPage />
  </UApp>
</template>
```

----------------------------------------

TITLE: Setting Slider Min and Max Values
DESCRIPTION: Illustrates how to define the minimum and maximum selectable values for the Slider using the `min` and `max` props.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#_snippet_2

LANGUAGE: html
CODE:
```
<USlider :min="0" :max="50" :default-value="50" />
```

----------------------------------------

TITLE: Enabling OTP Functionality in PinInput in Vue
DESCRIPTION: This snippet demonstrates enabling One-Time Password (OTP) functionality for the UPinInput using the `otp` prop. This feature assists mobile devices in automatically detecting and filling OTP codes from SMS or clipboard.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#_snippet_4

LANGUAGE: vue-html
CODE:
```
<template>
  <UPinInput otp />
</template>
```

----------------------------------------

TITLE: Defining UI Color Variables in CSS
DESCRIPTION: This CSS snippet defines various color variables using `--ui-color-*` variables, likely for use within a UI framework like Nuxt UI. It sets up standard color shades for error and neutral palettes.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_11

LANGUAGE: css
CODE:
```
--color-error-800: var(--ui-color-error-800);
  --color-error-900: var(--ui-color-error-900);
  --color-error-950: var(--ui-color-error-950);
  --color-neutral-50: var(--ui-color-neutral-50);
  --color-neutral-100: var(--ui-color-neutral-100);
  --color-neutral-200: var(--ui-color-neutral-200);
  --color-neutral-300: var(--ui-color-neutral-300);
  --color-neutral-400: var(--ui-color-neutral-400);
  --color-neutral-500: var(--ui-color-neutral-500);
  --color-neutral-600: var(--ui-color-neutral-600);
  --color-neutral-700: var(--ui-color-neutral-700);
  --color-neutral-800: var(--ui-color-neutral-800);
  --color-neutral-900: var(--ui-color-neutral-900);
  --color-neutral-950: var(--ui-color-neutral-950);
}
```

----------------------------------------

TITLE: Configuring ColorPicker for RGB Format (YAML)
DESCRIPTION: Shows how to configure the ColorPicker to accept and display colors in RGB format by setting the `format` prop to `rgb` and providing an RGB `modelValue`. This ensures color selection and display adhere to the RGB standard.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#_snippet_2

LANGUAGE: YAML
CODE:
```
props:
  format: rgb
  modelValue: 'rgb(0, 193, 106)'
```

----------------------------------------

TITLE: Setting Trailing Icon Position - Vue
DESCRIPTION: Demonstrates how to place an icon at the end of the button's label using the `trailingIcon` prop, useful for directional indicators.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button.md#_snippet_6

LANGUAGE: Vue
CODE:
```
<UButton trailingIcon="i-lucide-arrow-right" size="md">Button</UButton>
```

----------------------------------------

TITLE: Adjusting InputMenu Size - Vue
DESCRIPTION: This snippet demonstrates how to adjust the size of the `InputMenu` using the `size` prop, set to 'xl' for extra-large. This prop allows for scaling the component's visual dimensions to fit various layout needs, such as 'sm', 'md', 'lg', or 'xl'.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#_snippet_13

LANGUAGE: Vue
CODE:
```
<InputMenu :
```

----------------------------------------

TITLE: Adding Placeholder to PinInput in Vue
DESCRIPTION: This snippet demonstrates adding a placeholder character or text to the empty input fields of the UPinInput component using the `placeholder` prop.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#_snippet_6

LANGUAGE: vue-html
CODE:
```
<template>
  <UPinInput placeholder="○" />
</template>
```

----------------------------------------

TITLE: Configuring CommandPalette with User Groups (YAML)
DESCRIPTION: Demonstrates how to populate the CommandPalette with a list of user groups and their respective items, including avatars and suffixes. This setup allows for categorized search results based on predefined user data.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#_snippet_0

LANGUAGE: yaml
CODE:
```
modelValue: {}
autofocus: false
groups:
  - id: 'users'
    label: 'Users'
    items:
      - label: 'Benjamin Canac'
        suffix: 'benjamincanac'
        avatar:
          src: 'https://github.com/benjamincanac.png'
      - label: 'Sylvain Marroufin'
        suffix: 'smarroufin'
        avatar:
          src: 'https://github.com/smarroufin.png'
      - label: 'Sébastien Chopin'
        suffix: 'atinux'
        avatar:
          src: 'https://github.com/atinux.png'
      - label: 'Romain Hamel'
        suffix: 'romhml'
        avatar:
          src: 'https://github.com/romhml.png'
      - label: 'Haytham A. Salama'
        suffix: 'Haythamasalama'
        avatar:
          src: 'https://github.com/Haythamasalama.png'
      - label: 'Daniel Roe'
        suffix: 'danielroe'
        avatar:
          src: 'https://github.com/danielroe.png'
      - label: 'Neil Richter'
        suffix: 'noook'
        avatar:
          src: 'https://github.com/noook.png'
class: 'flex-1'
```

----------------------------------------

TITLE: Limiting Avatars in AvatarGroup with Max Prop in Vue
DESCRIPTION: Demonstrates using the `max` prop on `UAvatarGroup` to limit the number of visible avatars. When `max` is set, any additional avatars beyond the limit are represented by an '+X' indicator, as shown with `max: 2`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar-group.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UAvatar src="https://github.com/benjamincanac.png" alt="Benjamin Canac" />
<UAvatar src="https://github.com/romhml.png" alt="Romain Hamel" />
<UAvatar src="https://github.com/noook.png" alt="Neil Richter" />
```

----------------------------------------

TITLE: Customizing Container Width in main.css (Nuxt UI)
DESCRIPTION: Demonstrates how to override the default `--ui-container` CSS variable in `app/assets/css/main.css` to set a custom container width using a Tailwind theme variable.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_31

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "@nuxt/ui";

@theme {
  --container-8xl: 90rem;
}

:root {
  --ui-container: var(--container-8xl);
}
```

----------------------------------------

TITLE: Enabling Nuxt UI Inertia.js Compatibility
DESCRIPTION: This snippet demonstrates how to use the `inertia` option in `vite.config.ts` to enable compatibility with Inertia.js. When enabled, Nuxt UI components will automatically use Inertia's `InertiaLink` component instead of `RouterLink`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_16

LANGUAGE: TypeScript
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui({
      inertia: true
    })
  ]
})
```

----------------------------------------

TITLE: Setting CheckboxGroup Legend (Vue)
DESCRIPTION: Shows how to add a legend to the CheckboxGroup using the `legend` prop for better accessibility and context.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<script setup>
const defaultValue = ['System']
const items = ['System', 'Light', 'Dark']
</script>

<template>
  <UCheckboxGroup legend="Theme" :default-value="defaultValue" :items="items" />
</template>
```

----------------------------------------

TITLE: Defining Neutral Color Palette CSS Variables
DESCRIPTION: These CSS variables define the neutral color palette tokens for text, background, and border colors, providing distinct values for light and dark modes to ensure consistent styling.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_16

LANGUAGE: css
CODE:
```
:root {
  --ui-text-dimmed: var(--ui-color-neutral-400);
  --ui-text-muted: var(--ui-color-neutral-500);
  --ui-text-toned: var(--ui-color-neutral-600);
  --ui-text: var(--ui-color-neutral-700);
  --ui-text-highlighted: var(--ui-color-neutral-900);
  --ui-text-inverted: var(--color-white);

  --ui-bg: var(--color-white);
  --ui-bg-muted: var(--ui-color-neutral-50);
  --ui-bg-elevated: var(--ui-color-neutral-100);
  --ui-bg-accented: var(--ui-color-neutral-200);
  --ui-bg-inverted: var(--ui-color-neutral-900);

  --ui-border: var(--ui-color-neutral-200);
  --ui-border-muted: var(--ui-color-neutral-200);
  --ui-border-accented: var(--ui-color-neutral-300);
  --ui-border-inverted: var(--ui-color-neutral-900);
}
```

LANGUAGE: css
CODE:
```
.dark {
  --ui-text-dimmed: var(--ui-color-neutral-500);
  --ui-text-muted: var(--ui-color-neutral-400);
  --ui-text-toned: var(--ui-color-neutral-300);
  --ui-text: var(--ui-color-neutral-200);
  --ui-text-highlighted: var(--color-white);
  --ui-text-inverted: var(--ui-color-neutral-900);

  --ui-bg: var(--ui-color-neutral-900);
  --ui-bg-muted: var(--ui-color-neutral-800);
  --ui-bg-elevated: var(--ui-color-neutral-800);
  --ui-bg-accented: var(--ui-color-neutral-700);
  --ui-bg-inverted: var(--color-white);

  --ui-border: var(--ui-color-neutral-800);
  --ui-border-muted: var(--ui-color-neutral-700);
  --ui-border-accented: var(--ui-color-neutral-700);
  --ui-border-inverted: var(--color-white);
}
```

----------------------------------------

TITLE: Displaying Loading State on Switch (Vue)
DESCRIPTION: This snippet illustrates how to show a loading indicator on the Switch component using the `loading` prop. When `loading` is true, a spinner icon will be displayed, indicating an ongoing operation.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#_snippet_6

LANGUAGE: Vue
CODE:
```
<template>
  <U-Switch label="Check me" loading default-value />
</template>
```

----------------------------------------

TITLE: Controlling InputMenu Content Alignment and Side - Vue
DESCRIPTION: This snippet demonstrates using the `content` prop to control the rendering of the `InputMenu`'s dropdown content. It sets the `align` to 'center', `side` to 'bottom', and `sideOffset` to 8, affecting how the menu aligns relative to the input. This prop provides fine-grained control over the dropdown's positioning and appearance.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#_snippet_9

LANGUAGE: Vue
CODE:
```
<InputMenu :model-value="'Backlog'" :content="{ align: 'center', side: 'bottom', sideOffset: 8 }" :items="['Backlog', 'Todo', 'In Progress', 'Done']" />
```

----------------------------------------

TITLE: Demonstrating Nuxt UI Radius Classes - Vue
DESCRIPTION: A Vue template snippet showcasing how to use the standard Tailwind CSS rounded-* utility classes (rounded-xs through rounded-3xl) with Nuxt UI. These classes are mapped internally to values derived from the --ui-radius CSS variable.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_26

LANGUAGE: Vue
CODE:
```
<template>
  <div class="rounded-xs">xs</div>
  <div class="rounded-sm">sm</div>
  <div class="rounded-md">md</div>
  <div class="rounded-lg">lg</div>
  <div class="rounded-xl">xl</div>
  <div class="rounded-2xl">2xl</div>
  <div class="rounded-3xl">3xl</div>
</template>
```

----------------------------------------

TITLE: Enabling/Disabling Nuxt UI Component Transitions
DESCRIPTION: This snippet shows how to control transitions on Nuxt UI components using the `theme.transitions` option in `nuxt.config.ts`. Setting it to `false` disables transitions, which are enabled by default and add `transition-colors` class.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#_snippet_11

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  modules: ['@nuxt/ui'],
  css: ['~/assets/css/main.css'],
  ui: {
    theme: {
      transitions: false
    }
  }
})
```

----------------------------------------

TITLE: Setting Initial Switch Value with defaultValue (Vue)
DESCRIPTION: This snippet shows how to set the initial checked state of the Switch using the `default-value` prop when you don't need to control its state reactively. The Switch will start in the checked state.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#_snippet_1

LANGUAGE: Vue
CODE:
```
<template>
  <U-Switch default-value />
</template>
```

----------------------------------------

TITLE: Customizing Modal Close Button in Vue
DESCRIPTION: Demonstrates how to customize the appearance of the Modal's close button using the `close` prop, allowing properties from the Button component to be passed. This enables styling the close button to match specific design requirements. The modal opens with a button and displays content in the body slot.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<UButton label="Open" color="neutral" variant="subtle" />

<UModal title="Modal with close button" :close="{ color: 'primary', variant: 'outline', class: 'rounded-full' }">
  <template #body>
    <Placeholder class="h-48" />
  </template>
</UModal>
```

----------------------------------------

TITLE: Controlling Nuxt UI Component Transitions
DESCRIPTION: This snippet shows how to use the `theme.transitions` option in `vite.config.ts` to enable or disable transitions on Nuxt UI components. Setting it to `false` prevents the addition of the `transition-colors` class for hover/active states.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_15

LANGUAGE: TypeScript
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui({
      theme: {
        transitions: false
      }
    })
  ]
})
```

----------------------------------------

TITLE: Adding Required Indicator to Checkbox Label (Vue)
DESCRIPTION: Shows how to mark a Checkbox as required, which adds an asterisk next to its label. This is achieved by setting the `required` prop to `true`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_5

LANGUAGE: Vue
CODE:
```
<UCheckbox :required="true" label="Check me" />
```

----------------------------------------

TITLE: Generating Tailwind CSS Theme Variables from Neutral Tokens (SCSS)
DESCRIPTION: This SCSS snippet demonstrates how the neutral color palette CSS variables are mapped within a Tailwind CSS `@theme` block to create corresponding utility classes like `text-color-dimmed` or `background-color-default`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_20

LANGUAGE: scss
CODE:
```
@theme default {
  --text-color-dimmed: var(--ui-text-dimmed);
  --text-color-muted: var(--ui-text-muted);
  --text-color-toned: var(--ui-text-toned);
  --text-color-default: var(--ui-text);
  --text-color-highlighted: var(--ui-text-highlighted);
  --text-color-inverted: var(--ui-text-inverted);
  --background-color-default: var(--ui-bg);
  --background-color-muted: var(--ui-bg-muted);
  --background-color-elevated: var(--ui-bg-elevated);
  --background-color-accented: var(--ui-bg-accented);
  --background-color-inverted: var(--ui-bg-inverted);
  --background-color-border: var(--ui-border);
  --border-color-default: var(--ui-border);
  --border-color-muted: var(--ui-border-muted);
  --border-color-accented: var(--ui-border-accented);
  --border-color-inverted: var(--ui-border-inverted);
  --border-color-bg: var(--ui-bg);
  --ring-color-default: var(--ui-border);
  --ring-color-muted: var(--ui-border-muted);
}
```

----------------------------------------

TITLE: Displaying Disabled ContextMenu Trigger HTML
DESCRIPTION: Provides the HTML structure for the element that triggers the ContextMenu, demonstrating the visual cue for a disabled state when the `disabled` prop is used on the component.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/context-menu.md#_snippet_2

LANGUAGE: html
CODE:
```
<div class="flex items-center justify-center rounded-md border border-dashed border-accented text-sm aspect-video w-72">
  Right click here
</div>
```

----------------------------------------

TITLE: Applying Custom Class to Kbd (YAML)
DESCRIPTION: Shows how to apply custom CSS classes to the Kbd component using the `class` prop to override or add styles.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/kbd.md#_snippet_5

LANGUAGE: YAML
CODE:
```
props:
  class: 'font-bold rounded-full'
  variant: subtle
slots:
  default: K
```

----------------------------------------

TITLE: Adding Drawer Wrapper Directive in Vue
DESCRIPTION: Illustrates how to add the `data-vaul-drawer-wrapper` directive to a parent element in `app.vue` to enable the Drawer's background scaling functionality. This directive is crucial for the visual depth effect.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/drawer.md#_snippet_9

LANGUAGE: Vue
CODE:
```
<template>
  <UApp>
    <div class="bg-default" data-vaul-drawer-wrapper>
      <NuxtLayout>
        <NuxtPage />
      </NuxtLayout>
    </div>
  </UApp>
</template>
```

----------------------------------------

TITLE: Controlling Select Content Alignment - Nuxt UI
DESCRIPTION: Demonstrates how to customize the dropdown content's alignment and side using the `content` prop, allowing control over its positioning relative to the trigger.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#_snippet_7

LANGUAGE: Vue
CODE:
```
<template>
  <USelect
    v-model="modelValue"
    :items="items"
    :content="{ align: 'center', side: 'bottom', sideOffset: 8 }"
    class="w-48"
  />
</template>

<script setup>
import { ref } from 'vue'

const modelValue = ref('Backlog')
const items = ['Backlog', 'Todo', 'In Progress', 'Done']
</script>
```

----------------------------------------

TITLE: Disabling Textarea Input (Vue)
DESCRIPTION: Shows how to disable user interaction with the Textarea component using the `disabled` prop. When disabled, the input field cannot be edited or focused.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_13

LANGUAGE: Vue
CODE:
```
<UTextarea disabled placeholder="Type something..." />
```

----------------------------------------

TITLE: Installing Compodium Module for Nuxt DevTools (Bash)
DESCRIPTION: This command installs the `compodium` module into a Nuxt application. The `compodium` module enhances the Nuxt DevTools by providing a component inspector, live preview, and code generation capabilities for Nuxt UI components, significantly improving the development experience.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/1.index.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx nuxi module add compodium
```

----------------------------------------

TITLE: Setting Badge Label with Default Slot in Nuxt UI
DESCRIPTION: Demonstrates how to set the label of the Nuxt UI Badge component using its default slot. The text 'Badge' will be displayed.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<UBadge>Badge</UBadge>
```

----------------------------------------

TITLE: Changing Badge Color in Nuxt UI
DESCRIPTION: Shows how to change the color of the Nuxt UI Badge component to 'neutral' using the `color` prop, while setting its label via the default slot.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<UBadge color="neutral">Badge</UBadge>
```

----------------------------------------

TITLE: Setting ColorPicker Throttle Value (YAML)
DESCRIPTION: Explains how to use the `throttle` prop to control the update frequency of the ColorPicker's value. A `throttle` of 100 milliseconds is applied, along with an initial `modelValue`, preventing excessive updates during rapid color changes.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#_snippet_6

LANGUAGE: YAML
CODE:
```
props:
  throttle: 100
  modelValue: '#00C16A'
```

----------------------------------------

TITLE: Applying Base Body Styles in Nuxt UI - CSS
DESCRIPTION: Shows the default CSS applied by Nuxt UI to the <body> element. It uses Tailwind CSS @apply directive to set anti-aliasing, default text and background colors, and define light/dark color schemes based on the dark class.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_24

LANGUAGE: CSS
CODE:
```
body {
  @apply antialiased text-default bg-default scheme-light dark:scheme-dark;
}
```

----------------------------------------

TITLE: Indicating Required Switch with Asterisk (Vue)
DESCRIPTION: This snippet demonstrates how to mark the Switch as required using the `required` prop. An asterisk will be automatically added next to the label, visually indicating its mandatory nature.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<template>
  <U-Switch label="Check me" required />
</template>
```

----------------------------------------

TITLE: Configuring VSCode IntelliSense for Link Classes
DESCRIPTION: Provides the necessary VSCode settings to enable autocompletion for `active-class` and `inactive-class` attributes when working with the `Link` component, improving developer experience. This snippet should be added to your `.vscode/settings.json` file.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/link.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "tailwindCSS.classAttributes": [
    "active-class",
    "inactive-class"
  ]
}
```

----------------------------------------

TITLE: Controlling Tooltip Content Alignment and Side with `content` Prop (HTML/Vue)
DESCRIPTION: Explains how to customize the rendering of the Tooltip's content using the `content` prop, allowing control over alignment (`align`) and positioning (`side`) relative to the trigger element, along with an offset.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tooltip.md#_snippet_3

LANGUAGE: HTML
CODE:
```
<UTooltip :content="{ align: 'center', side: 'bottom', sideOffset: 8 }" text="Open on GitHub">
  <UButton label="Open" color="neutral" variant="subtle" />
</UTooltip>
```

----------------------------------------

TITLE: Changing Badge Variant in Nuxt UI
DESCRIPTION: Demonstrates how to apply an 'outline' variant to the Nuxt UI Badge component using the `variant` prop, in combination with a 'neutral' color and a label.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#_snippet_3

LANGUAGE: Vue
CODE:
```
<UBadge color="neutral" variant="outline">Badge</UBadge>
```

----------------------------------------

TITLE: Customizing InputNumber Color
DESCRIPTION: Shows how to change the color of the focus ring or other visual indicators of the InputNumber using the color and highlight props.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-number.md#_snippet_6

LANGUAGE: Vue
CODE:
```
<UInputNumber v-model="modelValue" color="neutral" :highlight="true" />
```

----------------------------------------

TITLE: Creating Icon-Only Button - Vue
DESCRIPTION: Illustrates how to create a button that only displays an icon by omitting the `label` prop or default slot, ideal for compact actions.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button.md#_snippet_7

LANGUAGE: Vue
CODE:
```
<UButton icon="i-lucide-search" size="md" color="primary" variant="solid" />
```

----------------------------------------

TITLE: Customizing Nuxt UI Component Prefix in vite.config.ts
DESCRIPTION: This TypeScript snippet shows how to customize the default component prefix (`U`) for Nuxt UI components by passing the `prefix` option to the Vite plugin. This allows you to use a different prefix like `Nuxt`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_11

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import ui from '@nuxt/ui/vite'

export default defineConfig({
  plugins: [
    vue(),
    ui({
      prefix: 'Nuxt'
    })
  ]
})
```

----------------------------------------

TITLE: Disabling Transition for Nuxt UI Slideover (Vue/HTML)
DESCRIPTION: This snippet shows how to disable the animation effect when the `USlideover` component opens or closes by setting the `transition` prop to `false`. This provides an instant appearance/disappearance, which might be preferred in certain UI contexts. The `UButton` opens the slideover, and content is in the `#body` slot.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_7

LANGUAGE: Vue
CODE:
```
<USlideover :transition="false" title="Slideover without transition">
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" />
  </template>
  <template #body>
    <Placeholder class="h-full" />
  </template>
</USlideover>
```

----------------------------------------

TITLE: Setting Active Control Color in Nuxt UI Pagination (Vue)
DESCRIPTION: This snippet shows how to use the `active-color` prop to define the color of the currently active pagination control. The default color is `primary`. Available options are similar to the `color` prop.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#_snippet_7

LANGUAGE: Vue
CODE:
```
<UPagination :page="5" active-color="neutral" :total="100" />
```

----------------------------------------

TITLE: Setting Inactive Control Variant in Nuxt UI Pagination (Vue)
DESCRIPTION: This snippet illustrates how to apply a `variant` to inactive pagination controls, such as `solid`, `outline`, `soft`, `subtle`, `ghost`, or `link`. The default variant is `outline`.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#_snippet_6

LANGUAGE: Vue
CODE:
```
<UPagination :page="5" color="neutral" variant="subtle" :total="100" />
```

----------------------------------------

TITLE: Disabling Overlay on Nuxt UI Drawer
DESCRIPTION: This snippet shows how to disable the background overlay that typically appears when the Nuxt UI Drawer is open, by setting the `overlay` prop to `false`. It includes a UButton trigger and content in the #content slot, demonstrating a drawer without an overlay.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/drawer.md#_snippet_7

LANGUAGE: Vue
CODE:
```
<template>
  <UDrawer :overlay="false">
    <template #default>
      <UButton label="Open" color="neutral" variant="subtle" trailing-icon="i-lucide-chevron-up" />
    </template>
    <template #content>
      <Placeholder class="h-48 m-4" />
    </template>
  </UDrawer>
</template>
```

----------------------------------------

TITLE: Controlling Overlay for Nuxt UI Slideover (Vue/HTML)
DESCRIPTION: This example demonstrates how to disable the background overlay for the `USlideover` component by setting the `overlay` prop to `false`. This can be useful when the slideover should not block interaction with the content behind it. The `UButton` opens the slideover, and content is in the `#body` slot.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_6

LANGUAGE: Vue
CODE:
```
<USlideover :overlay="false" title="Slideover without overlay">
  <template #default>
    <UButton label="Open" color="neutral" variant="subtle" />
  </template>
  <template #body>
    <Placeholder class="h-full" />
  </template>
</USlideover>
```

----------------------------------------

TITLE: Adjusting Size Nuxt FormField Vue Template
DESCRIPTION: Illustrates how the `size` prop can control the size of the `FormField` wrapper and proxy it to the wrapped form control, like a `UInput`. It shows the `xl` size with other common props.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#_snippet_6

LANGUAGE: Vue Template
CODE:
```
<UInput placeholder="Enter your email" class="w-full" />
```

----------------------------------------

TITLE: Setting Tabs Size (Vue)
DESCRIPTION: Shows how to adjust the size of the tabs using the size prop, exemplified here with md size, pill variant, and content display disabled.
SOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tabs.md#_snippet_5

LANGUAGE: Vue
CODE:
```
<UTabs
  size="md"
  variant="pill"
  :content="false"
  :items="[
    { label: 'Account' },
    { label: 'Password' }
  ]"
  class="w-full"
/>
```
