TITLE: Configuring Global Nuxt Security Options in nuxt.config.ts
DESCRIPTION: Demonstrates how to define global security settings like headers and middleware options within the `security` property of the Nuxt configuration file.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/1.getting-started/3.usage.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default defineNuxtConfig({
  security: {
    headers: {
      // certain header
      xXSSProtection: '1'
    },

    // certain middleware
    rateLimiter: {
      // options
    }
  }
})
```

----------------------------------------

TITLE: Installing Nuxt Security Module using nuxi
DESCRIPTION: This command demonstrates how to install the nuxt-security module into a Nuxt 3 project using the nuxi command-line interface, which simplifies the setup process.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npx nuxi@latest module add security
```

----------------------------------------

TITLE: Installing Nuxt Security Module with nuxi (Bash)
DESCRIPTION: Use the nuxi CLI tool to add the nuxt-security module to your Nuxt project. This command handles the installation and initial setup.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/1.getting-started/1.installation.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx nuxi@latest module add security
```

----------------------------------------

TITLE: Safe State Management with Nuxt useState in SSR
DESCRIPTION: Shows the recommended way to manage reactive state in Nuxt SSR using the `useState` composable. `useState` ensures that state is isolated per request, effectively preventing Cross-Request State Pollution and ensuring data integrity.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/1.good-practices.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
const safeGlobal = useState<number>('safeGlobal', () => 5);

export function useSafeRef() {
    const safeRef = useState<number>('safeRef', () => 2);

    return {
        safeGlobal,
        safeRef
    }
}
```

----------------------------------------

TITLE: Configuring Nuxt Security Module in nuxt.config.ts
DESCRIPTION: This TypeScript code snippet shows how to include the nuxt-security module in the nuxt.config.ts file and where to add its configuration options within the 'security' property.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/README.md#_snippet_1

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  modules: ["nuxt-security"],
  security: {
    // options
  }
})
```

----------------------------------------

TITLE: Include External Script using useScript (Nuxt 3.11+)
DESCRIPTION: Demonstrates the recommended and universal way to include an external script using the `useScript` composable, available since Nuxt 3.11. This method simplifies integration while working with Nuxt Security's CSP.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/1.csp.md#_snippet_10

LANGUAGE: ts
CODE:
```
useScript('https://example.com/script.js')
```

----------------------------------------

TITLE: Configuring Nuxt Security Headers with Strict CSP
DESCRIPTION: Configures the Nuxt security module to use a Strict Content Security Policy (CSP) Level 3 setup. It sets the `script-src` directive to include a nonce for the root script and 'strict-dynamic' to allow scripts dynamically inserted by the root script, enabling secure script loading.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_13

LANGUAGE: TypeScript
CODE:
```
export defaultNuxtConfig({
  security: {
    headers: {
      contentSecurityPolicy: {
        "script-src": [
          "'nonce-{{nonce}}'",
          "'strict-dynamic'" 
        ]
      }
    }
  }
})
```

----------------------------------------

TITLE: Enabling Strict Mode in Nuxt Security (TypeScript)
DESCRIPTION: This snippet shows how to enable the strict mode for Nuxt Security by setting the 'strict' option to 'true' within the 'security' configuration block in the 'nuxt.config.ts' file. Enabling strict mode applies much stricter security policies.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/7.improve-security.md#_snippet_0

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    strict: true
  }
})
```

----------------------------------------

TITLE: Defining Nuxt Security Module Options (TypeScript)
DESCRIPTION: This TypeScript interface defines the structure and available options for configuring the Nuxt Security module. It lists various security features like headers, rate limiting, CORS, and more, indicating whether they can be enabled/disabled or configured with specific options.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/1.getting-started/2.configuration.md#_snippet_0

LANGUAGE: ts
CODE:
```
interface ModuleOptions {
  strict: boolean;
  headers: SecurityHeaders | false;
  requestSizeLimiter: RequestSizeLimiter | false;
  rateLimiter: RateLimiter | false;
  xssValidator: XssValidator | false;
  corsHandler: CorsOptions | false;
  allowedMethodsRestricter: AllowedHTTPMethods | false;
  hidePoweredBy: boolean;
  basicAuth: BasicAuth | false;
  enabled: boolean;
  csrf: CsrfOptions | false;
  nonce: boolean;
  removeLoggers: boolean | RemoveOptions; // RemoveOptions is being deprecated, please use `true` instead
  ssg: Ssg | false;
  sri: boolean;
}
```

----------------------------------------

TITLE: Configuring Nested Route Security Rules (Nuxt Security, TypeScript)
DESCRIPTION: Demonstrates how Nuxt Security merges global security settings defined in `nuxt.config.ts` with more specific rules defined in nested `routeRules`. Shows how a global setting can be overridden or further refined for specific paths.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/1.getting-started/3.usage.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      crossOriginEmbedderPolicy: 'require-corp' // By default, COEP is 'require-corp'
    }
  },
  // Per route
  routeRules: {
    '/some-prefix/**': {
      security: {
        headers: {
          crossOriginEmbedderPolicy: false // COEP disabled on all routes beginning with /some-prefix/
        }
      }
    },
    '/some-prefix/some-route': {
      security: {
        headers: {
          crossOriginEmbedderPolicy: 'credentialless' // COEP is 'credentialless' on /some-prefix/some-route
        }
      }
    }
  }
})
```

----------------------------------------

TITLE: Configure Per-Route CSP Resolution in Nuxt Security
DESCRIPTION: Demonstrates how Content Security Policy (CSP) headers are configured and resolved hierarchically for different routes using routeRules in the Nuxt Security module, showing how more specific rules override or extend broader ones.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/1.csp.md#_snippet_9

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      contentSecurityPolicy: {
        'img-src': false // By default, no images can be loaded
      }
    }
  }
  // Per route
  routeRules: {
    '/some-prefix/**': {
      security: {
        headers: {
          contentSecurityPolicy: {
            'img-src': ["'self'"] // Self-hosted images can be loaded for routes beginning with /some-prefix/
          }
        }
      }
    },
    '/some-prefix/some-route/**': {
      security: {
        headers: {
          contentSecurityPolicy: {
            'img-src': ["'self'", "https:"]  // Self-hosted AND https: images can be loaded for routes beginning with /some-prefix/some-route/
          }
        }
      }
    },
    '/some-prefix/some-route/some-page': {
      security: {
        headers: {
          contentSecurityPolicy: {
            'img-src': ["'self'"] // ONLY self-hosted images can be loaded on /some-prefix/some-route/some-page
          }
        }
      }
    }
  }
})
```

----------------------------------------

TITLE: Configuring CORS Handler Globally and Per Route in Nuxt.js
DESCRIPTION: Configure the CORS handler middleware in your Nuxt 3 application. This snippet shows how to apply settings globally using `security.corsHandler` and how to override or apply specific settings to individual routes using `routeRules`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/3.middleware/4.cors-handler.md#_snippet_0

LANGUAGE: js
CODE:
```
export default defineNuxtConfig({

  // Global
  security: {
    corsHandler: {
      // options
    }
  }

  // Per Route
  routeRules: {
    '/my-secret-route': {
      security: {
        corsHandler: {
          // options
        }
      }
    }
  }
})
```

----------------------------------------

TITLE: Merging Per-Route Permissions Policy Configurations in Nuxt
DESCRIPTION: This example illustrates how Permissions Policy configurations defined in `routeRules` are merged recursively. More specific routes override or extend policies defined in broader or global rules.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/2.permissions-policy.md#_snippet_5

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      permissionsPolicy: {
        'geolocation': [] // By default, geolocation disabled
      }
    }
  }
  // Per route
  routeRules: {
    '/some-prefix/**': {
      security: {
        headers: {
          permissionsPolicy: {
            'geolocation': ['self'] // Self origin allowed for geolocation on all routes beginning with /some-prefix/
          }
        }
      }
    },
    '/some-prefix/some-route/**': {
      security: {
        headers: {
          permissionsPolicy: {
            'geolocation': ['self', 'https://*.example.com']  // Self AND *.example.com allowed for routes beginning with /some-prefix/some-route/
          }
        }
      }
    },
    '/some-prefix/some-route/some-page': {
      security: {
        headers: {
          contentSecurityPolicy: {
            'geolocation': ['self']  // ONLY self allowed on /some-prefix/some-route/some-page
          }
        }
      }
    }
  }
})
```

----------------------------------------

TITLE: Filter API Data with Nuxt useFetch pick
DESCRIPTION: Demonstrates using the `pick` option with Nuxt's `useFetch` composable to select only necessary fields from an API response, preventing over-fetching and potential data leaks. This is a good practice for limiting the data exposed to the client.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/1.good-practices.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const { data, pending, error, refresh } = await useFetch('https://api.nuxtjs.dev/mountains',{
    pick: ['title']
})
```

----------------------------------------

TITLE: Override Security Headers for Specific Route in Nuxt.js
DESCRIPTION: Illustrates how to use `routeRules` in `nuxt.config.ts` to override default security headers, such as `crossOriginEmbedderPolicy`, for a particular route while maintaining different defaults for other routes.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_11

LANGUAGE: ts
CODE:
```
  routeRules: {
    // The default headers for all routes
    '/**': {
      security: {
        headers: {
          crossOriginEmbedderPolicy: 'require-corp'
        }
      }
     },
    // The headers for the route you want to override
    '/example': {
      security: {
        headers: {
          crossOriginEmbedderPolicy: 'unsafe-none'
        }
      }
    },
  },
```

----------------------------------------

TITLE: Defining Inline Route Security Rules (Nuxt Security, Vue)
DESCRIPTION: Illustrates how to define route-specific security rules directly within a Vue page component using the `defineRouteRules` macro in the `<script setup>` block. This method allows granular control over security settings like headers and rate limiting on a per-page basis. Requires enabling the `experimental.inlineRouteRules` flag in `nuxt.config.ts`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/1.getting-started/3.usage.md#_snippet_2

LANGUAGE: Vue
CODE:
```
<template>
  <div>Hello from page</div>
</template>

<script setup lang="ts">
defineRouteRules({
  security: {
    headers: {
      xXSSProtection: '1'
    },
    rateLimiter: {
      tokensPerInterval: 3,
      interval: 60000,
    },
  }
})
</script>
```

----------------------------------------

TITLE: Configure Strict Content Security Policy in Nuxt
DESCRIPTION: This snippet shows the default Content Security Policy (CSP) configuration applied in Nuxt Security's `strict` mode. It sets `default-src` to `'none'`, requiring explicit whitelisting of all resource types, removes `'unsafe-inline'`, and uses nonces/hashes for inline styles and scripts.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/7.improve-security.md#_snippet_1

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  security: {
    headers: {
      contentSecurityPolicy: {
        'base-uri': ["'none'"],
        'default-src' : ["'none'"],
        'connect-src': ["'self'"],
        'font-src': ["'self'"],
        'form-action': ["'self'"],
        'frame-ancestors': ["'self'"],
        'frame-src': ["'self'"],
        'img-src': ["'self'"],
        'manifest-src': ["'self'"],
        'media-src': ["'self'"],
        'object-src': ["'none'"],
        'script-src-attr': ["'none'"],
        'style-src': ["'self'", "'nonce-{{nonce}}'"],
        'script-src': ["'self'", "'strict-dynamic'", "'nonce-{{nonce}}'"],
        'upgrade-insecure-requests': true,
        'worker-src': ["'self'"]
      }
    },
    ssg: {
      hashStyles: true
    }
  }
})
```

----------------------------------------

TITLE: Defining CORS Handler Options Interface in TypeScript
DESCRIPTION: Defines the TypeScript interface `CorsOptions` which specifies the available configuration properties for the CORS handler middleware, including origin, methods, headers, credentials, and max age.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/3.middleware/4.cors-handler.md#_snippet_1

LANGUAGE: ts
CODE:
```
interface CorsOptions = {
  origin?: '*' | string | string[];
  useRegExp?: boolean;
  methods?: '*' | HTTPMethod[];
  allowHeaders?: '*' | string[];
  exposeHeaders?: '*' | string[];
  credentials?: boolean;
  maxAge?: string | false;
  preflight?: {
      statusCode?: number;
  };
}
```

----------------------------------------

TITLE: Configuring Request Size Limiter in Nuxt
DESCRIPTION: Demonstrates how to configure the request size limiter middleware globally and per route within the `nuxt.config.ts` file. It shows the structure for enabling and setting options for the limiter.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/3.middleware/2.request-size-limiter.md#_snippet_0

LANGUAGE: js
CODE:
```
export default defineNuxtConfig({

  // Global
  security: {
    requestSizeLimiter: {
      // options
    }
  }

  // Per Route
  routeRules: {
    '/my-secret-route': {
      security: {
        requestSizeLimiter: {
          // options
        }
      }
    }
  }
})
```

----------------------------------------

TITLE: Configuring CSP for useHead onload in Nuxt Security
DESCRIPTION: Shows how to modify the `nuxt.config.ts` file to adjust the Content Security Policy (CSP) headers within the Nuxt Security module. Specifically, it adds `'unsafe-hashes'` and a specific hash to the `script-src-attr` directive to allow inline event handlers used by `useHead`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_17

LANGUAGE: TypeScript
CODE:
```
defineNuxtConfig({
  security: {
    headers: {
      contentSecurityPolicy: {
        'script-src-attr': [
          "'unsafe-hashes'",
          "'sha256-jp2rwKRAEWWbK5cz0grQYZbTZyihHbt00dy2fY8AuWY='"
        ] // Allow the useHead 'onload' inline event handler
      }
    }
  }
})
```

----------------------------------------

TITLE: Apply Middleware to Nuxt Page
DESCRIPTION: Shows how to apply a custom middleware, such as the `external-navigation` middleware, to a specific Nuxt page by using the `definePageMeta` function within the page's script setup block.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_13

LANGUAGE: ts
CODE:
```
// example.vue

<script lang="ts" setup>
 definePageMeta({
  middleware: ['external-navigation']
})
</script>
```

----------------------------------------

TITLE: Configuring Content Security Policy in Nuxt Security
DESCRIPTION: Shows how to configure the Content Security Policy header globally in `nuxt.config.ts` or per route using `routeRules`. It indicates where to place the CSP options or how to disable the header.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/1.csp.md#_snippet_0

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      contentSecurityPolicy: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        headers: {
          contentSecurityPolicy: <OPTIONS>,
        },
      },
    }
  }
})
```

----------------------------------------

TITLE: Enable CSRF Protection - Nuxt Config - JS
DESCRIPTION: This configuration snippet shows how to enable the default CSRF protection provided by the Nuxt Security module in the `nuxt.config.ts` file. Setting `security.csrf` to `true` activates the middleware.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/3.middleware/7.csrf.md#_snippet_0

LANGUAGE: js
CODE:
```
export default defineNuxtConfig({
  security: {
    csrf: true
  }
})
```

----------------------------------------

TITLE: Registering Nuxt Security Route Rules Hook (TypeScript)
DESCRIPTION: Demonstrates how to register the `nuxt-security:routeRules` hook using a Nitro plugin in TypeScript. This hook allows dynamic modification of security options at runtime. It receives the current application security options as `appSecurityOptions`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/4.hooks.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default defineNitroPlugin((nitroApp) => {
  nitroApp.hooks.hook('nuxt-security:routeRules', (appSecurityOptions) => {
    // Your code here
  })
})
```

----------------------------------------

TITLE: Configure Nuxt Security for SSG and Per-Route CSP
DESCRIPTION: Configures the Nuxt Security module to enable SSG-specific features like CSP meta tags and hash support, Subresource Integrity (SRI), and defines global and route-specific Content Security Policy (CSP) headers using routeRules within the nuxt.config.ts file.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/1.csp.md#_snippet_8

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    ssg: {
      meta: true, // Enables CSP as a meta tag in SSG mode
      hashScripts: true, // Enables CSP hash support for scripts in SSG mode
      hashStyles: false // Disables CSP hash support for styles in SSG mode (recommended)
      exportToPresets: true // Export security headers to Nitro presets
    },
    sri: true,
    headers: {
      contentSecurityPolicy: {
        'script-src': [
          "'strict-dynamic'", // Modify with your custom CSP sources
          // The nonce-{{nonce}} placeholder is not required and will be ignored in SSG mode
        ]
      }
    }
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        ssg: false,
        sri: false,
        headers: {
          contentSecurityPolicy: {
            'script-src': "self 'unsafe-inline'"
          },
        },
      },
    }
  }
})
```

----------------------------------------

TITLE: Configuring X-Frame-Options in Nuxt Security (TypeScript)
DESCRIPTION: This snippet shows how to configure the X-Frame-Options header globally within the Nuxt Security module settings and specifically for individual routes using `routeRules`. Replace `<OPTIONS>` with the desired value ('DENY', 'SAMEORIGIN', or false).
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/12.xFrameOptions.md#_snippet_0

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      xFrameOptions: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        headers: {
          xFrameOptions: <OPTIONS>,
        },
      },
    }
  }
})
```

----------------------------------------

TITLE: Use CSRF Composables - Nuxt 3 - TS
DESCRIPTION: This snippet illustrates the usage of the auto-imported composables `useCsrfFetch` and `useCsrf`. `useCsrfFetch` wraps `useFetch` and automatically includes the CSRF token in the request headers, while `useCsrf` provides direct access to the current CSRF token value.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/3.middleware/7.csrf.md#_snippet_2

LANGUAGE: ts
CODE:
```
// Wrapper around `useFetch` that automatically adds CSRF token in headers
const { data, pending, error, refresh } = useCsrfFetch('/api/login', { query: 'value1' })

// Have access to the CSRF token value
const { csrf } = useCsrf()
```

----------------------------------------

TITLE: Configuring Permissions Policy Globally and Per-Route in Nuxt
DESCRIPTION: This snippet demonstrates how to configure the Permissions Policy header both globally within the `security.headers` object and on a per-route basis using `routeRules` in your `nuxt.config.ts`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/2.permissions-policy.md#_snippet_0

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      permissionsPolicy: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        headers: {
          permissionsPolicy: <OPTIONS>,
        },
      },
    }
  }
})
```

----------------------------------------

TITLE: Configure Cross-Origin-Embedder-Policy in Nuxt Security
DESCRIPTION: Configure the Cross-Origin-Embedder-Policy header globally or per route within the `security.headers` object in your `nuxt.config.ts`. Replace `<OPTIONS>` with one of the available values ('unsafe-none', 'require-corp', 'credentialless') or `false` to disable.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/3.crossOriginEmbedderPolicy.md#_snippet_0

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      crossOriginEmbedderPolicy: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        headers: {
          crossOriginEmbedderPolicy: <OPTIONS>,
        },
      }
    }
  }
})
```

----------------------------------------

TITLE: Configuring Subresource Integrity (SRI) in Nuxt Security
DESCRIPTION: This code snippet demonstrates how to enable Subresource Integrity (SRI) globally for your Nuxt application and also how to configure it specifically for individual routes using `routeRules` within the `nuxt.config.ts` file. Setting `sri: true` enables the feature.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/4.utils/3.subresource-integrity.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    sri: true
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        sri: true
      },
    }
  }
})
```

----------------------------------------

TITLE: Configuring Cross-Origin-Opener-Policy in Nuxt Security (TypeScript)
DESCRIPTION: Demonstrates how to configure the Cross-Origin-Opener-Policy header globally in `defineNuxtConfig` and per route using `routeRules` within a Nuxt 3 application. The header value can be set using the `<OPTIONS>` placeholder.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/4.crossOriginOpenerPolicy.md#_snippet_0

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      crossOriginOpenerPolicy: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        headers: {
          crossOriginOpenerPolicy: <OPTIONS>,
        },
      },
    }
  }
})
```

----------------------------------------

TITLE: Configuring Strict-Transport-Security in Nuxt
DESCRIPTION: Configure the Strict-Transport-Security header globally or per route within your Nuxt configuration file. The header can be enabled with options or disabled by setting the value to `false`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/8.strictTransportSecurity.md#_snippet_0

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      strictTransportSecurity: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
     security: {
        headers: {
          strictTransportSecurity: <OPTIONS>,
        },
      },
    }
  }
})
```

----------------------------------------

TITLE: Loading and Accessing Global Variable with useScript
DESCRIPTION: Loads the Google Analytics script using `useScript` and utilizes the `use` option to extract the `gtag` function from the global `window` object. This provides a type-safe and convenient way to access variables or functions exposed by the loaded script after it has finished loading.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_15

LANGUAGE: TypeScript
CODE:
```
const { gtag } = useScript('https://www.google-analytics.com/analytics.js', {
  use: () => ({ gtag: window.gtag })
})
```

----------------------------------------

TITLE: Configuring X-Permitted-Cross-Domain-Policies in Nuxt Security (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure the `xPermittedCrossDomainPolicies` header within the Nuxt Security module. It shows examples for setting the header globally in the `nuxt.config.ts` file and specifically for individual routes using `routeRules`. The configuration accepts a string value or `false` to disable the header.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/13.xPermittedCrossDomainPolicies.md#_snippet_0

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      xPermittedCrossDomainPolicies: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        headers: {
          xPermittedCrossDomainPolicies: <OPTIONS>,
        },
      }
    }
  }
})
```

----------------------------------------

TITLE: Disabling Security Features (Nuxt Security, TypeScript)
DESCRIPTION: Shows how to disable specific security headers or middleware provided by Nuxt Security. Features can be disabled globally in the main `security` configuration or for individual routes using `routeRules` by setting the corresponding option to `false`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/1.getting-started/3.usage.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
export default defineNuxtConfig({
  // global
  security: {
    headers: {
      // certain header
      contentSecurityPolicy: false
    },

    // certain middleware
    rateLimiter: false
  },

  // per route
  routeRules: {
    '/custom-route': {
      security: {
        rateLimiter: false
      }
    }
  }
})
```

----------------------------------------

TITLE: Configure CSP Without 'strict-dynamic' in Nuxt
DESCRIPTION: This Nuxt configuration snippet shows how to manually configure the `script-src` directive in the Content Security Policy when 'strict-dynamic' is not used. It includes examples of whitelisting by nonce (for SSR), 'self' origin, integrity hash (for SSG), fully-qualified URL, and domain.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_28

LANGUAGE: ts
CODE:
```
export defaultNuxtConfig({
    security: {
      nonce: true,
      ssg: {
        hashScripts: true // In the SSG case, inline scripts generated by the server will be allowed by hash
      },
      headers: {
        contentSecurityPolicy: {
          "script-src": [
            "'nonce-{{nonce}}'", // Nonce placeholders in the SSR case will allow inline scripts generated on the server
            "'self'", // Allow external scripts from self origin
            "sha384-.....", // Whitelist your external scripts by integrity hash in the SSG case
            "https://domain.com/external-script.js", // Or by fully-qualified name, this is compatible with both SSR and SSG
            "https://trusted-domain.com" // Or by domain if you can fully trust the domain, will also be compatible with both SSR and SSG
          ]
        }
      }
    }
  })
```

----------------------------------------

TITLE: Configuring Allowed HTTP Methods Restricter in Nuxt
DESCRIPTION: Example showing how to enable and configure the `allowedMethodsRestricter` middleware globally and for specific routes within the `nuxt.config.ts` file. It demonstrates setting allowed methods.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/3.middleware/5.allowed-methods-restricter.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default defineNuxtConfig({

  // Global
  security: {
    allowedMethodsRestricter: {
      methods: ['GET']
    }
  }

  // Per Route
  routeRules: {
    '/my-secret-route': {
      security: {
        allowedMethodsRestricter: {
          methods: ['GET']
        }
      }
    }
  }
})
```

----------------------------------------

TITLE: Configure Strict Embedding Frame Policy in Nuxt
DESCRIPTION: This snippet shows the default configuration for controlling external frame embedding in Nuxt Security's `strict` mode. It sets `frame-src` to `'self'` (requiring whitelisting), `crossOriginEmbedderPolicy` to `require-corp`, and `xFrameOptions` to `DENY` to prevent unauthorized framing and enforce cross-origin isolation.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/7.improve-security.md#_snippet_3

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  security: {
    headers: {
      contentSecurityPolicy: {
        'frame-src': ["'self'"]
      },
      crossOriginEmbedderPolicy: 'require-corp',
      xFrameOptions: 'DENY'
    }
  }
})
```

----------------------------------------

TITLE: Configuring XSS Validator in Nuxt Security (TS)
DESCRIPTION: This snippet demonstrates how to configure the XSS validator middleware globally within the `security` property and per route using `routeRules` in your `nuxt.config.ts` file.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/3.middleware/3.xss-validator.md#_snippet_0

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({

  // Global
  security: {
    xssValidator: {
      // options
    }
  }

  // Per Route
  routeRules: {
    '/my-secret-route': {
      security: {
        xssValidator: {
          // options
        }
      }
    }
  }
})
```

----------------------------------------

TITLE: Modifying Multiple Security Options for Specific Routes (TypeScript)
DESCRIPTION: Provides an example of using the `nuxt-security:routeRules` hook to modify various security options, not just headers, for specific routes like `/api/**`. It fetches a value asynchronously and updates the `rateLimiter` and `hidePoweredBy` settings for the matched routes.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/4.hooks.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
export default defineNitroPlugin((nitroApp) => {
  nitroApp.hooks.hook('nuxt-security:routeRules', async(appSecurityOptions) => {
    const tokenLimit = await $fetch('https://secret-manager-api.com/api-route')
    // This example modifies the Rate Limiter only for API routes
    // It also modifies the X-Powered-By setting for these routes
    appSecurityOptions['/api/**'] = defuReplaceArray(
    {
      rateLimiter: {
        tokensPerInterval: tokenLimit
      },
      hidePoweredBy: false
    },
    appSecurityOptions['/api/**']
    )
  })
})
```

----------------------------------------

TITLE: Wrap Script in Client-Side Nuxt Plugin
DESCRIPTION: This code defines a Nuxt plugin that uses the `useScript` composable from `unhead` to load an external script. The loaded script object is then provided globally via the Nuxt app context.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_24

LANGUAGE: ts
CODE:
```
import { useScript } from 'unhead';

export default defineNuxtPlugin((nuxtApp) => {
  const { $script } = useScript(
    {
      src: 'https://example.com/script.js',
      async: true,
      defer: true,
    }
  )

  return {
    provide: {
      script: $script
    },
  }
})
```

----------------------------------------

TITLE: Loading External Script with useScript Composable
DESCRIPTION: Uses the `useScript` composable to asynchronously load an external JavaScript file, such as the Bootstrap bundle, from a CDN. This method is recommended for loading third-party scripts in Nuxt applications configured with Strict CSP, as it works seamlessly with 'strict-dynamic'.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
useScript('https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js')
```

----------------------------------------

TITLE: Merging Route Rules with Replacement (Nuxt Security, TypeScript)
DESCRIPTION: Demonstrates how to modify existing route security rules within a Nitro server plugin using the `nuxt-security:routeRules` hook and the `defuReplaceArray` utility. This utility merges objects but replaces arrays entirely, useful for replacing specific header directives like `script-src` while preserving other rules for the route. `defuReplaceArray` is auto-imported by Nuxt Security.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/1.getting-started/3.usage.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
// You don't need to import defuReplaceArray as it is auto-imported by Nuxt Security

export default defineNitroPlugin((nitroApp) => {
  nitroApp.hooks.hook('nuxt-security:routeRules', async(routeRules) => {
    routeRules['/some/route'] = defuReplaceArray(
      { 
        headers: {
          contentSecurityPolicy: {
            "script-src": ["'self'", "..."]
            // The script-src directive will be replaced with "'self' ..."
          }
        }
      },
      routeRules['/some/route'] // The other existing rules for /some/route will be preserved
    )
  })
})
```

----------------------------------------

TITLE: Adjusting Headers for Google Auth Sign In Modal (Nuxt Security)
DESCRIPTION: To ensure compatibility with the Google Auth Sign In modal method, the `crossOriginOpenerPolicy` header needs adjustment. This snippet shows how to set `crossOriginOpenerPolicy` to `'same-origin-allow-popups'` in `nuxt.config.ts`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_6

LANGUAGE: ts
CODE:
```
// nuxt.config.ts

security:{
  headers: {
    crossOriginOpenerPolicy: 'same-origin-allow-popups'
  }
}
```

----------------------------------------

TITLE: Configure Security Headers and CORS for Development Host
DESCRIPTION: Shows how to conditionally configure security headers (`crossOriginEmbedderPolicy`, `contentSecurityPolicy`) and CORS (`corsHandler`) in `nuxt.config.ts` based on the `NODE_ENV`. This allows adjusting settings for development (e.g., using `--host` flag) while maintaining stricter policies in production.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_15

LANGUAGE: ts
CODE:
```
security: {
    headers: {
      crossOriginEmbedderPolicy: process.env.NODE_ENV === 'development' ? 'unsafe-none' : 'require-corp', //https://github.com/Baroshem/nuxt-security/issues/101
      contentSecurityPolicy: {
        "upgrade-insecure-requests": process.env.NODE_ENV === 'development' ? false : true // USE ONLY IN DEV MODE
      }
    },
    corsHandler: {
      origin:'*'
    }
  }
```

----------------------------------------

TITLE: Setting Default Nuxt Security Configuration (TypeScript)
DESCRIPTION: This code snippet shows the default configuration object applied by the Nuxt Security module out-of-the-box. It includes default settings for various security features like Content Security Policy headers, request size limits, rate limiting, CORS, and more, providing a secure baseline.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/1.getting-started/2.configuration.md#_snippet_1

LANGUAGE: ts
CODE:
```
security: {
  strict: false,
  headers: {
    crossOriginResourcePolicy: 'same-origin',
    crossOriginOpenerPolicy: 'same-origin',
    crossOriginEmbedderPolicy: 'credentialless',
    contentSecurityPolicy: {
      'base-uri': ["'none'"],
      'font-src': ["'self'", 'https:', 'data:'],
      'form-action': ["'self'"],
      'frame-ancestors': ["'self'"],
      'img-src': ["'self'", 'data:'],
      'object-src': ["'none'"],
      'script-src-attr': ["'none'"],
      'style-src': ["'self'", 'https:', "'unsafe-inline'"],
      'script-src': ["'self'", 'https:', "'unsafe-inline'", "'strict-dynamic'", "'nonce-{{nonce}}'"],
      'upgrade-insecure-requests': true
    },
    originAgentCluster: '?1',
    referrerPolicy: 'no-referrer',
    strictTransportSecurity: {
      maxAge: 15552000,
      includeSubdomains: true,
    },
    xContentTypeOptions: 'nosniff',
    xDNSPrefetchControl: 'off',
    xDownloadOptions: 'noopen',
    xFrameOptions: 'SAMEORIGIN',
    xPermittedCrossDomainPolicies: 'none',
    xXSSProtection: '0',
    permissionsPolicy: {
      camera: [],
      'display-capture': [],
      fullscreen: [],
      geolocation: [],
      microphone': []
    }
  },
  requestSizeLimiter: {
    maxRequestSizeInBytes: 2000000,
    maxUploadFileRequestInBytes: 8000000,
    throwError: true
  },
  rateLimiter: {
    tokensPerInterval: 150,
    interval: 300000,
    headers: false,
    driver: {
      name: 'lruCache'
    },
    throwError: true
  },
  xssValidator: {
    throwError: true
  },
  corsHandler: {
    origin: serverlUrl,
    methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE'],
    preflight: {
      statusCode: 204
    },
  },
  allowedMethodsRestricter: {
    methods: '*',
    throwError: true
  },
  hidePoweredBy: true,
  basicAuth: false,
  enabled: true,
  csrf: false,
  nonce: true,
  removeLoggers: true,
  ssg: {
    meta: true,
    hashScripts: true,
    hashStyles: false,
    nitroHeaders: true,
    exportToPresets: true,
  },
  sri: true
}
```

----------------------------------------

TITLE: Disable CSRF for Specific Route - Nuxt Config - TS
DESCRIPTION: This example demonstrates how to disable CSRF protection for a specific route using the `routeRules` configuration in `nuxt.config.ts`. Setting `csurf: false` for a path like `/api/nocsrf` bypasses the CSRF middleware for requests to that endpoint.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/3.middleware/7.csrf.md#_snippet_1

LANGUAGE: ts
CODE:
```
export default {
  routeRules: {
    '/api/nocsrf': {
      csurf: false
    }
  }
}
```

----------------------------------------

TITLE: Loading External Script with useScript in Nuxt SSR
DESCRIPTION: Demonstrates how to use the `useScript` composable with the `{ trigger: 'server' }` option in a Nuxt SSR application. This ensures the script tag is injected by the server, which is compatible with Strict CSP, and shows how to use the `stub` option for server-side logic.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_18

LANGUAGE: typescript
CODE:
```
useScript({
  src: 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js',
  crossorigin: 'anonymous',
}, {
  trigger: 'server', // Use this option so that the script tag will be injected by the server,
  stub() {
    if (process.server) {
      // This code will be executed on the server
      // See documentation at: https://unhead.unjs.io/usage/composables/use-script#ssr-stubbing
    }
  }
})
```

----------------------------------------

TITLE: Allow External Images in Nuxt.js CSP
DESCRIPTION: Shows how to configure the `contentSecurityPolicy` header in `nuxt.config.ts` to allow images from specific external domains by adding them to the `img-src` directive within the security module configuration.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_8

LANGUAGE: ts
CODE:
```
// nuxt.config.ts

security: {
  headers: {
    contentSecurityPolicy: {
      'img-src': ['https://upload.wikimedia.org'], // <--- add the domain you want to fetch the image from here
    }
  }
}
```

----------------------------------------

TITLE: Disabling Headers for Firebase Auth signInWithPopup (Nuxt Security)
DESCRIPTION: To ensure compatibility with Firebase Auth's `signInWithPopup` method, specific security headers set by Nuxt Security need to be disabled. This snippet shows how to set `crossOriginOpenerPolicy` and `crossOriginEmbedderPolicy` to `false` in `nuxt.config.ts`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_2

LANGUAGE: ts
CODE:
```
// nuxt.config.ts

security:{
  headers: {
    crossOriginOpenerPolicy: false,
    crossOriginEmbedderPolicy: false,
  }
}
```

----------------------------------------

TITLE: Modifying All Route Security Options with Hook (TypeScript)
DESCRIPTION: Shows how to use the `nuxt-security:routeRules` hook to apply custom security settings to all routes (`/**`). This example specifically fetches a value asynchronously and updates the `connect-src` directive within the Content Security Policy using `defuReplaceArray`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/4.hooks.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export default defineNitroPlugin((nitroApp) => {
  nitroApp.hooks.hook('nuxt-security:routeRules', async(appSecurityOptions) => {
    const cspConnectSrc = await $fetch('https://secret-manager-api.com/api-route')
    // This example replaces only the connect-src CSP directive
    appSecurityOptions['/**'] = defuReplaceArray(
    {
      headers: {
        contentSecurityPolicy: {
          "connect-src": [cspConnectSrc]
        }
      }
    },
    appSecurityOptions['/**']
    )
  })
})
```

----------------------------------------

TITLE: Modifying Specific Route Security Options with Hook (TypeScript)
DESCRIPTION: Illustrates how to apply custom security settings only to specific sub-routes, such as `/admin/**`, using the `nuxt-security:routeRules` hook. It fetches data asynchronously and updates the `connect-src` CSP directive for the matched routes.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/4.hooks.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
export default defineNitroPlugin((nitroApp) => {
  nitroApp.hooks.hook('nuxt-security:routeRules', async(appSecurityOptions) => {
    const cspConnectSrc = await $fetch('https://secret-manager-api.com/api-route')
    // This example modifies the CSP only for `/admin/**` routes
    appSecurityOptions['/admin/**'] = defuReplaceArray(
    {
      headers: {
        contentSecurityPolicy: {
          "connect-src": [cspConnectSrc]
        }
      }
    },
    appSecurityOptions['/admin/**']
    )
  })
})
```

----------------------------------------

TITLE: Disable crossOriginOpenerPolicy in Nuxt.js
DESCRIPTION: Explains how to disable the `crossOriginOpenerPolicy` header by setting it to `false` in the `security.headers` configuration within `nuxt.config.ts`. This can help resolve potential `NS_ERROR_FAILURE` issues when using IFrames in Firefox.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_10

LANGUAGE: ts
CODE:
```
// nuxt.config.ts

security:{
  headers: {
    crossOriginOpenerPolicy: false,
  }
}
```

----------------------------------------

TITLE: Configuring Nuxt Security Headers for Prismic
DESCRIPTION: This `nuxt.config.ts` configuration provides recommended security headers for integrating Nuxt Security with Prismic. It adjusts `contentSecurityPolicy` for script, script-attribute, and frame sources, enables `upgrade-insecure-requests`, disables `crossOriginOpenerPolicy` and `crossOriginEmbedderPolicy`, and sets `xXSSProtection`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_5

LANGUAGE: ts
CODE:
```
defineNuxtConfig({
  security: {
    headers: {
      contentSecurityPolicy: {
        "script-src": [
          "'self'",
          "'unsafe-inline'",
          "https://static.cdn.prismic.io",
          "https://<YOUR-DOMAIN>.prismic.io",
          "'nonce-{{nonce}}'",
          "'strict-dynamic'"
        ],
        "script-src-attr": [
          "'unsafe-hashes'",
          "'sha256-jp2rwKRAEWWbK5cz0grQYZbTZyihHbt00dy2fY8AuWY='",
        ],
        "frame-src": ["'self'", "https://<YOUR-DOMAIN>.prismic.io"],
        "upgrade-insecure-requests": true,
      },
      crossOriginOpenerPolicy: false,
      crossOriginEmbedderPolicy: false,
      xXSSProtection: "1; mode=block",
    },
  },
})
```

----------------------------------------

TITLE: Configuring Nuxt Security for PayPal Checkout Button
DESCRIPTION: This configuration snippet for `nuxt.config.ts` provides the necessary security settings to integrate the PayPal Checkout Button. It includes `routeRules` specific headers for a payment page and global header adjustments for `contentSecurityPolicy` (allowing PayPal image sources) and `strictTransportSecurity`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_3

LANGUAGE: ts
CODE:
```
// nuxt.config.ts

routeRules: {
  '/payment': {
    security: {
      headers: {
        crossOriginEmbedderPolicy: 'unsafe-none',
        crossOriginResourcePolicy: 'cross-origin',
      },
    }
  },
},
security: {
  headers: {
    contentSecurityPolicy: {
      'img-src': [
        "'self'",
        'data:',
        'https://paypal.com',
        'https://www.paypalobjects.com',
      ],
    },
    strictTransportSecurity: {
      magAge: 0
    },
  },
},
```

----------------------------------------

TITLE: Use Local Script with Integrity Hash via useHead
DESCRIPTION: This Nuxt `useHead` configuration demonstrates how to include a locally hosted script file, specifying its source from the public directory, setting `crossorigin='anonymous'`, and providing the pre-calculated integrity hash for CSP compliance.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_27

LANGUAGE: ts
CODE:
```
useHead({
  script: [
    {
      src: '/bootstrap-copy.js', // Serve the copy from self-origin
      crossorigin: 'anonymous',
      integrity: 'sha384-.....' // The hash that you have calculated above
    }
  ]
})
```

----------------------------------------

TITLE: Configuring Strict HSTS Policy in Nuxt Security (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure the strictTransportSecurity header within the nuxt-security module in your nuxt.config.ts file. It sets a maxAge of one year, includes subdomains, and enables the preload directive, which is necessary for submitting your site to the HSTS preload list.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/7.improve-security.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
export default defineNuxtConfig({
  security: {
    headers: {
      strictTransportSecurity: {
        maxAge: 31536000,
        includeSubdomains: true,
        preload: true
      }
    }
  }
})
```

----------------------------------------

TITLE: Overriding Nuxt Security Layer Configuration (TypeScript)
DESCRIPTION: This example demonstrates how to modify the default Nuxt Security configuration when extending a Nuxt Layer. It shows how to access and programmatically update the security options within a custom module defined in `nuxt.config.ts`, specifically filtering out a value from the `object-src` Content Security Policy.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/1.getting-started/2.configuration.md#_snippet_2

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig(
  {
    extends: 'some-layer-adding-nuxt-security',
    modules: [
      (_options, nuxt) => {
        const nuxtConfigSecurity = nuxt.options.security
        if (
          typeof nuxtConfigSecurity.headers !== 'boolean' &&
          nuxtConfigSecurity.headers.contentSecurityPolicy &&
          typeof nuxtConfigSecurity.headers.contentSecurityPolicy !==
            'boolean' &&
          typeof nuxtConfigSecurity.headers.contentSecurityPolicy !==
            'string' &&
          nuxtConfigSecurity.headers.contentSecurityPolicy['object-src']
        ) {
          nuxtConfigSecurity.headers.contentSecurityPolicy['object-src'] =
            nuxtConfigSecurity.headers.contentSecurityPolicy[
              'object-src'
            ].filter((x) => x !== "'none'")
        }
        console.log(nuxt.options.security)
      },
    ],
  }
)
```

----------------------------------------

TITLE: Loading PayPal SDK with useHead (Nuxt)
DESCRIPTION: This snippet demonstrates how to load the PayPal SDK script using Nuxt's `useHead` composable. This script is required to display the PayPal button on a payment page and includes necessary attributes like `crossorigin`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_4

LANGUAGE: ts
CODE:
```
useHead({
  // Paypal SDK to show Paypal button on Payment Page
  script: [
    {
      src: `https://www.paypal.com/sdk/js?client-id=YOURCLIENTID&components=buttons,marks&currency=USD&disable-funding=card`,
      crossorigin: 'anonymous',
    },
  ],
  noscript: [{ children: 'JavaScript is required' }],
});
```

----------------------------------------

TITLE: Include External Script using useHead (Pre-Nuxt 3.11)
DESCRIPTION: Shows how to include an external script using the `useHead` composable, a common method used before the introduction of `useScript` in Nuxt 3.11. It illustrates adding the script object to the `script` array and notes the requirement for `mode: 'client'` in SSG mode.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/1.csp.md#_snippet_11

LANGUAGE: ts
CODE:
```
useHead({
  script: [
    { 
      src: 'https://example.com/script.js',
    },
    {
      mode: 'client' // 'client' option is required in SSG mode
    }
  ] 
})
```

----------------------------------------

TITLE: Configuring Nuxt Security Rate Limiter in nuxt.config.ts
DESCRIPTION: Demonstrates how to configure the rate limiter middleware globally and per specific route within the `nuxt.config.ts` file using the `security` and `routeRules` options.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/3.middleware/1.rate-limiter.md#_snippet_0

LANGUAGE: js
CODE:
```
export default defineNuxtConfig({

  // Global
  security: {
    rateLimiter: {
      // options
    }
  }

  // Per Route
  routeRules: {
    '/my-secret-route': {
      security: {
        rateLimiter: {
          // options
        }
      }
    }
  }
})
```

----------------------------------------

TITLE: Loading Cloudflare JSD Script with useHead (Nuxt)
DESCRIPTION: This snippet shows how to load the Cloudflare Javascript Detection script using Nuxt's `useHead` composable. This is necessary after disabling Cloudflare's default Javascript Detection and is loaded on the client side.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_0

LANGUAGE: ts
CODE:
```
useHead({
  script: [
    { src: "/cdn-cgi/challenge-platform/scripts/jsd/main.js", crossorigin: true, referrerpolicy: "origin" }
  ]
}, { mode: 'client' })
```

----------------------------------------

TITLE: Configure Strict Permissions Policy in Nuxt
DESCRIPTION: This configuration snippet illustrates the default Permissions Policy settings in Nuxt Security's `strict` mode. Most browser features are disabled by default (set to empty arrays `[]`), requiring developers to explicitly enable necessary permissions for their application.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/7.improve-security.md#_snippet_2

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  security: {
    headers: {
      permissionsPolicy: {
        accelerometer: [],
        //'ambient-light-sensor':[],
        autoplay:[],
        //battery:[],
        camera:[],
        'display-capture':[],
        //'document-domain':[],
        'encrypted-media':[],
        fullscreen:[],
        //gamepad:[],
        geolocation:[],
        gyroscope:[],
        //'layout-animations':['self'],
        //'legacy-image-formats':['self'],
        magnetometer:[],
        microphone:[],
        midi:[],
        //'oversized-images':['self'],
        payment:[],
        'picture-in-picture':[],
        'publickey-credentials-get':[],
        'screen-wake-lock':[],
        //'speaker-selection':[],
        'sync-xhr':['self'],
        //'unoptimized-images':['self'],
        //'unsized-media':['self'],
        usb:[],
        'web-share':[],
        'xr-spatial-tracking':[]
      }
    }
  }
})
```

----------------------------------------

TITLE: Example CSP Policy with Nonce (HTTP Header)
DESCRIPTION: Provides an example of a Content-Security-Policy header value that allows inline scripts only if they possess a 'nonce' attribute with the specified random string.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_9

LANGUAGE: HTTP Header
CODE:
```
Content-Security-Policy: script-src 'nonce-somerandomstring'
```

----------------------------------------

TITLE: Enable Basic Auth in Nuxt Security Configuration
DESCRIPTION: Configures the Nuxt Security module to enable the Basic Auth middleware globally by adding the `basicAuth` object to the security options in `nuxt.config.ts`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/3.middleware/6.basic-auth.md#_snippet_0

LANGUAGE: js
CODE:
```
export default defineNuxtConfig({
  security: {
    basicAuth: {
      // options
    }
  }
})
```

----------------------------------------

TITLE: Loading External Script with useScript in Nuxt SSG (Server Trigger)
DESCRIPTION: Illustrates how to use `useScript` in a Nuxt SSG application when the script must be injected by the server (e.g., due to specific requirements preventing client-only mode). This requires providing the `integrity` hash of the external script for it to execute on the client under Strict CSP.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_19

LANGUAGE: typescript
CODE:
```
useScript({
  src: 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js',
  crossorigin: 'anonymous',
  integrity: 'sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL' // Add the integrity hash of your external script, so that it will execute on the client
}, {
  trigger: 'server' // This option will inject the script in the HTML static source
})
```

----------------------------------------

TITLE: Unsafe Global State with Vue ref in Nuxt SSR
DESCRIPTION: Illustrates an unsafe pattern for managing reactive state in a Nuxt SSR application using a global `ref`. This approach can lead to Cross-Request State Pollution, where state is unintentionally shared between different user requests.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/1.good-practices.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const unsafeGlobal = ref<number>(1);

export function useSafeRef() {
    const safeRef = ref<number>(2);

    return {
        unsafeGlobal,
        safeRef
    }
}
```

----------------------------------------

TITLE: Configuring Rate Limiter with Vercel KV Driver (TypeScript)
DESCRIPTION: Illustrates how to configure the rate limiter to use a different storage driver, specifically the `vercelKv` driver from unstorage, by specifying its name and options.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/3.middleware/1.rate-limiter.md#_snippet_2

LANGUAGE: ts
CODE:
```
rateLimiter: {
  driver: {
    name: 'vercelKv',
    options: {
      // url: "https://<your-project-slug>.kv.vercel-storage.com",
      // Other options
    }
  }
}
```

----------------------------------------

TITLE: Configure CSP Level 2 script-src with nonce and domain whitelist in Nuxt Security
DESCRIPTION: This configuration snippet shows how to set the `script-src` Content Security Policy using Nuxt Security. It includes a nonce placeholder for server-side inserted scripts and whitelists 'https:example.com' to support SSG and hydration for external resources, while noting the limitations for client-side hydration of inline scripts under CSP Level 2.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_12

LANGUAGE: ts
CODE:
```
export defaultNuxtConfig({
  security: {
    headers: {
      contentSecurityPolicy: {
        "script-src": [
          "'nonce-{{nonce}}'",
          // nonce will allow inline scripts that are inserted server-side
          // But the application will block if client-side hydration tries to insert a script
          "https:example.com"
          // example.com must still be whitelisted by name to support SSG
          // example.com must still be whitelisted by name to support hydration
        ]
      }
    }
  }
})
```

----------------------------------------

TITLE: Merging Route Rules with Addition (Nuxt Security, TypeScript)
DESCRIPTION: Shows how to merge new security rules with existing ones for a specific route within a Nitro server plugin using the `nuxt-security:routeRules` hook and the standard `defu` utility. Unlike `defuReplaceArray`, `defu` merges array values by adding new items to existing ones, useful for adding sources to a CSP directive. Requires importing `defu`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/1.getting-started/3.usage.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
// You will need to import defu
import { defu } from 'defu'
export default defineNitroPlugin((nitroApp) => {
  nitroApp.hooks.hook('nuxt-security:routeRules', async(routeRules) => {
    routeRules['/some/route'] = defu(
      { 
        headers: {
          contentSecurityPolicy: {
            "script-src": ["'self'", "..."]
            // The values "'self' ..." will be added to the existing values
          }
        }
      },
      routeRules['/some/route'] // The other existing rules for /some/route will be preserved
    )
  })
})
```

----------------------------------------

TITLE: Configuring Nuxt Security for Unsafe Inline CSP (TypeScript)
DESCRIPTION: Demonstrates how to configure the `nuxt-security` module in `nuxt.config.ts` to use a less strict Content Security Policy that allows `'unsafe-inline'` scripts. This involves setting `nonce: false` and `ssg.hashScripts: false` to avoid conflicts with `'unsafe-inline'`, and explicitly adding `'unsafe-inline'` to the `script-src` directive. It also shows how to whitelist external scripts. Note that this configuration is considered unsafe.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_29

LANGUAGE: TypeScript
CODE:
```
export defaultNuxtConfig({
  security: {
    nonce: false,
    ssg: {
      hashScripts: false // Disable hashes because they would cancel 'unsafe-inline'
    },
    headers: {
      contentSecurityPolicy: {
        "script-src": [
          "'unsafe-inline'", // Allow unsafe inline scripts: unsafe !
          //"'nonce-{{nonce}}'", // Disable nonce placeholders in the SSR case because they would cancel 'unsafe-inline'
          "https://domain.com/external-script.js", // Whitelist your external scripts by fully-qualified name
          "https://trusted-domain.com" // Or by domain if you can fully trust the domain
        ]
      }
    }
  }
})
```

----------------------------------------

TITLE: Initialize Winston Logger with Console and File Transports
DESCRIPTION: Shows how to initialize a Winston logger instance with multiple transports: one for logging to the console and another for writing logs to a file named 'application.log'. The log level is set to 'verbose'.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/1.good-practices.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const logger = new (Winston.Logger) ({
  transports: [
      new (winston.transports.Console)(),
      new (winston.transports.File)({ filename: 'application.log' })
  ],
  level: 'verbose'
});
```

----------------------------------------

TITLE: Access Script from Nuxt Plugin
DESCRIPTION: This snippet shows how to access the script object that was provided globally by the client-side Nuxt plugin using the `useNuxtApp` composable.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_25

LANGUAGE: ts
CODE:
```
const { $script } = useNuxtApp()
```

----------------------------------------

TITLE: Overwriting Route Rules (Nuxt Security, TypeScript)
DESCRIPTION: Explains how to completely replace all existing security rules for a specific route within a Nitro server plugin using the `nuxt-security:routeRules` hook. This is achieved by directly assigning a new configuration object to the route's entry in the `routeRules` object, effectively discarding any previously defined rules for that route.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/1.getting-started/3.usage.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
export default defineNitroPlugin((nitroApp) => {
  nitroApp.hooks.hook('nuxt-security:routeRules', async(routeRules) => {
    routeRules['/some/route'] = { 
      headers: {
        contentSecurityPolicy: {
          "script-src": ["'self'", "..."]
        }
      }
    }
    // Any existing rules for /some/route will be erased
  })
})
```

----------------------------------------

TITLE: Example CSP Policy with Hash (HTTP Header)
DESCRIPTION: Shows a Content-Security-Policy header value that allows inline scripts only if their content's cryptographic hash matches one of the hashes listed in the policy.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_11

LANGUAGE: HTTP Header
CODE:
```
Content-Security-Policy: script-src 'sha256-......'
```

----------------------------------------

TITLE: Default Content Security Policy Header Value
DESCRIPTION: Displays the default value set for the `Content-Security-Policy` HTTP header by Nuxt Security when enabled without specific configuration.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/1.csp.md#_snippet_1

LANGUAGE: http
CODE:
```
Content-Security-Policy: base-uri 'none'; font-src 'self' https: data:; form-action 'self'; img-src 'self' data:; object-src 'none'; script-src-attr 'none'; style-src 'self' https: 'unsafe-inline'; script-src 'self' https: 'unsafe-inline' 'strict-dynamic' 'nonce-{{nonce}}'; upgrade-insecure-requests;
```

----------------------------------------

TITLE: Loading External Script with useHead in Nuxt
DESCRIPTION: Demonstrates how to use the `useHead` composable in Nuxt to include an external JavaScript file from a CDN. It shows how to specify the script source and crossorigin attribute, noting the requirement for `{ mode: 'client' }` in SSG mode.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_16

LANGUAGE: TypeScript
CODE:
```
useHead({
  script: [
    // Insert any external script with strict-dynamic
    {
      src: 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js',
      crossorigin: 'anonymous'
    }
  ]
}, {
  mode: 'client' // Required only for SSG mode
})
```

----------------------------------------

TITLE: Example CSP Policy Whitelisting External Scripts (HTTP Header)
DESCRIPTION: Shows a Content-Security-Policy value that whitelists scripts only from 'https://example.com', effectively blocking scripts from other domains like 'evildomain.com'.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_6

LANGUAGE: HTTP Header
CODE:
```
script-src https://example.com
```

----------------------------------------

TITLE: Initialize and Configure Node.js ACL
DESCRIPTION: Demonstrates how to initialize the `acl` module with a memory backend and define basic permissions, such as allowing the 'guest' role to 'view' resources of type 'blogs'. This sets up a basic access control rule.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/1.good-practices.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
var acl = require('acl');

acl = new acl(new acl.memoryBackend())

// guest is allowed to view blogs
acl.allow('guest', 'blogs', 'view')
```

----------------------------------------

TITLE: Default Strict CSP Configuration (Nuxt Security, TypeScript)
DESCRIPTION: This snippet shows the default configuration options for Strict CSP in Nuxt Security. It includes settings for nonce support in SSR, SSG options (meta tags, script/style hashing), and various Content Security Policy header directives with their default values and comments.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/1.csp.md#_snippet_5

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  security: {
    nonce: true, // Enables HTML nonce support in SSR mode
    ssg: {
      meta: true, // Enables CSP as a meta tag in SSG mode
      hashScripts: true, // Enables CSP hash support for scripts in SSG mode
      hashStyles: false // Disables CSP hash support for styles in SSG mode (recommended)
    },
    headers: {
      contentSecurityPolicy: {
        'script-src': [
          "'self'",  // Fallback value, will be ignored by most modern browsers (level 3)
          "https:", // Fallback value, will be ignored by most modern browsers (level 3)
          "'unsafe-inline'", // Fallback value, will be ignored by almost any browser (level 2)
          "'strict-dynamic'", // Strict CSP via 'strict-dynamic', supported by most modern browsers (level 3)
          "'nonce-{{nonce}}'" // Enables CSP nonce support for scripts in SSR mode, supported by almost any browser (level 2)
        ],
        'style-src': [
          "'self'", // Enables loading of stylesheets hosted on same origin
          "https:", // For increased security, replace by the specific hosting domain or file name of your external stylesheets
          "'unsafe-inline'" // Recommended default for most Nuxt apps
        ],
        'base-uri': ["'none'"],
        'img-src': ["'self'", "data:"], // Add relevant https://... sources if you load images from external sources 
        'font-src': ["'self'", "https:", "data:"], //  For increased security, replace by the specific sources for fonts
        'object-src': ["'none'"],
        'script-src-attr': ["'none'"],
        'upgrade-insecure-requests': true
      }
    },
    sri: true
  }
})
```

----------------------------------------

TITLE: Configure X-XSS-Protection Header in Nuxt Security (TypeScript)
DESCRIPTION: Shows how to set the `xXSSProtection` option in the Nuxt Security module configuration, applicable globally or overridden for specific routes using `routeRules`. The `<OPTIONS>` placeholder indicates where the desired header value or `false` should be placed.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/14.xXSSProtection.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      xXSSProtection: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        headers: {
          xXSSProtection: <OPTIONS>,
        },
      },
    }
  }
})
```

----------------------------------------

TITLE: Configuring X-Content-Type-Options in Nuxt Security (Global and Per Route)
DESCRIPTION: Demonstrates how to configure the 'xContentTypeOptions' security header globally within the 'defineNuxtConfig' and for specific routes using 'routeRules' in Nuxt Security. The placeholder '<OPTIONS>' indicates where the desired value should be placed.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/9.xContentTypeOptions.md#_snippet_0

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      xContentTypeOptions: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        headers: {
          xContentTypeOptions: <OPTIONS>,
        },
      }
    }
  }
})
```

----------------------------------------

TITLE: Install BootstrapVueNext Nuxt Module
DESCRIPTION: This command installs the BootstrapVueNext Nuxt module using npm, which is presented as an alternative to directly including Bootstrap scripts via script tags.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_20

LANGUAGE: bash
CODE:
```
npm install @bootstrap-vue-next/nuxt
```

----------------------------------------

TITLE: HTML CSP Meta Tag Output in SSG
DESCRIPTION: Example of the Content Security Policy (CSP) meta tag added to the <head> of a static Nuxt application when the security module is configured for SSG mode, providing CSP support.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/1.csp.md#_snippet_7

LANGUAGE: html
CODE:
```
<meta http-equiv="Content-Security-Policy" content="base-uri 'none'; font-src 'self' https: data:; form-action 'self'; img-src 'self' data:; object-src 'none'; script-src-attr 'none'; style-src 'self' https: 'unsafe-inline'; script-src 'self' https: 'unsafe-inline' 'strict-dynamic' 'sha256-{{hash}}'; upgrade-insecure-requests;">
```

----------------------------------------

TITLE: Add crossorigin Attribute to HTML Image Tag
DESCRIPTION: Demonstrates adding the `crossorigin` attribute to an `<img>` tag. This attribute is often required when fetching images from external domains, especially when Content Security Policy (CSP) is enforced.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_9

LANGUAGE: html
CODE:
```
<img
  src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Cat_August_2010-4.jpg/272px-Cat_August_2010-4.jpg"
  alt="Cat Image Here"
  crossorigin
/>
```

----------------------------------------

TITLE: Install Stripe JS Module
DESCRIPTION: This command installs the official Stripe JS library via npm, offering another alternative to using a script tag for integrating external services like Stripe.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/3.strict-csp.md#_snippet_22

LANGUAGE: bash
CODE:
```
npm install @stripe/stripe-js
```

----------------------------------------

TITLE: Using lockfile-lint to Validate yarn.lock (Bash)
DESCRIPTION: Command using `npx` to execute the `lockfile-lint` tool against the `yarn.lock` file. It specifies allowed package hosts (`npm`, `yarn`) and enforces validation that packages are fetched via HTTPS to ensure dependency integrity.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/1.good-practices.md#_snippet_11

LANGUAGE: bash
CODE:
```
npx lockfile-lint --path yarn.lock --allowed-hosts npm yarn --validate-https
```

----------------------------------------

TITLE: SSR Strict CSP Configuration with Nonce and Route Rules (Nuxt Security, TypeScript)
DESCRIPTION: This example demonstrates configuring Strict CSP specifically for Server-Side Rendering (SSR) using the 'strict-dynamic' and nonce mechanisms. It shows how to enable nonce globally and how to override CSP settings for specific routes using `routeRules`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/1.csp.md#_snippet_6

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    nonce: true, // Enables HTML nonce support in SSR mode
    headers: {
      contentSecurityPolicy: {
        'script-src': [
          "'strict-dynamic'", // Modify with your custom CSP sources
          "'nonce-{{nonce}}'" // Enables CSP nonce support for scripts in SSR mode, supported by almost any browser (level 2)
        ]
      }
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        nonce: false,
        headers: {
          contentSecurityPolicy: {
            'script-src': "self 'unsafe-inline'"
          },
        },
      },
    }
  }
})
```

----------------------------------------

TITLE: Install Node.js ACL Module
DESCRIPTION: Provides the command to install the `acl` module, which can be used to implement Access Control Lists (ACL) for managing user permissions and authorization in a Node.js application.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/1.good-practices.md#_snippet_3

LANGUAGE: Bash
CODE:
```
npm install acl # or yarn
```

----------------------------------------

TITLE: Disabling a Specific Permissions Policy API in Nuxt
DESCRIPTION: This example shows how to disable a specific API, such as the camera, by setting its value to an empty array within the `permissionsPolicy` configuration object in `nuxt.config.ts`.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/2.permissions-policy.md#_snippet_1

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  security: {
    headers: {
      permissionsPolicy: {
        'camera': [] // This will block usage of camera by this website
      },
    },
  },
})
```

----------------------------------------

TITLE: Configuring Cross-Origin-Resource-Policy in Nuxt Security
DESCRIPTION: Shows how to configure the `crossOriginResourcePolicy` header globally within the `security.headers` object and specifically for individual routes using `routeRules` in the Nuxt configuration file (`nuxt.config.ts`). The `<OPTIONS>` placeholder indicates where the desired policy value should be placed.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/5.crossOriginResourcePolicy.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      crossOriginResourcePolicy: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        headers: {
          crossOriginResourcePolicy: <OPTIONS>,
        },
      },
    }
  }
})
```

----------------------------------------

TITLE: Install eslint-plugin-security-node
DESCRIPTION: Provides the command to install `eslint-plugin-security-node` as a development dependency. This ESLint plugin helps identify potential security vulnerabilities in Node.js code.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/1.good-practices.md#_snippet_7

LANGUAGE: Bash
CODE:
```
npm install --save-dev eslint-plugin-security-node # or yarn
```

----------------------------------------

TITLE: Install Winston Logging Library
DESCRIPTION: Provides the command to install the Winston library, a popular logging library for Node.js applications. Logging application activity is crucial for debugging and security monitoring.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/1.good-practices.md#_snippet_5

LANGUAGE: Bash
CODE:
```
npm i winston # or yarn
```

----------------------------------------

TITLE: Configure Origin-Agent-Cluster in Nuxt Security
DESCRIPTION: Demonstrates how to configure the Origin-Agent-Cluster header globally in the security module or per route using routeRules in your Nuxt configuration file. The placeholder <OPTIONS> should be replaced with '?1' or false.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/6.originAgentCluster.md#_snippet_0

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      originAgentCluster: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        headers: {
          originAgentCluster: <OPTIONS>,
        },
      },
    }
  }
})
```

----------------------------------------

TITLE: Configuring X-DNS-Prefetch-Control Header in Nuxt Security (TypeScript)
DESCRIPTION: Demonstrates how to set the xDNSPrefetchControl header option within the Nuxt Security module configuration, applicable both globally in the main security settings and specifically for individual routes using routeRules. The <OPTIONS> placeholder indicates where the desired value ('on', 'off', or false) should be placed.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/10.xDNSPrefetchControl.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      xDNSPrefetchControl: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        headers: {
          xDNSPrefetchControl: <OPTIONS>,
        },
      },
    }
  }
})
```

----------------------------------------

TITLE: Configuring Nuxt Security Headers for Cloudflare
DESCRIPTION: This configuration for `nuxt.config.ts` provides recommended security headers when integrating Nuxt Security with Cloudflare. It adjusts `crossOriginEmbedderPolicy` and modifies the `contentSecurityPolicy` to allow necessary image and script sources.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_1

LANGUAGE: ts
CODE:
```
defineNuxtConfig({
  security: {
    headers: {
      crossOriginEmbedderPolicy: 'unsafe-none',
      contentSecurityPolicy: {
        'img-src': ["'self'", 'data:'],
        'script-src': [
          "'self'",
          'https:',
          "'unsafe-inline'",
          "'strict-dynamic'",
          "'nonce-{{nonce}}'",
          "'unsafe-eval'"
        ]
      },
    },
  }
})
```

----------------------------------------

TITLE: Configure Referrer-Policy in Nuxt Security (TS)
DESCRIPTION: Provides examples of how to configure the Referrer-Policy header globally within the `security.headers` object and specifically for individual routes using `routeRules` in your `nuxt.config.ts`. It shows the placeholder `<OPTIONS>` for the policy value.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/7.referrerPolicy.md#_snippet_0

LANGUAGE: ts
CODE:
```
export default defineNuxtConfig({
  // Global
  security: {
    headers: {
      referrerPolicy: <OPTIONS>,
    },
  },

  // Per route
  routeRules: {
    '/custom-route': {
      security: {
        headers: {
          referrerPolicy: <OPTIONS>,
        },
      },
    }
  }
})
```

----------------------------------------

TITLE: Available Origin-Agent-Cluster Configuration Values
DESCRIPTION: Lists the accepted values for the `originAgentCluster` option within the Nuxt Security headers configuration.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/6.originAgentCluster.md#_snippet_2

LANGUAGE: ts
CODE:
```
originAgentCluster: '?1' | false,
```

----------------------------------------

TITLE: Available Values for Cross-Origin-Embedder-Policy Option
DESCRIPTION: These are the possible values you can assign to the `crossOriginEmbedderPolicy` option in the Nuxt Security configuration.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/3.crossOriginEmbedderPolicy.md#_snippet_2

LANGUAGE: ts
CODE:
```
crossOriginEmbedderPolicy: 'unsafe-none' | 'require-corp' | 'credentialless' | false;
```

----------------------------------------

TITLE: CSRF Module Configuration Interface - TypeScript
DESCRIPTION: These TypeScript interfaces define the structure for providing custom configuration options to the underlying `nuxt-csurf` module. `ModuleOptions` allows customizing aspects like HTTPS requirement, cookie settings, protected methods, and excluded URLs, while `CookieSerializeOptions` details the available cookie properties.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/3.middleware/7.csrf.md#_snippet_3

LANGUAGE: ts
CODE:
```
interface ModuleOptions {
  https?: boolean,
  cookie?: CookieSerializeOptions,
  cookieKey?: string,
  methodsToProtect?: Array<string>, // the request methods we want CSRF protection for
  excludedUrls?: Array<string|[string, string]>,
  encryptSecret?: string,
  encryptAlgorithm?: string
}

interface CookieSerializeOptions {
  domain?: string | undefined;
  encode?(value: string): string;
  expires?: Date | undefined;
  httpOnly?: boolean | undefined;
  maxAge?: number | undefined;
  path?: string | undefined;
  sameSite?: true | false | 'lax' | 'strict' | 'none' | undefined;
  secure?: boolean | undefined;
}
```

----------------------------------------

TITLE: Available Standard Permissions Policy Configuration Options in Nuxt
DESCRIPTION: This TypeScript type definition lists the standard configuration options available for the `permissionsPolicy` header in Nuxt Security. Each policy can accept a string or an array of strings specifying allowed origins.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/2.permissions-policy.md#_snippet_3

LANGUAGE: ts
CODE:
```
permissionsPolicy: {
  'camera'?: string[] | string;
  'display-capture'?: string[] | string;
  'fullscreen'?: string[] | string;
  'geolocation'?: string[] | string;
  'microphone'?: string[] | string;
  'web-share'?: string[] | string;
} | false
```

----------------------------------------

TITLE: Include External Script Directly in HTML
DESCRIPTION: Illustrates how to include an external script by adding the `<script>` tag directly into the HTML source. This method requires providing an `integrity` hash when using SSG mode, which may not be feasible for all external scripts.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/1.csp.md#_snippet_12

LANGUAGE: html
CODE:
```
<script src="https://example.com/script.js" integrity="sha384-....." crossorigin="anonymous" />
```

----------------------------------------

TITLE: TypeScript Type Definition for CSP Sandbox Values
DESCRIPTION: Defines the possible string values that can be used for the `sandbox` CSP directive, controlling the restrictions applied to content within an iframe.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/1.csp.md#_snippet_4

LANGUAGE: ts
CODE:
```
type CSPSandboxValue =
| 'allow-downloads'
| 'allow-downloads-without-user-activation'
| 'allow-forms'
| 'allow-modals'
| 'allow-orientation-lock'
| 'allow-pointer-lock'
| 'allow-popups'
| 'allow-popups-to-escape-sandbox'
| 'allow-presentation'
| 'allow-same-origin'
| 'allow-scripts'
| 'allow-storage-access-by-user-activation'
| 'allow-top-navigation'
| 'allow-top-navigation-by-user-activation'
| 'allow-top-navigation-to-custom-protocols';
```

----------------------------------------

TITLE: Create External Navigation Middleware in Nuxt.js
DESCRIPTION: Provides a Nuxt route middleware that checks if the target route is in a predefined list and, if so, performs a full page reload using `window.location.href`. This can be used to treat specific internal routes as external links for header handling.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_12

LANGUAGE: ts
CODE:
```
// middleware/external-navigation.ts

export default defineNuxtRouteMiddleware((to) => {
  const routesForExternalLinks = ['/example']
  // Add any other routes you want to act as external links

  if (
    import.meta.client &&
    !useNuxtApp().isHydrating &&
    to.path &&
    routesForExternalLinks.includes(to.path)
  ) {
    window.location.href = to.fullPath
  }
})

```

----------------------------------------

TITLE: Set Content-Security-Policy-Report-Only Header in Nuxt.js
DESCRIPTION: Explains how to add the `Content-Security-Policy-Report-Only` header using `routeRules` in `nuxt.config.ts` for monitoring policy effects without enforcing them. This header sends violation reports to a specified URI.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_7

LANGUAGE: ts
CODE:
```
// nuxt.config.ts

routeRules: {
  '/**': {
    headers: {
      'Content-Security-Policy-Report-Only': '<YOUR_DESIRED_VALUE>'
    },
  },
},
```

----------------------------------------

TITLE: Use external Attribute on NuxtLink
DESCRIPTION: Demonstrates using the `external` boolean attribute on the `<NuxtLink>` component. Setting this attribute to `true` forces the link to behave as an external navigation, resulting in a full page reload instead of client-side routing.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/5.advanced/2.faq.md#_snippet_14

LANGUAGE: html
CODE:
```
<NuxtLink :to="{name : 'example'}" :external="true">
  Example
</NuxtLink>
```

----------------------------------------

TITLE: Available Values for Cross-Origin-Opener-Policy Option (TypeScript)
DESCRIPTION: Defines the possible string literal values ('same-origin', 'same-origin-allow-popups', 'unsafe-none') and the boolean `false` that can be assigned to the `crossOriginOpenerPolicy` configuration option in Nuxt Security.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/4.crossOriginOpenerPolicy.md#_snippet_2

LANGUAGE: ts
CODE:
```
crossOriginOpenerPolicy: 'same-origin' | 'same-origin-allow-popups' | 'unsafe-none' | false
```

----------------------------------------

TITLE: Available Referrer-Policy Options (TS)
DESCRIPTION: Defines the possible values that can be assigned to the `referrerPolicy` configuration option. It lists the standard Referrer-Policy string values and the boolean `false` option to disable the header.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/2.headers/7.referrerPolicy.md#_snippet_2

LANGUAGE: ts
CODE:
```
referrerPolicy: 'no-referrer'
  | 'no-referrer-when-downgrade'
  | 'origin'
  | 'origin-when-cross-origin'
  | 'same-origin'
  | 'strict-origin'
  | 'strict-origin-when-cross-origin'
  | 'unsafe-url'
  | false
```

----------------------------------------

TITLE: Disabling hidePoweredBy Option in Nuxt Security (JavaScript)
DESCRIPTION: This configuration snippet shows how to disable the default behavior of the nuxt-security module that hides the X-Powered-By header. This is generally not recommended for security reasons but is possible via the module options.
SOURCE: https://github.com/baroshem/nuxt-security/blob/main/docs/content/4.utils/1.hide-x-powered-by-header.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default defineNuxtConfig({
  modules: ['nuxt-security'],
  security: {
    hidePoweredBy: false
  }
})
```